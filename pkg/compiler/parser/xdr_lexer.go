// Code generated from pkg/compiler/parser/XDR.g4 by ANTLR 4.10. DO NOT EDIT.

package parser

import (
	"fmt"
	"sync"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf

var (
	_ = sync.Once{}
	_ = unicode.IsLetter
)

type XDRLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var xdrlexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	channelNames           []string
	modeNames              []string
	literalNames           []string
	symbolicNames          []string
	ruleNames              []string
	predictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func xdrlexerLexerInit() {
	staticData := &xdrlexerLexerStaticData
	staticData.channelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.modeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.literalNames = []string{
		"", "'package'", "';'", "'import'", "'['", "']'", "'<'", "'>'", "'opaque'",
		"'string'", "'utf8string'", "'*'", "'void'", "'unsigned'", "'int'",
		"'hyper'", "'float'", "'double'", "'quadruple'", "'bool'", "'enum'",
		"'{'", "'='", "','", "'}'", "'struct'", "'union'", "'switch'", "'('",
		"')'", "'default'", "':'", "'case'", "'const'", "'typedef'", "'program'",
		"'version'",
	}
	staticData.symbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "COMMENT", "WHITE_SPACE", "C_DIRECTIVE", "IDENTIFIER", "DECIMAL_CONSTANT",
		"HEXADECIMAL_CONSTANT", "OCTAL_CONSTANT", "STRING_CONSTANT",
	}
	staticData.ruleNames = []string{
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16",
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24",
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32",
		"T__33", "T__34", "T__35", "COMMENT", "WHITE_SPACE", "C_DIRECTIVE",
		"IDENTIFIER", "DECIMAL_CONSTANT", "HEXADECIMAL_CONSTANT", "OCTAL_CONSTANT",
		"STRING_CONSTANT",
	}
	staticData.predictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 44, 346, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 2, 43, 7, 43, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
		0, 1, 0, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1,
		3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1,
		7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1,
		9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 10, 1, 10, 1, 11, 1, 11,
		1, 11, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1,
		12, 1, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14,
		1, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1,
		16, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17,
		1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 19, 1, 19, 1,
		19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 21, 1, 21, 1, 22, 1, 22, 1, 23, 1, 23,
		1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1,
		25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 27,
		1, 27, 1, 28, 1, 28, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1,
		29, 1, 30, 1, 30, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 32, 1, 32, 1, 32,
		1, 32, 1, 32, 1, 32, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1,
		33, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 35, 1, 35,
		1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 36, 1, 36, 1, 36, 1, 36, 5,
		36, 280, 8, 36, 10, 36, 12, 36, 283, 9, 36, 1, 36, 1, 36, 1, 36, 1, 36,
		1, 36, 1, 37, 4, 37, 291, 8, 37, 11, 37, 12, 37, 292, 1, 37, 1, 37, 1,
		38, 1, 38, 5, 38, 299, 8, 38, 10, 38, 12, 38, 302, 9, 38, 1, 38, 1, 38,
		1, 39, 1, 39, 5, 39, 308, 8, 39, 10, 39, 12, 39, 311, 9, 39, 1, 40, 3,
		40, 314, 8, 40, 1, 40, 1, 40, 5, 40, 318, 8, 40, 10, 40, 12, 40, 321, 9,
		40, 1, 41, 1, 41, 1, 41, 1, 41, 4, 41, 327, 8, 41, 11, 41, 12, 41, 328,
		1, 42, 1, 42, 5, 42, 333, 8, 42, 10, 42, 12, 42, 336, 9, 42, 1, 43, 1,
		43, 5, 43, 340, 8, 43, 10, 43, 12, 43, 343, 9, 43, 1, 43, 1, 43, 1, 281,
		0, 44, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10,
		21, 11, 23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19,
		39, 20, 41, 21, 43, 22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 27, 55, 28,
		57, 29, 59, 30, 61, 31, 63, 32, 65, 33, 67, 34, 69, 35, 71, 36, 73, 37,
		75, 38, 77, 39, 79, 40, 81, 41, 83, 42, 85, 43, 87, 44, 1, 0, 9, 3, 0,
		9, 10, 13, 13, 32, 32, 2, 0, 10, 10, 13, 13, 2, 0, 65, 90, 97, 122, 4,
		0, 48, 57, 65, 90, 95, 95, 97, 122, 1, 0, 49, 57, 1, 0, 48, 57, 3, 0, 48,
		57, 65, 70, 97, 102, 1, 0, 48, 55, 3, 0, 0, 31, 34, 34, 92, 92, 354, 0,
		1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0,
		9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0,
		0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0,
		0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0,
		0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1,
		0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0, 47,
		1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 53, 1, 0, 0, 0, 0,
		55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 61, 1, 0, 0, 0,
		0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 67, 1, 0, 0, 0, 0, 69, 1, 0, 0,
		0, 0, 71, 1, 0, 0, 0, 0, 73, 1, 0, 0, 0, 0, 75, 1, 0, 0, 0, 0, 77, 1, 0,
		0, 0, 0, 79, 1, 0, 0, 0, 0, 81, 1, 0, 0, 0, 0, 83, 1, 0, 0, 0, 0, 85, 1,
		0, 0, 0, 0, 87, 1, 0, 0, 0, 1, 89, 1, 0, 0, 0, 3, 97, 1, 0, 0, 0, 5, 99,
		1, 0, 0, 0, 7, 106, 1, 0, 0, 0, 9, 108, 1, 0, 0, 0, 11, 110, 1, 0, 0, 0,
		13, 112, 1, 0, 0, 0, 15, 114, 1, 0, 0, 0, 17, 121, 1, 0, 0, 0, 19, 128,
		1, 0, 0, 0, 21, 139, 1, 0, 0, 0, 23, 141, 1, 0, 0, 0, 25, 146, 1, 0, 0,
		0, 27, 155, 1, 0, 0, 0, 29, 159, 1, 0, 0, 0, 31, 165, 1, 0, 0, 0, 33, 171,
		1, 0, 0, 0, 35, 178, 1, 0, 0, 0, 37, 188, 1, 0, 0, 0, 39, 193, 1, 0, 0,
		0, 41, 198, 1, 0, 0, 0, 43, 200, 1, 0, 0, 0, 45, 202, 1, 0, 0, 0, 47, 204,
		1, 0, 0, 0, 49, 206, 1, 0, 0, 0, 51, 213, 1, 0, 0, 0, 53, 219, 1, 0, 0,
		0, 55, 226, 1, 0, 0, 0, 57, 228, 1, 0, 0, 0, 59, 230, 1, 0, 0, 0, 61, 238,
		1, 0, 0, 0, 63, 240, 1, 0, 0, 0, 65, 245, 1, 0, 0, 0, 67, 251, 1, 0, 0,
		0, 69, 259, 1, 0, 0, 0, 71, 267, 1, 0, 0, 0, 73, 275, 1, 0, 0, 0, 75, 290,
		1, 0, 0, 0, 77, 296, 1, 0, 0, 0, 79, 305, 1, 0, 0, 0, 81, 313, 1, 0, 0,
		0, 83, 322, 1, 0, 0, 0, 85, 330, 1, 0, 0, 0, 87, 337, 1, 0, 0, 0, 89, 90,
		5, 112, 0, 0, 90, 91, 5, 97, 0, 0, 91, 92, 5, 99, 0, 0, 92, 93, 5, 107,
		0, 0, 93, 94, 5, 97, 0, 0, 94, 95, 5, 103, 0, 0, 95, 96, 5, 101, 0, 0,
		96, 2, 1, 0, 0, 0, 97, 98, 5, 59, 0, 0, 98, 4, 1, 0, 0, 0, 99, 100, 5,
		105, 0, 0, 100, 101, 5, 109, 0, 0, 101, 102, 5, 112, 0, 0, 102, 103, 5,
		111, 0, 0, 103, 104, 5, 114, 0, 0, 104, 105, 5, 116, 0, 0, 105, 6, 1, 0,
		0, 0, 106, 107, 5, 91, 0, 0, 107, 8, 1, 0, 0, 0, 108, 109, 5, 93, 0, 0,
		109, 10, 1, 0, 0, 0, 110, 111, 5, 60, 0, 0, 111, 12, 1, 0, 0, 0, 112, 113,
		5, 62, 0, 0, 113, 14, 1, 0, 0, 0, 114, 115, 5, 111, 0, 0, 115, 116, 5,
		112, 0, 0, 116, 117, 5, 97, 0, 0, 117, 118, 5, 113, 0, 0, 118, 119, 5,
		117, 0, 0, 119, 120, 5, 101, 0, 0, 120, 16, 1, 0, 0, 0, 121, 122, 5, 115,
		0, 0, 122, 123, 5, 116, 0, 0, 123, 124, 5, 114, 0, 0, 124, 125, 5, 105,
		0, 0, 125, 126, 5, 110, 0, 0, 126, 127, 5, 103, 0, 0, 127, 18, 1, 0, 0,
		0, 128, 129, 5, 117, 0, 0, 129, 130, 5, 116, 0, 0, 130, 131, 5, 102, 0,
		0, 131, 132, 5, 56, 0, 0, 132, 133, 5, 115, 0, 0, 133, 134, 5, 116, 0,
		0, 134, 135, 5, 114, 0, 0, 135, 136, 5, 105, 0, 0, 136, 137, 5, 110, 0,
		0, 137, 138, 5, 103, 0, 0, 138, 20, 1, 0, 0, 0, 139, 140, 5, 42, 0, 0,
		140, 22, 1, 0, 0, 0, 141, 142, 5, 118, 0, 0, 142, 143, 5, 111, 0, 0, 143,
		144, 5, 105, 0, 0, 144, 145, 5, 100, 0, 0, 145, 24, 1, 0, 0, 0, 146, 147,
		5, 117, 0, 0, 147, 148, 5, 110, 0, 0, 148, 149, 5, 115, 0, 0, 149, 150,
		5, 105, 0, 0, 150, 151, 5, 103, 0, 0, 151, 152, 5, 110, 0, 0, 152, 153,
		5, 101, 0, 0, 153, 154, 5, 100, 0, 0, 154, 26, 1, 0, 0, 0, 155, 156, 5,
		105, 0, 0, 156, 157, 5, 110, 0, 0, 157, 158, 5, 116, 0, 0, 158, 28, 1,
		0, 0, 0, 159, 160, 5, 104, 0, 0, 160, 161, 5, 121, 0, 0, 161, 162, 5, 112,
		0, 0, 162, 163, 5, 101, 0, 0, 163, 164, 5, 114, 0, 0, 164, 30, 1, 0, 0,
		0, 165, 166, 5, 102, 0, 0, 166, 167, 5, 108, 0, 0, 167, 168, 5, 111, 0,
		0, 168, 169, 5, 97, 0, 0, 169, 170, 5, 116, 0, 0, 170, 32, 1, 0, 0, 0,
		171, 172, 5, 100, 0, 0, 172, 173, 5, 111, 0, 0, 173, 174, 5, 117, 0, 0,
		174, 175, 5, 98, 0, 0, 175, 176, 5, 108, 0, 0, 176, 177, 5, 101, 0, 0,
		177, 34, 1, 0, 0, 0, 178, 179, 5, 113, 0, 0, 179, 180, 5, 117, 0, 0, 180,
		181, 5, 97, 0, 0, 181, 182, 5, 100, 0, 0, 182, 183, 5, 114, 0, 0, 183,
		184, 5, 117, 0, 0, 184, 185, 5, 112, 0, 0, 185, 186, 5, 108, 0, 0, 186,
		187, 5, 101, 0, 0, 187, 36, 1, 0, 0, 0, 188, 189, 5, 98, 0, 0, 189, 190,
		5, 111, 0, 0, 190, 191, 5, 111, 0, 0, 191, 192, 5, 108, 0, 0, 192, 38,
		1, 0, 0, 0, 193, 194, 5, 101, 0, 0, 194, 195, 5, 110, 0, 0, 195, 196, 5,
		117, 0, 0, 196, 197, 5, 109, 0, 0, 197, 40, 1, 0, 0, 0, 198, 199, 5, 123,
		0, 0, 199, 42, 1, 0, 0, 0, 200, 201, 5, 61, 0, 0, 201, 44, 1, 0, 0, 0,
		202, 203, 5, 44, 0, 0, 203, 46, 1, 0, 0, 0, 204, 205, 5, 125, 0, 0, 205,
		48, 1, 0, 0, 0, 206, 207, 5, 115, 0, 0, 207, 208, 5, 116, 0, 0, 208, 209,
		5, 114, 0, 0, 209, 210, 5, 117, 0, 0, 210, 211, 5, 99, 0, 0, 211, 212,
		5, 116, 0, 0, 212, 50, 1, 0, 0, 0, 213, 214, 5, 117, 0, 0, 214, 215, 5,
		110, 0, 0, 215, 216, 5, 105, 0, 0, 216, 217, 5, 111, 0, 0, 217, 218, 5,
		110, 0, 0, 218, 52, 1, 0, 0, 0, 219, 220, 5, 115, 0, 0, 220, 221, 5, 119,
		0, 0, 221, 222, 5, 105, 0, 0, 222, 223, 5, 116, 0, 0, 223, 224, 5, 99,
		0, 0, 224, 225, 5, 104, 0, 0, 225, 54, 1, 0, 0, 0, 226, 227, 5, 40, 0,
		0, 227, 56, 1, 0, 0, 0, 228, 229, 5, 41, 0, 0, 229, 58, 1, 0, 0, 0, 230,
		231, 5, 100, 0, 0, 231, 232, 5, 101, 0, 0, 232, 233, 5, 102, 0, 0, 233,
		234, 5, 97, 0, 0, 234, 235, 5, 117, 0, 0, 235, 236, 5, 108, 0, 0, 236,
		237, 5, 116, 0, 0, 237, 60, 1, 0, 0, 0, 238, 239, 5, 58, 0, 0, 239, 62,
		1, 0, 0, 0, 240, 241, 5, 99, 0, 0, 241, 242, 5, 97, 0, 0, 242, 243, 5,
		115, 0, 0, 243, 244, 5, 101, 0, 0, 244, 64, 1, 0, 0, 0, 245, 246, 5, 99,
		0, 0, 246, 247, 5, 111, 0, 0, 247, 248, 5, 110, 0, 0, 248, 249, 5, 115,
		0, 0, 249, 250, 5, 116, 0, 0, 250, 66, 1, 0, 0, 0, 251, 252, 5, 116, 0,
		0, 252, 253, 5, 121, 0, 0, 253, 254, 5, 112, 0, 0, 254, 255, 5, 101, 0,
		0, 255, 256, 5, 100, 0, 0, 256, 257, 5, 101, 0, 0, 257, 258, 5, 102, 0,
		0, 258, 68, 1, 0, 0, 0, 259, 260, 5, 112, 0, 0, 260, 261, 5, 114, 0, 0,
		261, 262, 5, 111, 0, 0, 262, 263, 5, 103, 0, 0, 263, 264, 5, 114, 0, 0,
		264, 265, 5, 97, 0, 0, 265, 266, 5, 109, 0, 0, 266, 70, 1, 0, 0, 0, 267,
		268, 5, 118, 0, 0, 268, 269, 5, 101, 0, 0, 269, 270, 5, 114, 0, 0, 270,
		271, 5, 115, 0, 0, 271, 272, 5, 105, 0, 0, 272, 273, 5, 111, 0, 0, 273,
		274, 5, 110, 0, 0, 274, 72, 1, 0, 0, 0, 275, 276, 5, 47, 0, 0, 276, 277,
		5, 42, 0, 0, 277, 281, 1, 0, 0, 0, 278, 280, 9, 0, 0, 0, 279, 278, 1, 0,
		0, 0, 280, 283, 1, 0, 0, 0, 281, 282, 1, 0, 0, 0, 281, 279, 1, 0, 0, 0,
		282, 284, 1, 0, 0, 0, 283, 281, 1, 0, 0, 0, 284, 285, 5, 42, 0, 0, 285,
		286, 5, 47, 0, 0, 286, 287, 1, 0, 0, 0, 287, 288, 6, 36, 0, 0, 288, 74,
		1, 0, 0, 0, 289, 291, 7, 0, 0, 0, 290, 289, 1, 0, 0, 0, 291, 292, 1, 0,
		0, 0, 292, 290, 1, 0, 0, 0, 292, 293, 1, 0, 0, 0, 293, 294, 1, 0, 0, 0,
		294, 295, 6, 37, 0, 0, 295, 76, 1, 0, 0, 0, 296, 300, 5, 37, 0, 0, 297,
		299, 8, 1, 0, 0, 298, 297, 1, 0, 0, 0, 299, 302, 1, 0, 0, 0, 300, 298,
		1, 0, 0, 0, 300, 301, 1, 0, 0, 0, 301, 303, 1, 0, 0, 0, 302, 300, 1, 0,
		0, 0, 303, 304, 6, 38, 0, 0, 304, 78, 1, 0, 0, 0, 305, 309, 7, 2, 0, 0,
		306, 308, 7, 3, 0, 0, 307, 306, 1, 0, 0, 0, 308, 311, 1, 0, 0, 0, 309,
		307, 1, 0, 0, 0, 309, 310, 1, 0, 0, 0, 310, 80, 1, 0, 0, 0, 311, 309, 1,
		0, 0, 0, 312, 314, 5, 45, 0, 0, 313, 312, 1, 0, 0, 0, 313, 314, 1, 0, 0,
		0, 314, 315, 1, 0, 0, 0, 315, 319, 7, 4, 0, 0, 316, 318, 7, 5, 0, 0, 317,
		316, 1, 0, 0, 0, 318, 321, 1, 0, 0, 0, 319, 317, 1, 0, 0, 0, 319, 320,
		1, 0, 0, 0, 320, 82, 1, 0, 0, 0, 321, 319, 1, 0, 0, 0, 322, 323, 5, 48,
		0, 0, 323, 324, 5, 120, 0, 0, 324, 326, 1, 0, 0, 0, 325, 327, 7, 6, 0,
		0, 326, 325, 1, 0, 0, 0, 327, 328, 1, 0, 0, 0, 328, 326, 1, 0, 0, 0, 328,
		329, 1, 0, 0, 0, 329, 84, 1, 0, 0, 0, 330, 334, 5, 48, 0, 0, 331, 333,
		7, 7, 0, 0, 332, 331, 1, 0, 0, 0, 333, 336, 1, 0, 0, 0, 334, 332, 1, 0,
		0, 0, 334, 335, 1, 0, 0, 0, 335, 86, 1, 0, 0, 0, 336, 334, 1, 0, 0, 0,
		337, 341, 5, 34, 0, 0, 338, 340, 8, 8, 0, 0, 339, 338, 1, 0, 0, 0, 340,
		343, 1, 0, 0, 0, 341, 339, 1, 0, 0, 0, 341, 342, 1, 0, 0, 0, 342, 344,
		1, 0, 0, 0, 343, 341, 1, 0, 0, 0, 344, 345, 5, 34, 0, 0, 345, 88, 1, 0,
		0, 0, 10, 0, 281, 292, 300, 309, 313, 319, 328, 334, 341, 1, 6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// XDRLexerInit initializes any static state used to implement XDRLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewXDRLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func XDRLexerInit() {
	staticData := &xdrlexerLexerStaticData
	staticData.once.Do(xdrlexerLexerInit)
}

// NewXDRLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewXDRLexer(input antlr.CharStream) *XDRLexer {
	XDRLexerInit()
	l := new(XDRLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &xdrlexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.predictionContextCache)
	l.channelNames = staticData.channelNames
	l.modeNames = staticData.modeNames
	l.RuleNames = staticData.ruleNames
	l.LiteralNames = staticData.literalNames
	l.SymbolicNames = staticData.symbolicNames
	l.GrammarFileName = "XDR.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// XDRLexer tokens.
const (
	XDRLexerT__0                 = 1
	XDRLexerT__1                 = 2
	XDRLexerT__2                 = 3
	XDRLexerT__3                 = 4
	XDRLexerT__4                 = 5
	XDRLexerT__5                 = 6
	XDRLexerT__6                 = 7
	XDRLexerT__7                 = 8
	XDRLexerT__8                 = 9
	XDRLexerT__9                 = 10
	XDRLexerT__10                = 11
	XDRLexerT__11                = 12
	XDRLexerT__12                = 13
	XDRLexerT__13                = 14
	XDRLexerT__14                = 15
	XDRLexerT__15                = 16
	XDRLexerT__16                = 17
	XDRLexerT__17                = 18
	XDRLexerT__18                = 19
	XDRLexerT__19                = 20
	XDRLexerT__20                = 21
	XDRLexerT__21                = 22
	XDRLexerT__22                = 23
	XDRLexerT__23                = 24
	XDRLexerT__24                = 25
	XDRLexerT__25                = 26
	XDRLexerT__26                = 27
	XDRLexerT__27                = 28
	XDRLexerT__28                = 29
	XDRLexerT__29                = 30
	XDRLexerT__30                = 31
	XDRLexerT__31                = 32
	XDRLexerT__32                = 33
	XDRLexerT__33                = 34
	XDRLexerT__34                = 35
	XDRLexerT__35                = 36
	XDRLexerCOMMENT              = 37
	XDRLexerWHITE_SPACE          = 38
	XDRLexerC_DIRECTIVE          = 39
	XDRLexerIDENTIFIER           = 40
	XDRLexerDECIMAL_CONSTANT     = 41
	XDRLexerHEXADECIMAL_CONSTANT = 42
	XDRLexerOCTAL_CONSTANT       = 43
	XDRLexerSTRING_CONSTANT      = 44
)
