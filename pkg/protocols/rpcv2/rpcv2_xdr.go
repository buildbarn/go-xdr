// Code generated by go-xdr. DO NOT EDIT.
package rpcv2

import (
	"fmt"
	"io"

	"github.com/buildbarn/go-xdr/pkg/runtime"
)

// Type definition "auth_flavor".

type AuthFlavor int32

func (mParent *AuthFlavor) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	var m AuthFlavor
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	*mParent = m
done:
	return
}

func (m AuthFlavor) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const AuthFlavorEncodedSizeBytes = 4

const AUTH_DH AuthFlavor = 3

const AUTH_NONE AuthFlavor = 0

const AUTH_SHORT AuthFlavor = 2

const AUTH_SYS AuthFlavor = 1

const RPCSEC_GSS AuthFlavor = 6

var AuthFlavor_name = map[AuthFlavor]string{
	3: "AUTH_DH",
	0: "AUTH_NONE",
	2: "AUTH_SHORT",
	1: "AUTH_SYS",
	6: "RPCSEC_GSS",
}

// Type definition "opaque_auth".

type OpaqueAuth struct {
	Flavor AuthFlavor
	Body   []byte
}

func (m *OpaqueAuth) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Flavor
		var m AuthFlavor
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Body
		var m []byte
		m, nField, err = runtime.ReadVariableLengthOpaque(r, 400)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *OpaqueAuth) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Flavor
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Body
		nField, err = runtime.WriteVariableLengthOpaque(w, 400, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *OpaqueAuth) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Body
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "msg_type".

type MsgType int32

func (mParent *MsgType) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	var m MsgType
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	*mParent = m
done:
	return
}

func (m MsgType) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const MsgTypeEncodedSizeBytes = 4

const CALL MsgType = 0

const REPLY MsgType = 1

var MsgType_name = map[MsgType]string{
	0: "CALL",
	1: "REPLY",
}

// Type definition "reply_stat".

type ReplyStat int32

func (mParent *ReplyStat) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	var m ReplyStat
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	*mParent = m
done:
	return
}

func (m ReplyStat) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const ReplyStatEncodedSizeBytes = 4

const MSG_ACCEPTED ReplyStat = 0

const MSG_DENIED ReplyStat = 1

var ReplyStat_name = map[ReplyStat]string{
	0: "MSG_ACCEPTED",
	1: "MSG_DENIED",
}

// Type definition "accept_stat".

type AcceptStat int32

func (mParent *AcceptStat) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	var m AcceptStat
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	*mParent = m
done:
	return
}

func (m AcceptStat) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const AcceptStatEncodedSizeBytes = 4

const GARBAGE_ARGS AcceptStat = 4

const PROC_UNAVAIL AcceptStat = 3

const PROG_MISMATCH AcceptStat = 2

const PROG_UNAVAIL AcceptStat = 1

const SUCCESS AcceptStat = 0

const SYSTEM_ERR AcceptStat = 5

var AcceptStat_name = map[AcceptStat]string{
	4: "GARBAGE_ARGS",
	3: "PROC_UNAVAIL",
	2: "PROG_MISMATCH",
	1: "PROG_UNAVAIL",
	0: "SUCCESS",
	5: "SYSTEM_ERR",
}

// Type definition "reject_stat".

type RejectStat int32

func (mParent *RejectStat) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	var m RejectStat
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	*mParent = m
done:
	return
}

func (m RejectStat) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const RejectStatEncodedSizeBytes = 4

const AUTH_ERROR RejectStat = 1

const RPC_MISMATCH RejectStat = 0

var RejectStat_name = map[RejectStat]string{
	1: "AUTH_ERROR",
	0: "RPC_MISMATCH",
}

// Type definition "auth_stat".

type AuthStat int32

func (mParent *AuthStat) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	var m AuthStat
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	*mParent = m
done:
	return
}

func (m AuthStat) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const AuthStatEncodedSizeBytes = 4

const AUTH_BADCRED AuthStat = 1

const AUTH_BADVERF AuthStat = 3

const AUTH_DECODE AuthStat = 11

const AUTH_FAILED AuthStat = 7

const AUTH_INVALIDRESP AuthStat = 6

const AUTH_KERB_GENERIC AuthStat = 8

const AUTH_NET_ADDR AuthStat = 12

const AUTH_OK AuthStat = 0

const AUTH_REJECTEDCRED AuthStat = 2

const AUTH_REJECTEDVERF AuthStat = 4

const AUTH_TIMEEXPIRE AuthStat = 9

const AUTH_TKT_FILE AuthStat = 10

const AUTH_TOOWEAK AuthStat = 5

const RPCSEC_GSS_CREDPROBLEM AuthStat = 13

const RPCSEC_GSS_CTXPROBLEM AuthStat = 14

var AuthStat_name = map[AuthStat]string{
	1:  "AUTH_BADCRED",
	3:  "AUTH_BADVERF",
	11: "AUTH_DECODE",
	7:  "AUTH_FAILED",
	6:  "AUTH_INVALIDRESP",
	8:  "AUTH_KERB_GENERIC",
	12: "AUTH_NET_ADDR",
	0:  "AUTH_OK",
	2:  "AUTH_REJECTEDCRED",
	4:  "AUTH_REJECTEDVERF",
	9:  "AUTH_TIMEEXPIRE",
	10: "AUTH_TKT_FILE",
	5:  "AUTH_TOOWEAK",
	13: "RPCSEC_GSS_CREDPROBLEM",
	14: "RPCSEC_GSS_CTXPROBLEM",
}

// Type definition "rpc_msg".

type RpcMsg struct {
	Xid  uint32
	Body interface {
		isRpcMsgBody()
		GetMtype() MsgType
		io.WriterTo
		GetEncodedSizeBytes() int
	}
}

func (m *RpcMsg) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Xid
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Body
		var m interface {
			isRpcMsgBody()
			GetMtype() MsgType
			io.WriterTo
			GetEncodedSizeBytes() int
		}
		var discriminant MsgType
		{
			var m MsgType
			*(*int32)(&m), nField, err = runtime.ReadInt(r)
			nTotal += nField
			if err != nil {
				goto done
			}
			discriminant = m
		}
		switch discriminant {
		case 0:
			var mArm RpcMsgBody_CALL
			{
				m := &mArm
				{
					m := &m.Cbody
					nField, err = m.ReadFrom(r)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
			}
			m = &mArm
		case 1:
			var mArm RpcMsgBody_REPLY
			{
				m := &mArm
				{
					mSave := &m.Rbody
					var m ReplyBody
					m, nField, err = ReadReplyBody(r)
					nTotal += nField
					if err != nil {
						goto done
					}
					*mSave = m
				}
			}
			m = &mArm
		default:
			err = fmt.Errorf("discriminant rpc_msg.body.mtype has unknown value %d", discriminant)
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *RpcMsg) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Xid
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Body
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *RpcMsg) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Body
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

func readRpcMsgBodyMtype(r io.Reader) (m MsgType, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeRpcMsgBodyMtype(w io.Writer, m MsgType) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const rpcMsgBodyMtypeEncodedSizeBytes = 4

type RpcMsgBody_CALL struct {
	Cbody CallBody
}

func (m *RpcMsgBody_CALL) isRpcMsgBody() {}

func (m *RpcMsgBody_CALL) GetMtype() MsgType {
	return 0
}

func (m *RpcMsgBody_CALL) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m MsgType = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Cbody
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *RpcMsgBody_CALL) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Cbody
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type RpcMsgBody_REPLY struct {
	Rbody ReplyBody
}

func (m *RpcMsgBody_REPLY) isRpcMsgBody() {}

func (m *RpcMsgBody_REPLY) GetMtype() MsgType {
	return 1
}

func (m *RpcMsgBody_REPLY) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m MsgType = 1
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Rbody
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *RpcMsgBody_REPLY) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Rbody
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "call_body".

type CallBody struct {
	Rpcvers uint32
	Prog    uint32
	Vers    uint32
	Proc    uint32
	Cred    OpaqueAuth
	Verf    OpaqueAuth
}

func (m *CallBody) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Rpcvers
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Prog
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Vers
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Proc
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.Cred
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Verf
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *CallBody) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Rpcvers
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Prog
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Vers
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Proc
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Cred
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Verf
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *CallBody) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	nTotal += 4
	nTotal += 4
	{
		m := &m.Cred
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := &m.Verf
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "reply_body".

type ReplyBody interface {
	isReplyBody()
	GetStat() ReplyStat
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadReplyBody(r io.Reader) (m ReplyBody, nTotal int64, err error) {
	var nField int64
	var discriminant ReplyStat
	{
		var m ReplyStat
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm ReplyBody_MSG_ACCEPTED
		{
			m := &mArm
			{
				m := &m.Areply
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 1:
		var mArm ReplyBody_MSG_DENIED
		{
			m := &mArm
			{
				mSave := &m.Rreply
				var m RejectedReply
				m, nField, err = ReadRejectedReply(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	default:
		err = fmt.Errorf("discriminant reply_body.stat has unknown value %d", discriminant)
		goto done
	}
done:
	return
}

func readReplyBodyStat(r io.Reader) (m ReplyStat, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeReplyBodyStat(w io.Writer, m ReplyStat) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const replyBodyStatEncodedSizeBytes = 4

type ReplyBody_MSG_ACCEPTED struct {
	Areply AcceptedReply
}

func (m *ReplyBody_MSG_ACCEPTED) isReplyBody() {}

func (m *ReplyBody_MSG_ACCEPTED) GetStat() ReplyStat {
	return 0
}

func (m *ReplyBody_MSG_ACCEPTED) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m ReplyStat = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Areply
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *ReplyBody_MSG_ACCEPTED) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Areply
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type ReplyBody_MSG_DENIED struct {
	Rreply RejectedReply
}

func (m *ReplyBody_MSG_DENIED) isReplyBody() {}

func (m *ReplyBody_MSG_DENIED) GetStat() ReplyStat {
	return 1
}

func (m *ReplyBody_MSG_DENIED) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m ReplyStat = 1
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Rreply
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *ReplyBody_MSG_DENIED) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Rreply
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "accepted_reply".

type AcceptedReply struct {
	Verf      OpaqueAuth
	ReplyData interface {
		isAcceptedReplyReplyData()
		GetStat() AcceptStat
		io.WriterTo
		GetEncodedSizeBytes() int
	}
}

func (m *AcceptedReply) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Verf
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.ReplyData
		var m interface {
			isAcceptedReplyReplyData()
			GetStat() AcceptStat
			io.WriterTo
			GetEncodedSizeBytes() int
		}
		var discriminant AcceptStat
		{
			var m AcceptStat
			*(*int32)(&m), nField, err = runtime.ReadInt(r)
			nTotal += nField
			if err != nil {
				goto done
			}
			discriminant = m
		}
		switch discriminant {
		case 0:
			var mArm AcceptedReplyReplyData_SUCCESS
			{
				m := &mArm
				{
					m := &m.Results
					nField, err = runtime.ReadFixedLengthOpaque(r, m[:])
					nTotal += nField
					if err != nil {
						goto done
					}
				}
			}
			m = &mArm
		case 2:
			var mArm AcceptedReplyReplyData_PROG_MISMATCH
			{
				m := &mArm
				{
					m := &m.MismatchInfo
					{
						mSave := &m.Low
						var m uint32
						m, nField, err = runtime.ReadUnsignedInt(r)
						nTotal += nField
						if err != nil {
							goto done
						}
						*mSave = m
					}
					{
						mSave := &m.High
						var m uint32
						m, nField, err = runtime.ReadUnsignedInt(r)
						nTotal += nField
						if err != nil {
							goto done
						}
						*mSave = m
					}
				}
			}
			m = &mArm
		default:
			var mArm AcceptedReplyReplyData_default
			{
				m := &mArm
				m.Stat = discriminant
				_ = m
			}
			m = &mArm
		}
		*mSave = m
	}
done:
	return
}

func (m *AcceptedReply) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Verf
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.ReplyData
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *AcceptedReply) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.Verf
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := m.ReplyData
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

func readAcceptedReplyReplyDataStat(r io.Reader) (m AcceptStat, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeAcceptedReplyReplyDataStat(w io.Writer, m AcceptStat) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const acceptedReplyReplyDataStatEncodedSizeBytes = 4

type AcceptedReplyReplyData_SUCCESS struct {
	Results [0]byte
}

func (m *AcceptedReplyReplyData_SUCCESS) isAcceptedReplyReplyData() {}

func (m *AcceptedReplyReplyData_SUCCESS) GetStat() AcceptStat {
	return 0
}

func (m *AcceptedReplyReplyData_SUCCESS) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m AcceptStat = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Results
		nField, err = runtime.WriteFixedLengthOpaque(w, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *AcceptedReplyReplyData_SUCCESS) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 0
	return
}

type AcceptedReplyReplyData_PROG_MISMATCH struct {
	MismatchInfo struct {
		Low  uint32
		High uint32
	}
}

func (m *AcceptedReplyReplyData_PROG_MISMATCH) isAcceptedReplyReplyData() {}

func (m *AcceptedReplyReplyData_PROG_MISMATCH) GetStat() AcceptStat {
	return 2
}

func (m *AcceptedReplyReplyData_PROG_MISMATCH) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m AcceptStat = 2
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.MismatchInfo
		{
			m := m.Low
			nField, err = runtime.WriteUnsignedInt(w, m)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
		{
			m := m.High
			nField, err = runtime.WriteUnsignedInt(w, m)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
done:
	return
}

func (m *AcceptedReplyReplyData_PROG_MISMATCH) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 8
	return
}

type AcceptedReplyReplyData_default struct {
	Stat AcceptStat
}

func (m *AcceptedReplyReplyData_default) isAcceptedReplyReplyData() {}

func (m *AcceptedReplyReplyData_default) GetStat() AcceptStat {
	return m.Stat
}

func (m *AcceptedReplyReplyData_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Stat
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *AcceptedReplyReplyData_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "rejected_reply".

type RejectedReply interface {
	isRejectedReply()
	GetStat() RejectStat
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadRejectedReply(r io.Reader) (m RejectedReply, nTotal int64, err error) {
	var nField int64
	var discriminant RejectStat
	{
		var m RejectStat
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm RejectedReply_RPC_MISMATCH
		{
			m := &mArm
			{
				m := &m.MismatchInfo
				{
					mSave := &m.Low
					var m uint32
					m, nField, err = runtime.ReadUnsignedInt(r)
					nTotal += nField
					if err != nil {
						goto done
					}
					*mSave = m
				}
				{
					mSave := &m.High
					var m uint32
					m, nField, err = runtime.ReadUnsignedInt(r)
					nTotal += nField
					if err != nil {
						goto done
					}
					*mSave = m
				}
			}
		}
		m = &mArm
	case 1:
		var mArm RejectedReply_AUTH_ERROR
		{
			m := &mArm
			{
				mSave := &m.Stat
				var m AuthStat
				*(*int32)(&m), nField, err = runtime.ReadInt(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	default:
		err = fmt.Errorf("discriminant rejected_reply.stat has unknown value %d", discriminant)
		goto done
	}
done:
	return
}

func readRejectedReplyStat(r io.Reader) (m RejectStat, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeRejectedReplyStat(w io.Writer, m RejectStat) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const rejectedReplyStatEncodedSizeBytes = 4

type RejectedReply_RPC_MISMATCH struct {
	MismatchInfo struct {
		Low  uint32
		High uint32
	}
}

func (m *RejectedReply_RPC_MISMATCH) isRejectedReply() {}

func (m *RejectedReply_RPC_MISMATCH) GetStat() RejectStat {
	return 0
}

func (m *RejectedReply_RPC_MISMATCH) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m RejectStat = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.MismatchInfo
		{
			m := m.Low
			nField, err = runtime.WriteUnsignedInt(w, m)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
		{
			m := m.High
			nField, err = runtime.WriteUnsignedInt(w, m)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
done:
	return
}

func (m *RejectedReply_RPC_MISMATCH) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 8
	return
}

type RejectedReply_AUTH_ERROR struct {
	Stat AuthStat
}

func (m *RejectedReply_AUTH_ERROR) isRejectedReply() {}

func (m *RejectedReply_AUTH_ERROR) GetStat() RejectStat {
	return 1
}

func (m *RejectedReply_AUTH_ERROR) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m RejectStat = 1
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Stat
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *RejectedReply_AUTH_ERROR) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	return
}

// Type definition "authsys_parms".

type AuthsysParms struct {
	Stamp       uint32
	Machinename string
	Uid         uint32
	Gid         uint32
	Gids        []uint32
}

func (m *AuthsysParms) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Stamp
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Machinename
		var m string
		m, nField, err = runtime.ReadASCIIString(r, 255)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Uid
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Gid
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Gids
		var m []uint32
		var nElements uint32
		nElements, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if nElements > 16 {
			err = fmt.Errorf("size of %d elements exceeds authsys_parms.gids's maximum of 16 elements", nElements)
			goto done
		}
		for nElements > 0 {
			nElements--
			mParent := &m
			var m uint32
			m, nField, err = runtime.ReadUnsignedInt(r)
			nTotal += nField
			if err != nil {
				goto done
			}
			*mParent = append(*mParent, m)
		}
		*mSave = m
	}
done:
	return
}

func (m *AuthsysParms) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Stamp
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Machinename
		nField, err = runtime.WriteASCIIString(w, 255, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Uid
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Gid
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Gids
		if len(m) > 16 {
			err = fmt.Errorf("size of %d elements exceeds authsys_parms.gids's maximum of 16 elements", len(m))
			goto done
		}
		nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
		nTotal += nField
		if err != nil {
			goto done
		}
		for _, m := range m {
			nField, err = runtime.WriteUnsignedInt(w, m)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
done:
	return
}

func (m *AuthsysParms) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Machinename
		nTotal += (len(m) + 7) &^ 3
	}
	nTotal += 4
	nTotal += 4
	{
		m := m.Gids
		nTotal += 4 + 4*len(m)
	}
	return
}
