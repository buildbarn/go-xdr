// Code generated by go-xdr. DO NOT EDIT.
package darwin_nfs_sys_prot

import (
	"fmt"
	"github.com/buildbarn/go-xdr/pkg/runtime"
	"io"
)

const NFS_ARGSVERSION_XDR = 88

const NFS_MAXPATHLEN = 1024

// Type definition "bitmap".

type Bitmap = []uint32

func ReadBitmap(r io.Reader) (m []uint32, nTotal int64, err error) {
	var nField int64
	var nElements uint32
	nElements, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	if nElements > 4294967295 {
		err = fmt.Errorf("size of %d elements exceeds bitmap's maximum of 4294967295 elements", nElements)
		goto done
	}
	for nElements > 0 {
		nElements--
		mParent := &m
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mParent = append(*mParent, m)
	}
done:
	return
}

func WriteBitmap(w io.Writer, m []uint32) (nTotal int64, err error) {
	var nField int64
	if uint(len(m)) > 4294967295 {
		err = fmt.Errorf("size of %d elements exceeds bitmap's maximum of 4294967295 elements", len(m))
		goto done
	}
	nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
	nTotal += nField
	if err != nil {
		goto done
	}
	for _, m := range m {
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func GetBitmapEncodedSizeBytes(m []uint32) (nTotal int) {
	nTotal += 4 + 4*len(m)
	return
}

// Type definition "component".

type Component = string

func ReadComponent(r io.Reader) (m string, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUTF8String(r, 4294967295)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteComponent(w io.Writer, m string) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUTF8String(w, 4294967295, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetComponentEncodedSizeBytes(m string) (nTotal int) {
	nTotal += (len(m) + 7) &^ 3
	return
}

// Type definition "pathname".

type Pathname = []string

func ReadPathname(r io.Reader) (m []string, nTotal int64, err error) {
	var nField int64
	var nElements uint32
	nElements, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	if nElements > 4294967295 {
		err = fmt.Errorf("size of %d elements exceeds pathname's maximum of 4294967295 elements", nElements)
		goto done
	}
	for nElements > 0 {
		nElements--
		mParent := &m
		var m string
		m, nField, err = runtime.ReadUTF8String(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mParent = append(*mParent, m)
	}
done:
	return
}

func WritePathname(w io.Writer, m []string) (nTotal int64, err error) {
	var nField int64
	if uint(len(m)) > 4294967295 {
		err = fmt.Errorf("size of %d elements exceeds pathname's maximum of 4294967295 elements", len(m))
		goto done
	}
	nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
	nTotal += nField
	if err != nil {
		goto done
	}
	for _, m := range m {
		nField, err = runtime.WriteUTF8String(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func GetPathnameEncodedSizeBytes(m []string) (nTotal int) {
	nTotal += 4
	for _, m := range m {
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "attrlist".

type Attrlist = []byte

func ReadAttrlist(r io.Reader) (m []byte, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadVariableLengthOpaque(r, 4294967295)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteAttrlist(w io.Writer, m []byte) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteVariableLengthOpaque(w, 4294967295, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetAttrlistEncodedSizeBytes(m []byte) (nTotal int) {
	nTotal += (len(m) + 7) &^ 3
	return
}

// Type definition "nfstime32".

type Nfstime32 struct {
	Seconds  int32
	Nseconds uint32
}

func (m *Nfstime32) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Seconds
		var m int32
		m, nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Nseconds
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Nfstime32) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Seconds
		nField, err = runtime.WriteInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Nseconds
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Nfstime32EncodedSizeBytes = 8

// Type definition "nfs_flag_set".

type NfsFlagSet struct {
	Mask  []uint32
	Value []uint32
}

func (m *NfsFlagSet) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Mask
		var m []uint32
		var nElements uint32
		nElements, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if nElements > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds bitmap's maximum of 4294967295 elements", nElements)
			goto done
		}
		for nElements > 0 {
			nElements--
			mParent := &m
			var m uint32
			m, nField, err = runtime.ReadUnsignedInt(r)
			nTotal += nField
			if err != nil {
				goto done
			}
			*mParent = append(*mParent, m)
		}
		*mSave = m
	}
	{
		mSave := &m.Value
		var m []uint32
		var nElements uint32
		nElements, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if nElements > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds bitmap's maximum of 4294967295 elements", nElements)
			goto done
		}
		for nElements > 0 {
			nElements--
			mParent := &m
			var m uint32
			m, nField, err = runtime.ReadUnsignedInt(r)
			nTotal += nField
			if err != nil {
				goto done
			}
			*mParent = append(*mParent, m)
		}
		*mSave = m
	}
done:
	return
}

func (m *NfsFlagSet) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Mask
		if uint(len(m)) > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds bitmap's maximum of 4294967295 elements", len(m))
			goto done
		}
		nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
		nTotal += nField
		if err != nil {
			goto done
		}
		for _, m := range m {
			nField, err = runtime.WriteUnsignedInt(w, m)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
	{
		m := m.Value
		if uint(len(m)) > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds bitmap's maximum of 4294967295 elements", len(m))
			goto done
		}
		nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
		nTotal += nField
		if err != nil {
			goto done
		}
		for _, m := range m {
			nField, err = runtime.WriteUnsignedInt(w, m)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
done:
	return
}

func (m *NfsFlagSet) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.Mask
		nTotal += 4 + 4*len(m)
	}
	{
		m := m.Value
		nTotal += 4 + 4*len(m)
	}
	return
}

// Type definition "nfs_lock_mode".

type NfsLockMode int32

func (mParent *NfsLockMode) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	var m NfsLockMode
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	*mParent = m
done:
	return
}

func (m NfsLockMode) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsLockModeEncodedSizeBytes = 4

const NFS_LOCK_MODE_DISABLED NfsLockMode = 1

const NFS_LOCK_MODE_ENABLED NfsLockMode = 0

const NFS_LOCK_MODE_LOCAL NfsLockMode = 2

var NfsLockMode_name = map[NfsLockMode]string{
	1: "NFS_LOCK_MODE_DISABLED",
	0: "NFS_LOCK_MODE_ENABLED",
	2: "NFS_LOCK_MODE_LOCAL",
}

// Type definition "nfs_fs_server_info".

type NfsFsServerInfo struct {
	NfssiCurrency int32
	NfssiInfo     []byte
}

func (m *NfsFsServerInfo) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.NfssiCurrency
		var m int32
		m, nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.NfssiInfo
		var m []byte
		m, nField, err = runtime.ReadVariableLengthOpaque(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *NfsFsServerInfo) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.NfssiCurrency
		nField, err = runtime.WriteInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.NfssiInfo
		nField, err = runtime.WriteVariableLengthOpaque(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsFsServerInfo) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.NfssiInfo
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "nfs_fs_server".

type NfsFsServer struct {
	NfssName       string
	NfssAddress    []string
	NfssServerInfo []byte
}

func (m *NfsFsServer) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.NfssName
		var m string
		m, nField, err = runtime.ReadUTF8String(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.NfssAddress
		var m []string
		var nElements uint32
		nElements, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if nElements > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds nfs_fs_server.nfss_address's maximum of 4294967295 elements", nElements)
			goto done
		}
		for nElements > 0 {
			nElements--
			mParent := &m
			var m string
			m, nField, err = runtime.ReadUTF8String(r, 4294967295)
			nTotal += nField
			if err != nil {
				goto done
			}
			*mParent = append(*mParent, m)
		}
		*mSave = m
	}
	{
		mSave := &m.NfssServerInfo
		var m []byte
		m, nField, err = runtime.ReadVariableLengthOpaque(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *NfsFsServer) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.NfssName
		nField, err = runtime.WriteUTF8String(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.NfssAddress
		if uint(len(m)) > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds nfs_fs_server.nfss_address's maximum of 4294967295 elements", len(m))
			goto done
		}
		nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
		nTotal += nField
		if err != nil {
			goto done
		}
		for _, m := range m {
			nField, err = runtime.WriteUTF8String(w, 4294967295, m)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
	{
		m := m.NfssServerInfo
		nField, err = runtime.WriteVariableLengthOpaque(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsFsServer) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.NfssName
		nTotal += (len(m) + 7) &^ 3
	}
	{
		m := m.NfssAddress
		nTotal += 4
		for _, m := range m {
			nTotal += (len(m) + 7) &^ 3
		}
	}
	{
		m := m.NfssServerInfo
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "nfs_fs_location".

type NfsFsLocation struct {
	NfslServer   []NfsFsServer
	NfslRootpath []string
}

func (m *NfsFsLocation) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.NfslServer
		var m []NfsFsServer
		var nElements uint32
		nElements, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if nElements > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds nfs_fs_location.nfsl_server's maximum of 4294967295 elements", nElements)
			goto done
		}
		for nElements > 0 {
			nElements--
			m = append(m, NfsFsServer{})
			m := &m[len(m)-1]
			nField, err = m.ReadFrom(r)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
		*mSave = m
	}
	{
		mSave := &m.NfslRootpath
		var m []string
		var nElements uint32
		nElements, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if nElements > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds pathname's maximum of 4294967295 elements", nElements)
			goto done
		}
		for nElements > 0 {
			nElements--
			mParent := &m
			var m string
			m, nField, err = runtime.ReadUTF8String(r, 4294967295)
			nTotal += nField
			if err != nil {
				goto done
			}
			*mParent = append(*mParent, m)
		}
		*mSave = m
	}
done:
	return
}

func (m *NfsFsLocation) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.NfslServer
		if uint(len(m)) > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds nfs_fs_location.nfsl_server's maximum of 4294967295 elements", len(m))
			goto done
		}
		nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
		nTotal += nField
		if err != nil {
			goto done
		}
		for _, m := range m {
			nField, err = m.WriteTo(w)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
	{
		m := m.NfslRootpath
		if uint(len(m)) > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds pathname's maximum of 4294967295 elements", len(m))
			goto done
		}
		nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
		nTotal += nField
		if err != nil {
			goto done
		}
		for _, m := range m {
			nField, err = runtime.WriteUTF8String(w, 4294967295, m)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
done:
	return
}

func (m *NfsFsLocation) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.NfslServer
		nTotal += 4
		for _, m := range m {
			nTotal += m.GetEncodedSizeBytes()
		}
	}
	{
		m := m.NfslRootpath
		nTotal += 4
		for _, m := range m {
			nTotal += (len(m) + 7) &^ 3
		}
	}
	return
}

// Type definition "nfs_fs_locations_info".

type NfsFsLocationsInfo struct {
	NfsliFlags    uint32
	NfsliValidFor int32
	NfsliRoot     []string
}

func (m *NfsFsLocationsInfo) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.NfsliFlags
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.NfsliValidFor
		var m int32
		m, nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.NfsliRoot
		var m []string
		var nElements uint32
		nElements, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if nElements > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds pathname's maximum of 4294967295 elements", nElements)
			goto done
		}
		for nElements > 0 {
			nElements--
			mParent := &m
			var m string
			m, nField, err = runtime.ReadUTF8String(r, 4294967295)
			nTotal += nField
			if err != nil {
				goto done
			}
			*mParent = append(*mParent, m)
		}
		*mSave = m
	}
done:
	return
}

func (m *NfsFsLocationsInfo) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.NfsliFlags
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.NfsliValidFor
		nField, err = runtime.WriteInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.NfsliRoot
		if uint(len(m)) > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds pathname's maximum of 4294967295 elements", len(m))
			goto done
		}
		nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
		nTotal += nField
		if err != nil {
			goto done
		}
		for _, m := range m {
			nField, err = runtime.WriteUTF8String(w, 4294967295, m)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
done:
	return
}

func (m *NfsFsLocationsInfo) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	{
		m := m.NfsliRoot
		nTotal += 4
		for _, m := range m {
			nTotal += (len(m) + 7) &^ 3
		}
	}
	return
}

// Type definition "nfs_fs_locations".

type NfsFsLocations struct {
	NfslLocation      []NfsFsLocation
	NfslLocationsInfo []byte
}

func (m *NfsFsLocations) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.NfslLocation
		var m []NfsFsLocation
		var nElements uint32
		nElements, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if nElements > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds nfs_fs_locations.nfsl_location's maximum of 4294967295 elements", nElements)
			goto done
		}
		for nElements > 0 {
			nElements--
			m = append(m, NfsFsLocation{})
			m := &m[len(m)-1]
			nField, err = m.ReadFrom(r)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
		*mSave = m
	}
	{
		mSave := &m.NfslLocationsInfo
		var m []byte
		m, nField, err = runtime.ReadVariableLengthOpaque(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *NfsFsLocations) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.NfslLocation
		if uint(len(m)) > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds nfs_fs_locations.nfsl_location's maximum of 4294967295 elements", len(m))
			goto done
		}
		nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
		nTotal += nField
		if err != nil {
			goto done
		}
		for _, m := range m {
			nField, err = m.WriteTo(w)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
	{
		m := m.NfslLocationsInfo
		nField, err = runtime.WriteVariableLengthOpaque(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsFsLocations) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.NfslLocation
		nTotal += 4
		for _, m := range m {
			nTotal += m.GetEncodedSizeBytes()
		}
	}
	{
		m := m.NfslLocationsInfo
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "nfs_mattr".

type NfsMattr struct {
	Attrmask []uint32
	AttrVals []byte
}

func (m *NfsMattr) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Attrmask
		var m []uint32
		var nElements uint32
		nElements, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if nElements > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds bitmap's maximum of 4294967295 elements", nElements)
			goto done
		}
		for nElements > 0 {
			nElements--
			mParent := &m
			var m uint32
			m, nField, err = runtime.ReadUnsignedInt(r)
			nTotal += nField
			if err != nil {
				goto done
			}
			*mParent = append(*mParent, m)
		}
		*mSave = m
	}
	{
		mSave := &m.AttrVals
		var m []byte
		m, nField, err = runtime.ReadVariableLengthOpaque(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *NfsMattr) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Attrmask
		if uint(len(m)) > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds bitmap's maximum of 4294967295 elements", len(m))
			goto done
		}
		nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
		nTotal += nField
		if err != nil {
			goto done
		}
		for _, m := range m {
			nField, err = runtime.WriteUnsignedInt(w, m)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
	{
		m := m.AttrVals
		nField, err = runtime.WriteVariableLengthOpaque(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsMattr) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.Attrmask
		nTotal += 4 + 4*len(m)
	}
	{
		m := m.AttrVals
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "nfs_version_range".

type NfsVersionRange struct {
	MinVers uint32
	MaxVers uint32
}

func (m *NfsVersionRange) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.MinVers
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.MaxVers
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *NfsVersionRange) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.MinVers
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.MaxVers
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const NfsVersionRangeEncodedSizeBytes = 8

// Type definition "nfs_supported_kerberos_etypes".

type NfsSupportedKerberosEtypes int32

func (mParent *NfsSupportedKerberosEtypes) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	var m NfsSupportedKerberosEtypes
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	*mParent = m
done:
	return
}

func (m NfsSupportedKerberosEtypes) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsSupportedKerberosEtypesEncodedSizeBytes = 4

const NFS_AES128_CTS_HMAC_SHA1_96 NfsSupportedKerberosEtypes = 17

const NFS_AES256_CTS_HMAC_SHA1_96 NfsSupportedKerberosEtypes = 18

const NFS_DES3_CBC_SHA1_KD NfsSupportedKerberosEtypes = 16

var NfsSupportedKerberosEtypes_name = map[NfsSupportedKerberosEtypes]string{
	17: "NFS_AES128_CTS_HMAC_SHA1_96",
	18: "NFS_AES256_CTS_HMAC_SHA1_96",
	16: "NFS_DES3_CBC_SHA1_KD",
}

const NFS_MAX_ETYPES = 3

// Type definition "nfs_etype".

type NfsEtype struct {
	Count    uint32
	Selected uint32
	Etypes   [3]NfsSupportedKerberosEtypes
}

func (m *NfsEtype) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Count
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Selected
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.Etypes
		mParent := m
		for i := 0; i < len(m); i++ {
			var m NfsSupportedKerberosEtypes
			*(*int32)(&m), nField, err = runtime.ReadInt(r)
			nTotal += nField
			if err != nil {
				goto done
			}
			mParent[i] = m
		}
	}
done:
	return
}

func (m *NfsEtype) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Count
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Selected
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Etypes
		for _, m := range m {
			nField, err = runtime.WriteInt(w, int32(m))
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
done:
	return
}

const NfsEtypeEncodedSizeBytes = 20

// Type definition "nfs_readlink_cache_mode".

type NfsReadlinkCacheMode int32

func (mParent *NfsReadlinkCacheMode) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	var m NfsReadlinkCacheMode
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	*mParent = m
done:
	return
}

func (m NfsReadlinkCacheMode) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsReadlinkCacheModeEncodedSizeBytes = 4

const NFS_READLINK_CACHE_MODE_CACHED NfsReadlinkCacheMode = 0

const NFS_READLINK_CACHE_MODE_FULLY_UNCACHED NfsReadlinkCacheMode = 2

const NFS_READLINK_CACHE_MODE_PARTIALLY_CACHED NfsReadlinkCacheMode = 1

var NfsReadlinkCacheMode_name = map[NfsReadlinkCacheMode]string{
	0: "NFS_READLINK_CACHE_MODE_CACHED",
	2: "NFS_READLINK_CACHE_MODE_FULLY_UNCACHED",
	1: "NFS_READLINK_CACHE_MODE_PARTIALLY_CACHED",
}

const NFS_XDRARGS_VERSION_0 = 0

const NFS_MATTR_BITMAP_LEN = 2

const NFS_MFLAG_BITMAP_LEN = 1

// Type definition "nfs_mattr_flags".

type NfsMattrFlags = NfsFlagSet

func ReadNfsMattrFlags(r io.Reader, m *NfsFlagSet) (nTotal int64, err error) {
	var nField int64
	nField, err = m.ReadFrom(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrFlags(w io.Writer, m *NfsFlagSet) (nTotal int64, err error) {
	var nField int64
	nField, err = m.WriteTo(w)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetNfsMattrFlagsEncodedSizeBytes(m *NfsFlagSet) (nTotal int) {
	nTotal += m.GetEncodedSizeBytes()
	return
}

// Type definition "nfs_mattr_nfs_version".

type NfsMattrNfsVersion = uint32

func ReadNfsMattrNfsVersion(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrNfsVersion(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsMattrNfsVersionEncodedSizeBytes = 4

// Type definition "nfs_mattr_nfs_minor_version".

type NfsMattrNfsMinorVersion = uint32

func ReadNfsMattrNfsMinorVersion(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrNfsMinorVersion(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsMattrNfsMinorVersionEncodedSizeBytes = 4

// Type definition "nfs_mattr_rsize".

type NfsMattrRsize = uint32

func ReadNfsMattrRsize(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrRsize(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsMattrRsizeEncodedSizeBytes = 4

// Type definition "nfs_mattr_wsize".

type NfsMattrWsize = uint32

func ReadNfsMattrWsize(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrWsize(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsMattrWsizeEncodedSizeBytes = 4

// Type definition "nfs_mattr_readdirsize".

type NfsMattrReaddirsize = uint32

func ReadNfsMattrReaddirsize(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrReaddirsize(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsMattrReaddirsizeEncodedSizeBytes = 4

// Type definition "nfs_mattr_readahead".

type NfsMattrReadahead = uint32

func ReadNfsMattrReadahead(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrReadahead(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsMattrReadaheadEncodedSizeBytes = 4

// Type definition "nfs_mattr_acregmin".

type NfsMattrAcregmin = Nfstime32

func ReadNfsMattrAcregmin(r io.Reader, m *Nfstime32) (nTotal int64, err error) {
	var nField int64
	nField, err = m.ReadFrom(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrAcregmin(w io.Writer, m *Nfstime32) (nTotal int64, err error) {
	var nField int64
	nField, err = m.WriteTo(w)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsMattrAcregminEncodedSizeBytes = 8

// Type definition "nfs_mattr_acregmax".

type NfsMattrAcregmax = Nfstime32

func ReadNfsMattrAcregmax(r io.Reader, m *Nfstime32) (nTotal int64, err error) {
	var nField int64
	nField, err = m.ReadFrom(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrAcregmax(w io.Writer, m *Nfstime32) (nTotal int64, err error) {
	var nField int64
	nField, err = m.WriteTo(w)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsMattrAcregmaxEncodedSizeBytes = 8

// Type definition "nfs_mattr_acdirmin".

type NfsMattrAcdirmin = Nfstime32

func ReadNfsMattrAcdirmin(r io.Reader, m *Nfstime32) (nTotal int64, err error) {
	var nField int64
	nField, err = m.ReadFrom(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrAcdirmin(w io.Writer, m *Nfstime32) (nTotal int64, err error) {
	var nField int64
	nField, err = m.WriteTo(w)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsMattrAcdirminEncodedSizeBytes = 8

// Type definition "nfs_mattr_acdirmax".

type NfsMattrAcdirmax = Nfstime32

func ReadNfsMattrAcdirmax(r io.Reader, m *Nfstime32) (nTotal int64, err error) {
	var nField int64
	nField, err = m.ReadFrom(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrAcdirmax(w io.Writer, m *Nfstime32) (nTotal int64, err error) {
	var nField int64
	nField, err = m.WriteTo(w)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsMattrAcdirmaxEncodedSizeBytes = 8

// Type definition "nfs_mattr_acrootdirmin".

type NfsMattrAcrootdirmin = Nfstime32

func ReadNfsMattrAcrootdirmin(r io.Reader, m *Nfstime32) (nTotal int64, err error) {
	var nField int64
	nField, err = m.ReadFrom(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrAcrootdirmin(w io.Writer, m *Nfstime32) (nTotal int64, err error) {
	var nField int64
	nField, err = m.WriteTo(w)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsMattrAcrootdirminEncodedSizeBytes = 8

// Type definition "nfs_mattr_acrootdirmax".

type NfsMattrAcrootdirmax = Nfstime32

func ReadNfsMattrAcrootdirmax(r io.Reader, m *Nfstime32) (nTotal int64, err error) {
	var nField int64
	nField, err = m.ReadFrom(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrAcrootdirmax(w io.Writer, m *Nfstime32) (nTotal int64, err error) {
	var nField int64
	nField, err = m.WriteTo(w)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsMattrAcrootdirmaxEncodedSizeBytes = 8

// Type definition "nfs_mattr_lock_mode".

type NfsMattrLockMode = NfsLockMode

func ReadNfsMattrLockMode(r io.Reader) (m NfsLockMode, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrLockMode(w io.Writer, m NfsLockMode) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsMattrLockModeEncodedSizeBytes = 4

// Type definition "nfs_mattr_security".

type NfsMattrSecurity = []uint32

func ReadNfsMattrSecurity(r io.Reader) (m []uint32, nTotal int64, err error) {
	var nField int64
	var nElements uint32
	nElements, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	if nElements > 4294967295 {
		err = fmt.Errorf("size of %d elements exceeds nfs_mattr_security's maximum of 4294967295 elements", nElements)
		goto done
	}
	for nElements > 0 {
		nElements--
		mParent := &m
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mParent = append(*mParent, m)
	}
done:
	return
}

func WriteNfsMattrSecurity(w io.Writer, m []uint32) (nTotal int64, err error) {
	var nField int64
	if uint(len(m)) > 4294967295 {
		err = fmt.Errorf("size of %d elements exceeds nfs_mattr_security's maximum of 4294967295 elements", len(m))
		goto done
	}
	nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
	nTotal += nField
	if err != nil {
		goto done
	}
	for _, m := range m {
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func GetNfsMattrSecurityEncodedSizeBytes(m []uint32) (nTotal int) {
	nTotal += 4 + 4*len(m)
	return
}

// Type definition "nfs_mattr_maxgrouplist".

type NfsMattrMaxgrouplist = uint32

func ReadNfsMattrMaxgrouplist(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrMaxgrouplist(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsMattrMaxgrouplistEncodedSizeBytes = 4

// Type definition "nfs_mattr_socket_type".

type NfsMattrSocketType = string

func ReadNfsMattrSocketType(r io.Reader) (m string, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadASCIIString(r, 4294967295)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrSocketType(w io.Writer, m string) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteASCIIString(w, 4294967295, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetNfsMattrSocketTypeEncodedSizeBytes(m string) (nTotal int) {
	nTotal += (len(m) + 7) &^ 3
	return
}

// Type definition "nfs_mattr_nfs_port".

type NfsMattrNfsPort = uint32

func ReadNfsMattrNfsPort(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrNfsPort(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsMattrNfsPortEncodedSizeBytes = 4

// Type definition "nfs_mattr_mount_port".

type NfsMattrMountPort = uint32

func ReadNfsMattrMountPort(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrMountPort(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsMattrMountPortEncodedSizeBytes = 4

// Type definition "nfs_mattr_request_timeout".

type NfsMattrRequestTimeout = Nfstime32

func ReadNfsMattrRequestTimeout(r io.Reader, m *Nfstime32) (nTotal int64, err error) {
	var nField int64
	nField, err = m.ReadFrom(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrRequestTimeout(w io.Writer, m *Nfstime32) (nTotal int64, err error) {
	var nField int64
	nField, err = m.WriteTo(w)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsMattrRequestTimeoutEncodedSizeBytes = 8

// Type definition "nfs_mattr_soft_retry_count".

type NfsMattrSoftRetryCount = uint32

func ReadNfsMattrSoftRetryCount(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrSoftRetryCount(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsMattrSoftRetryCountEncodedSizeBytes = 4

// Type definition "nfs_mattr_dead_timeout".

type NfsMattrDeadTimeout = Nfstime32

func ReadNfsMattrDeadTimeout(r io.Reader, m *Nfstime32) (nTotal int64, err error) {
	var nField int64
	nField, err = m.ReadFrom(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrDeadTimeout(w io.Writer, m *Nfstime32) (nTotal int64, err error) {
	var nField int64
	nField, err = m.WriteTo(w)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsMattrDeadTimeoutEncodedSizeBytes = 8

// Type definition "nfs_mattr_fh".

type NfsMattrFh = []byte

func ReadNfsMattrFh(r io.Reader) (m []byte, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadVariableLengthOpaque(r, 128)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrFh(w io.Writer, m []byte) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteVariableLengthOpaque(w, 128, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetNfsMattrFhEncodedSizeBytes(m []byte) (nTotal int) {
	nTotal += (len(m) + 7) &^ 3
	return
}

// Type definition "nfs_mattr_fs_locations".

type NfsMattrFsLocations = NfsFsLocations

func ReadNfsMattrFsLocations(r io.Reader, m *NfsFsLocations) (nTotal int64, err error) {
	var nField int64
	nField, err = m.ReadFrom(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrFsLocations(w io.Writer, m *NfsFsLocations) (nTotal int64, err error) {
	var nField int64
	nField, err = m.WriteTo(w)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetNfsMattrFsLocationsEncodedSizeBytes(m *NfsFsLocations) (nTotal int) {
	nTotal += m.GetEncodedSizeBytes()
	return
}

// Type definition "nfs_mattr_mntflags".

type NfsMattrMntflags = uint32

func ReadNfsMattrMntflags(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrMntflags(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsMattrMntflagsEncodedSizeBytes = 4

// Type definition "nfs_mattr_mntfrom".

type NfsMattrMntfrom = string

func ReadNfsMattrMntfrom(r io.Reader) (m string, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadASCIIString(r, 1024)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrMntfrom(w io.Writer, m string) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteASCIIString(w, 1024, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetNfsMattrMntfromEncodedSizeBytes(m string) (nTotal int) {
	nTotal += (len(m) + 7) &^ 3
	return
}

// Type definition "nfs_mattr_realm".

type NfsMattrRealm = string

func ReadNfsMattrRealm(r io.Reader) (m string, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadASCIIString(r, 1024)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrRealm(w io.Writer, m string) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteASCIIString(w, 1024, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetNfsMattrRealmEncodedSizeBytes(m string) (nTotal int) {
	nTotal += (len(m) + 7) &^ 3
	return
}

// Type definition "nfs_mattr_principal".

type NfsMattrPrincipal = string

func ReadNfsMattrPrincipal(r io.Reader) (m string, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadASCIIString(r, 1024)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrPrincipal(w io.Writer, m string) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteASCIIString(w, 1024, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetNfsMattrPrincipalEncodedSizeBytes(m string) (nTotal int) {
	nTotal += (len(m) + 7) &^ 3
	return
}

// Type definition "nfs_mattr_svcpinc".

type NfsMattrSvcpinc = string

func ReadNfsMattrSvcpinc(r io.Reader) (m string, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadASCIIString(r, 1024)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrSvcpinc(w io.Writer, m string) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteASCIIString(w, 1024, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetNfsMattrSvcpincEncodedSizeBytes(m string) (nTotal int) {
	nTotal += (len(m) + 7) &^ 3
	return
}

// Type definition "nfs_mattr_version_range".

type NfsMattrVersionRange = NfsVersionRange

func ReadNfsMattrVersionRange(r io.Reader, m *NfsVersionRange) (nTotal int64, err error) {
	var nField int64
	nField, err = m.ReadFrom(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrVersionRange(w io.Writer, m *NfsVersionRange) (nTotal int64, err error) {
	var nField int64
	nField, err = m.WriteTo(w)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsMattrVersionRangeEncodedSizeBytes = 8

// Type definition "nfs_mattr_kerb_etype".

type NfsMattrKerbEtype = NfsEtype

func ReadNfsMattrKerbEtype(r io.Reader, m *NfsEtype) (nTotal int64, err error) {
	var nField int64
	nField, err = m.ReadFrom(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrKerbEtype(w io.Writer, m *NfsEtype) (nTotal int64, err error) {
	var nField int64
	nField, err = m.WriteTo(w)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsMattrKerbEtypeEncodedSizeBytes = 20

// Type definition "nfs_mattr_local_nfs_port".

type NfsMattrLocalNfsPort = string

func ReadNfsMattrLocalNfsPort(r io.Reader) (m string, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadASCIIString(r, 1024)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrLocalNfsPort(w io.Writer, m string) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteASCIIString(w, 1024, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetNfsMattrLocalNfsPortEncodedSizeBytes(m string) (nTotal int) {
	nTotal += (len(m) + 7) &^ 3
	return
}

// Type definition "nfs_mattr_local_mount_port".

type NfsMattrLocalMountPort = string

func ReadNfsMattrLocalMountPort(r io.Reader) (m string, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadASCIIString(r, 1024)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrLocalMountPort(w io.Writer, m string) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteASCIIString(w, 1024, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetNfsMattrLocalMountPortEncodedSizeBytes(m string) (nTotal int) {
	nTotal += (len(m) + 7) &^ 3
	return
}

// Type definition "nfs_mattr_set_mount_owner".

type NfsMattrSetMountOwner = uint32

func ReadNfsMattrSetMountOwner(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrSetMountOwner(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsMattrSetMountOwnerEncodedSizeBytes = 4

// Type definition "nfs_mattr_readlink_nocache".

type NfsMattrReadlinkNocache = NfsReadlinkCacheMode

func ReadNfsMattrReadlinkNocache(r io.Reader) (m NfsReadlinkCacheMode, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMattrReadlinkNocache(w io.Writer, m NfsReadlinkCacheMode) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsMattrReadlinkNocacheEncodedSizeBytes = 4

const NFS_MATTR_FLAGS = 0

const NFS_MATTR_NFS_VERSION = 1

const NFS_MATTR_NFS_MINOR_VERSION = 2

const NFS_MATTR_READ_SIZE = 3

const NFS_MATTR_WRITE_SIZE = 4

const NFS_MATTR_READDIR_SIZE = 5

const NFS_MATTR_READAHEAD = 6

const NFS_MATTR_ATTRCACHE_REG_MIN = 7

const NFS_MATTR_ATTRCACHE_REG_MAX = 8

const NFS_MATTR_ATTRCACHE_DIR_MIN = 9

const NFS_MATTR_ATTRCACHE_DIR_MAX = 10

const NFS_MATTR_LOCK_MODE = 11

const NFS_MATTR_SECURITY = 12

const NFS_MATTR_MAX_GROUP_LIST = 13

const NFS_MATTR_SOCKET_TYPE = 14

const NFS_MATTR_NFS_PORT = 15

const NFS_MATTR_MOUNT_PORT = 16

const NFS_MATTR_REQUEST_TIMEOUT = 17

const NFS_MATTR_SOFT_RETRY_COUNT = 18

const NFS_MATTR_DEAD_TIMEOUT = 19

const NFS_MATTR_FH = 20

const NFS_MATTR_FS_LOCATIONS = 21

const NFS_MATTR_MNTFLAGS = 22

const NFS_MATTR_MNTFROM = 23

const NFS_MATTR_REALM = 24

const NFS_MATTR_PRINCIPAL = 25

const NFS_MATTR_SVCPRINCIPAL = 26

const NFS_MATTR_NFS_VERSION_RANGE = 27

const NFS_MATTR_KERB_ETYPE = 28

const NFS_MATTR_LOCAL_NFS_PORT = 29

const NFS_MATTR_LOCAL_MOUNT_PORT = 30

const NFS_MATTR_SET_MOUNT_OWNER = 31

const NFS_MATTR_READLINK_NOCACHE = 32

const NFS_MATTR_ATTRCACHE_ROOTDIR_MIN = 33

const NFS_MATTR_ATTRCACHE_ROOTDIR_MAX = 34

const NFS_MFLAG_SOFT = 0

const NFS_MFLAG_INTR = 1

const NFS_MFLAG_RESVPORT = 2

const NFS_MFLAG_NOCONNECT = 3

const NFS_MFLAG_DUMBTIMER = 4

const NFS_MFLAG_CALLUMNT = 5

const NFS_MFLAG_RDIRPLUS = 6

const NFS_MFLAG_NONEGNAMECACHE = 7

const NFS_MFLAG_MUTEJUKEBOX = 8

const NFS_MFLAG_EPHEMERAL = 9

const NFS_MFLAG_NOCALLBACK = 10

const NFS_MFLAG_NAMEDATTR = 11

const NFS_MFLAG_NOACL = 12

const NFS_MFLAG_ACLONLY = 13

const NFS_MFLAG_NFC = 14

const NFS_MFLAG_NOQUOTA = 15

const NFS_MFLAG_MNTUDP = 16

const NFS_MFLAG_MNTQUICK = 17

// Type definition "nfs_mount_args".

type NfsMountArgs struct {
	ArgsVersion    uint32
	ArgsLength     uint32
	XdrArgsVersion uint32
	NfsMountAttrs  NfsMattr
}

func (m *NfsMountArgs) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.ArgsVersion
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.ArgsLength
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.XdrArgsVersion
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.NfsMountAttrs
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsMountArgs) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.ArgsVersion
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.ArgsLength
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.XdrArgsVersion
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.NfsMountAttrs
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsMountArgs) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	nTotal += 4
	{
		m := &m.NfsMountAttrs
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "nfs_miattr_flags".

type NfsMiattrFlags = NfsFlagSet

func ReadNfsMiattrFlags(r io.Reader, m *NfsFlagSet) (nTotal int64, err error) {
	var nField int64
	nField, err = m.ReadFrom(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsMiattrFlags(w io.Writer, m *NfsFlagSet) (nTotal int64, err error) {
	var nField int64
	nField, err = m.WriteTo(w)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetNfsMiattrFlagsEncodedSizeBytes(m *NfsFlagSet) (nTotal int) {
	nTotal += m.GetEncodedSizeBytes()
	return
}

// Type definition "nfs_miattr_cur_loc_index".

type NfsMiattrCurLocIndex = [4]uint32

func ReadNfsMiattrCurLocIndex(r io.Reader, m *[4]uint32) (nTotal int64, err error) {
	var nField int64
	mParent := m
	for i := 0; i < len(m); i++ {
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		mParent[i] = m
	}
done:
	return
}

func WriteNfsMiattrCurLocIndex(w io.Writer, m *[4]uint32) (nTotal int64, err error) {
	var nField int64
	for _, m := range m {
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const NfsMiattrCurLocIndexEncodedSizeBytes = 16

const NFS_MIATTR_FLAGS = 0

const NFS_MIATTR_ORIG_ARGS = 1

const NFS_MIATTR_CUR_ARGS = 2

const NFS_MIATTR_CUR_LOC_INDEX = 3

const NFS_MIFLAG_DEAD = 0

const NFS_MIFLAG_NOTRESP = 1

const NFS_MIFLAG_RECOVERY = 2

// Type definition "nfs_miattr".

type NfsMiattr struct {
	Attrmask []uint32
	AttrVals []byte
}

func (m *NfsMiattr) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Attrmask
		var m []uint32
		var nElements uint32
		nElements, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if nElements > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds bitmap's maximum of 4294967295 elements", nElements)
			goto done
		}
		for nElements > 0 {
			nElements--
			mParent := &m
			var m uint32
			m, nField, err = runtime.ReadUnsignedInt(r)
			nTotal += nField
			if err != nil {
				goto done
			}
			*mParent = append(*mParent, m)
		}
		*mSave = m
	}
	{
		mSave := &m.AttrVals
		var m []byte
		m, nField, err = runtime.ReadVariableLengthOpaque(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *NfsMiattr) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Attrmask
		if uint(len(m)) > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds bitmap's maximum of 4294967295 elements", len(m))
			goto done
		}
		nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
		nTotal += nField
		if err != nil {
			goto done
		}
		for _, m := range m {
			nField, err = runtime.WriteUnsignedInt(w, m)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
	{
		m := m.AttrVals
		nField, err = runtime.WriteVariableLengthOpaque(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsMiattr) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.Attrmask
		nTotal += 4 + 4*len(m)
	}
	{
		m := m.AttrVals
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

const NFS_MOUNT_INFO_VERSION = 0

const NFS_MIATTR_BITMAP_LEN = 1

const NFS_MIFLAG_BITMAP_LEN = 1

// Type definition "nfs_mount_info".

type NfsMountInfo struct {
	InfoVersion       uint32
	InfoLength        uint32
	NfsMountinfoAttrs NfsMiattr
}

func (m *NfsMountInfo) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.InfoVersion
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.InfoLength
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.NfsMountinfoAttrs
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsMountInfo) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.InfoVersion
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.InfoLength
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.NfsMountinfoAttrs
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsMountInfo) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	{
		m := &m.NfsMountinfoAttrs
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}
