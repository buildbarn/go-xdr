// Code generated by go-xdr. DO NOT EDIT.
package nfsv3

import (
	"context"
	"fmt"
	"io"

	"github.com/buildbarn/go-xdr/pkg/protocols/rpcv2"
	"github.com/buildbarn/go-xdr/pkg/runtime"
)

const NFS3_FHSIZE = 64

const NFS3_COOKIEVERFSIZE = 8

const NFS3_CREATEVERFSIZE = 8

const NFS3_WRITEVERFSIZE = 8

// Type definition "uint64".

type Uint64 = uint64

func ReadUint64(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteUint64(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Uint64EncodedSizeBytes = 8

// Type definition "int64".

type Int64 = int64

func ReadInt64(r io.Reader) (m, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteInt64(w io.Writer, m int64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Int64EncodedSizeBytes = 8

// Type definition "uint32".

type Uint32 = uint32

func ReadUint32(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteUint32(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Uint32EncodedSizeBytes = 4

// Type definition "int32".

type Int32 = int32

func ReadInt32(r io.Reader) (m int32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteInt32(w io.Writer, m int32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Int32EncodedSizeBytes = 4

// Type definition "filename3".

type Filename3 = string

func ReadFilename3(r io.Reader) (m string, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadASCIIString(r, 4294967295)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFilename3(w io.Writer, m string) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteASCIIString(w, 4294967295, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetFilename3EncodedSizeBytes(m string) (nTotal int) {
	nTotal += (len(m) + 7) &^ 3
	return
}

// Type definition "nfspath3".

type Nfspath3 = string

func ReadNfspath3(r io.Reader) (m string, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadASCIIString(r, 4294967295)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfspath3(w io.Writer, m string) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteASCIIString(w, 4294967295, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetNfspath3EncodedSizeBytes(m string) (nTotal int) {
	nTotal += (len(m) + 7) &^ 3
	return
}

// Type definition "fileid3".

type Fileid3 = uint64

func ReadFileid3(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFileid3(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fileid3EncodedSizeBytes = 8

// Type definition "cookie3".

type Cookie3 = uint64

func ReadCookie3(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteCookie3(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Cookie3EncodedSizeBytes = 8

// Type definition "cookieverf3".

type Cookieverf3 = [8]byte

func ReadCookieverf3(r io.Reader, m *[8]byte) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.ReadFixedLengthOpaque(r, m[:])
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteCookieverf3(w io.Writer, m *[8]byte) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteFixedLengthOpaque(w, m[:])
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Cookieverf3EncodedSizeBytes = 8

// Type definition "createverf3".

type Createverf3 = [8]byte

func ReadCreateverf3(r io.Reader, m *[8]byte) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.ReadFixedLengthOpaque(r, m[:])
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteCreateverf3(w io.Writer, m *[8]byte) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteFixedLengthOpaque(w, m[:])
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Createverf3EncodedSizeBytes = 8

// Type definition "writeverf3".

type Writeverf3 = [8]byte

func ReadWriteverf3(r io.Reader, m *[8]byte) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.ReadFixedLengthOpaque(r, m[:])
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteWriteverf3(w io.Writer, m *[8]byte) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteFixedLengthOpaque(w, m[:])
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Writeverf3EncodedSizeBytes = 8

// Type definition "uid3".

type Uid3 = uint32

func ReadUid3(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteUid3(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Uid3EncodedSizeBytes = 4

// Type definition "gid3".

type Gid3 = uint32

func ReadGid3(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteGid3(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Gid3EncodedSizeBytes = 4

// Type definition "size3".

type Size3 = uint64

func ReadSize3(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteSize3(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Size3EncodedSizeBytes = 8

// Type definition "offset3".

type Offset3 = uint64

func ReadOffset3(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteOffset3(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Offset3EncodedSizeBytes = 8

// Type definition "mode3".

type Mode3 = uint32

func ReadMode3(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteMode3(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Mode3EncodedSizeBytes = 4

// Type definition "count3".

type Count3 = uint32

func ReadCount3(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteCount3(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Count3EncodedSizeBytes = 4

// Type definition "nfsstat3".

type Nfsstat3 int32

func (mParent *Nfsstat3) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	var m Nfsstat3
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	*mParent = m
done:
	return
}

func (m Nfsstat3) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Nfsstat3EncodedSizeBytes = 4

const NFS3ERR_ACCES Nfsstat3 = 13

const NFS3ERR_BADHANDLE Nfsstat3 = 10001

const NFS3ERR_BADTYPE Nfsstat3 = 10007

const NFS3ERR_BAD_COOKIE Nfsstat3 = 10003

const NFS3ERR_DQUOT Nfsstat3 = 69

const NFS3ERR_EXIST Nfsstat3 = 17

const NFS3ERR_FBIG Nfsstat3 = 27

const NFS3ERR_INVAL Nfsstat3 = 22

const NFS3ERR_IO Nfsstat3 = 5

const NFS3ERR_ISDIR Nfsstat3 = 21

const NFS3ERR_JUKEBOX Nfsstat3 = 10008

const NFS3ERR_MLINK Nfsstat3 = 31

const NFS3ERR_NAMETOOLONG Nfsstat3 = 63

const NFS3ERR_NODEV Nfsstat3 = 19

const NFS3ERR_NOENT Nfsstat3 = 2

const NFS3ERR_NOSPC Nfsstat3 = 28

const NFS3ERR_NOTDIR Nfsstat3 = 20

const NFS3ERR_NOTEMPTY Nfsstat3 = 66

const NFS3ERR_NOTSUPP Nfsstat3 = 10004

const NFS3ERR_NOT_SYNC Nfsstat3 = 10002

const NFS3ERR_NXIO Nfsstat3 = 6

const NFS3ERR_PERM Nfsstat3 = 1

const NFS3ERR_REMOTE Nfsstat3 = 71

const NFS3ERR_ROFS Nfsstat3 = 30

const NFS3ERR_SERVERFAULT Nfsstat3 = 10006

const NFS3ERR_STALE Nfsstat3 = 70

const NFS3ERR_TOOSMALL Nfsstat3 = 10005

const NFS3ERR_XDEV Nfsstat3 = 18

const NFS3_OK Nfsstat3 = 0

var Nfsstat3_name = map[Nfsstat3]string{
	13:    "NFS3ERR_ACCES",
	10001: "NFS3ERR_BADHANDLE",
	10007: "NFS3ERR_BADTYPE",
	10003: "NFS3ERR_BAD_COOKIE",
	69:    "NFS3ERR_DQUOT",
	17:    "NFS3ERR_EXIST",
	27:    "NFS3ERR_FBIG",
	22:    "NFS3ERR_INVAL",
	5:     "NFS3ERR_IO",
	21:    "NFS3ERR_ISDIR",
	10008: "NFS3ERR_JUKEBOX",
	31:    "NFS3ERR_MLINK",
	63:    "NFS3ERR_NAMETOOLONG",
	19:    "NFS3ERR_NODEV",
	2:     "NFS3ERR_NOENT",
	28:    "NFS3ERR_NOSPC",
	20:    "NFS3ERR_NOTDIR",
	66:    "NFS3ERR_NOTEMPTY",
	10004: "NFS3ERR_NOTSUPP",
	10002: "NFS3ERR_NOT_SYNC",
	6:     "NFS3ERR_NXIO",
	1:     "NFS3ERR_PERM",
	71:    "NFS3ERR_REMOTE",
	30:    "NFS3ERR_ROFS",
	10006: "NFS3ERR_SERVERFAULT",
	70:    "NFS3ERR_STALE",
	10005: "NFS3ERR_TOOSMALL",
	18:    "NFS3ERR_XDEV",
	0:     "NFS3_OK",
}

// Type definition "ftype3".

type Ftype3 int32

func (mParent *Ftype3) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	var m Ftype3
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	*mParent = m
done:
	return
}

func (m Ftype3) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Ftype3EncodedSizeBytes = 4

const NF3BLK Ftype3 = 3

const NF3CHR Ftype3 = 4

const NF3DIR Ftype3 = 2

const NF3FIFO Ftype3 = 7

const NF3LNK Ftype3 = 5

const NF3REG Ftype3 = 1

const NF3SOCK Ftype3 = 6

var Ftype3_name = map[Ftype3]string{
	3: "NF3BLK",
	4: "NF3CHR",
	2: "NF3DIR",
	7: "NF3FIFO",
	5: "NF3LNK",
	1: "NF3REG",
	6: "NF3SOCK",
}

// Type definition "specdata3".

type Specdata3 struct {
	Specdata1 uint32
	Specdata2 uint32
}

func (m *Specdata3) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Specdata1
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Specdata2
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Specdata3) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Specdata1
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Specdata2
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Specdata3EncodedSizeBytes = 8

// Type definition "nfs_fh3".

type NfsFh3 struct {
	Data []byte
}

func (m *NfsFh3) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Data
		var m []byte
		m, nField, err = runtime.ReadVariableLengthOpaque(r, 64)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *NfsFh3) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Data
		nField, err = runtime.WriteVariableLengthOpaque(w, 64, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsFh3) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.Data
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "nfstime3".

type Nfstime3 struct {
	Seconds  uint32
	Nseconds uint32
}

func (m *Nfstime3) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Seconds
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Nseconds
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Nfstime3) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Seconds
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Nseconds
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Nfstime3EncodedSizeBytes = 8

// Type definition "fattr3".

type Fattr3 struct {
	Type   Ftype3
	Mode   uint32
	Nlink  uint32
	Uid    uint32
	Gid    uint32
	Size   uint64
	Used   uint64
	Rdev   Specdata3
	Fsid   uint64
	Fileid uint64
	Atime  Nfstime3
	Mtime  Nfstime3
	Ctime  Nfstime3
}

func (m *Fattr3) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Type
		var m Ftype3
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Mode
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Nlink
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Uid
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Gid
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Size
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Used
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.Rdev
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.Fsid
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Fileid
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.Atime
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Mtime
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Ctime
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Fattr3) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Type
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Mode
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Nlink
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Uid
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Gid
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Size
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Used
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Rdev
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Fsid
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Fileid
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Atime
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Mtime
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Ctime
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Fattr3EncodedSizeBytes = 84

// Type definition "post_op_attr".

type PostOpAttr interface {
	isPostOpAttr()
	GetAttributesFollow() bool
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadPostOpAttr(r io.Reader) (m PostOpAttr, nTotal int64, err error) {
	var nField int64
	var discriminant bool
	{
		var m bool
		m, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case true:
		var mArm PostOpAttr_TRUE
		{
			m := &mArm
			{
				m := &m.Attributes
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case false:
		var mArm PostOpAttr_FALSE
		{
			m := &mArm
			_ = m
		}
		m = &mArm
	default:
		err = fmt.Errorf("discriminant post_op_attr.attributes_follow has unknown value %d", discriminant)
		goto done
	}
done:
	return
}

func readPostOpAttrAttributesFollow(r io.Reader) (m bool, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadBool(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writePostOpAttrAttributesFollow(w io.Writer, m bool) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteBool(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const postOpAttrAttributesFollowEncodedSizeBytes = 4

type PostOpAttr_TRUE struct {
	Attributes Fattr3
}

func (m *PostOpAttr_TRUE) isPostOpAttr() {}

func (m *PostOpAttr_TRUE) GetAttributesFollow() bool {
	return true
}

func (m *PostOpAttr_TRUE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m bool = true
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Attributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *PostOpAttr_TRUE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 84
	return
}

type PostOpAttr_FALSE struct{}

func (m *PostOpAttr_FALSE) isPostOpAttr() {}

func (m *PostOpAttr_FALSE) GetAttributesFollow() bool {
	return false
}

func (m *PostOpAttr_FALSE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m bool = false
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *PostOpAttr_FALSE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "wcc_attr".

type WccAttr struct {
	Size  uint64
	Mtime Nfstime3
	Ctime Nfstime3
}

func (m *WccAttr) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Size
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.Mtime
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Ctime
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *WccAttr) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Size
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Mtime
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Ctime
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const WccAttrEncodedSizeBytes = 24

// Type definition "pre_op_attr".

type PreOpAttr interface {
	isPreOpAttr()
	GetAttributesFollow() bool
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadPreOpAttr(r io.Reader) (m PreOpAttr, nTotal int64, err error) {
	var nField int64
	var discriminant bool
	{
		var m bool
		m, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case true:
		var mArm PreOpAttr_TRUE
		{
			m := &mArm
			{
				m := &m.Attributes
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case false:
		var mArm PreOpAttr_FALSE
		{
			m := &mArm
			_ = m
		}
		m = &mArm
	default:
		err = fmt.Errorf("discriminant pre_op_attr.attributes_follow has unknown value %d", discriminant)
		goto done
	}
done:
	return
}

func readPreOpAttrAttributesFollow(r io.Reader) (m bool, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadBool(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writePreOpAttrAttributesFollow(w io.Writer, m bool) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteBool(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const preOpAttrAttributesFollowEncodedSizeBytes = 4

type PreOpAttr_TRUE struct {
	Attributes WccAttr
}

func (m *PreOpAttr_TRUE) isPreOpAttr() {}

func (m *PreOpAttr_TRUE) GetAttributesFollow() bool {
	return true
}

func (m *PreOpAttr_TRUE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m bool = true
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Attributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *PreOpAttr_TRUE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 24
	return
}

type PreOpAttr_FALSE struct{}

func (m *PreOpAttr_FALSE) isPreOpAttr() {}

func (m *PreOpAttr_FALSE) GetAttributesFollow() bool {
	return false
}

func (m *PreOpAttr_FALSE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m bool = false
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *PreOpAttr_FALSE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "wcc_data".

type WccData struct {
	Before PreOpAttr
	After  PostOpAttr
}

func (m *WccData) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Before
		var m PreOpAttr
		m, nField, err = ReadPreOpAttr(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.After
		var m PostOpAttr
		m, nField, err = ReadPostOpAttr(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *WccData) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Before
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.After
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *WccData) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.Before
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := m.After
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "post_op_fh3".

type PostOpFh3 interface {
	isPostOpFh3()
	GetHandleFollows() bool
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadPostOpFh3(r io.Reader) (m PostOpFh3, nTotal int64, err error) {
	var nField int64
	var discriminant bool
	{
		var m bool
		m, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case true:
		var mArm PostOpFh3_TRUE
		{
			m := &mArm
			{
				m := &m.Handle
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case false:
		var mArm PostOpFh3_FALSE
		{
			m := &mArm
			_ = m
		}
		m = &mArm
	default:
		err = fmt.Errorf("discriminant post_op_fh3.handle_follows has unknown value %d", discriminant)
		goto done
	}
done:
	return
}

func readPostOpFh3HandleFollows(r io.Reader) (m bool, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadBool(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writePostOpFh3HandleFollows(w io.Writer, m bool) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteBool(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const postOpFh3HandleFollowsEncodedSizeBytes = 4

type PostOpFh3_TRUE struct {
	Handle NfsFh3
}

func (m *PostOpFh3_TRUE) isPostOpFh3() {}

func (m *PostOpFh3_TRUE) GetHandleFollows() bool {
	return true
}

func (m *PostOpFh3_TRUE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m bool = true
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Handle
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *PostOpFh3_TRUE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Handle
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type PostOpFh3_FALSE struct{}

func (m *PostOpFh3_FALSE) isPostOpFh3() {}

func (m *PostOpFh3_FALSE) GetHandleFollows() bool {
	return false
}

func (m *PostOpFh3_FALSE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m bool = false
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *PostOpFh3_FALSE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "time_how".

type TimeHow int32

func (mParent *TimeHow) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	var m TimeHow
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	*mParent = m
done:
	return
}

func (m TimeHow) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const TimeHowEncodedSizeBytes = 4

const DONT_CHANGE TimeHow = 0

const SET_TO_CLIENT_TIME TimeHow = 2

const SET_TO_SERVER_TIME TimeHow = 1

var TimeHow_name = map[TimeHow]string{
	0: "DONT_CHANGE",
	2: "SET_TO_CLIENT_TIME",
	1: "SET_TO_SERVER_TIME",
}

// Type definition "set_mode3".

type SetMode3 interface {
	isSetMode3()
	GetSetIt() bool
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadSetMode3(r io.Reader) (m SetMode3, nTotal int64, err error) {
	var nField int64
	var discriminant bool
	{
		var m bool
		m, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case true:
		var mArm SetMode3_TRUE
		{
			m := &mArm
			{
				mSave := &m.Mode
				var m uint32
				m, nField, err = runtime.ReadUnsignedInt(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	default:
		var mArm SetMode3_default
		{
			m := &mArm
			m.SetIt = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readSetMode3SetIt(r io.Reader) (m bool, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadBool(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeSetMode3SetIt(w io.Writer, m bool) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteBool(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const setMode3SetItEncodedSizeBytes = 4

type SetMode3_TRUE struct {
	Mode uint32
}

func (m *SetMode3_TRUE) isSetMode3() {}

func (m *SetMode3_TRUE) GetSetIt() bool {
	return true
}

func (m *SetMode3_TRUE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m bool = true
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Mode
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *SetMode3_TRUE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	return
}

type SetMode3_default struct {
	SetIt bool
}

func (m *SetMode3_default) isSetMode3() {}

func (m *SetMode3_default) GetSetIt() bool {
	return m.SetIt
}

func (m *SetMode3_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.SetIt
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *SetMode3_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "set_uid3".

type SetUid3 interface {
	isSetUid3()
	GetSetIt() bool
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadSetUid3(r io.Reader) (m SetUid3, nTotal int64, err error) {
	var nField int64
	var discriminant bool
	{
		var m bool
		m, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case true:
		var mArm SetUid3_TRUE
		{
			m := &mArm
			{
				mSave := &m.Uid
				var m uint32
				m, nField, err = runtime.ReadUnsignedInt(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	default:
		var mArm SetUid3_default
		{
			m := &mArm
			m.SetIt = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readSetUid3SetIt(r io.Reader) (m bool, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadBool(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeSetUid3SetIt(w io.Writer, m bool) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteBool(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const setUid3SetItEncodedSizeBytes = 4

type SetUid3_TRUE struct {
	Uid uint32
}

func (m *SetUid3_TRUE) isSetUid3() {}

func (m *SetUid3_TRUE) GetSetIt() bool {
	return true
}

func (m *SetUid3_TRUE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m bool = true
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Uid
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *SetUid3_TRUE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	return
}

type SetUid3_default struct {
	SetIt bool
}

func (m *SetUid3_default) isSetUid3() {}

func (m *SetUid3_default) GetSetIt() bool {
	return m.SetIt
}

func (m *SetUid3_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.SetIt
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *SetUid3_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "set_gid3".

type SetGid3 interface {
	isSetGid3()
	GetSetIt() bool
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadSetGid3(r io.Reader) (m SetGid3, nTotal int64, err error) {
	var nField int64
	var discriminant bool
	{
		var m bool
		m, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case true:
		var mArm SetGid3_TRUE
		{
			m := &mArm
			{
				mSave := &m.Gid
				var m uint32
				m, nField, err = runtime.ReadUnsignedInt(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	default:
		var mArm SetGid3_default
		{
			m := &mArm
			m.SetIt = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readSetGid3SetIt(r io.Reader) (m bool, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadBool(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeSetGid3SetIt(w io.Writer, m bool) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteBool(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const setGid3SetItEncodedSizeBytes = 4

type SetGid3_TRUE struct {
	Gid uint32
}

func (m *SetGid3_TRUE) isSetGid3() {}

func (m *SetGid3_TRUE) GetSetIt() bool {
	return true
}

func (m *SetGid3_TRUE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m bool = true
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Gid
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *SetGid3_TRUE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	return
}

type SetGid3_default struct {
	SetIt bool
}

func (m *SetGid3_default) isSetGid3() {}

func (m *SetGid3_default) GetSetIt() bool {
	return m.SetIt
}

func (m *SetGid3_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.SetIt
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *SetGid3_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "set_size3".

type SetSize3 interface {
	isSetSize3()
	GetSetIt() bool
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadSetSize3(r io.Reader) (m SetSize3, nTotal int64, err error) {
	var nField int64
	var discriminant bool
	{
		var m bool
		m, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case true:
		var mArm SetSize3_TRUE
		{
			m := &mArm
			{
				mSave := &m.Size
				var m uint64
				m, nField, err = runtime.ReadUnsignedHyper(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	default:
		var mArm SetSize3_default
		{
			m := &mArm
			m.SetIt = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readSetSize3SetIt(r io.Reader) (m bool, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadBool(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeSetSize3SetIt(w io.Writer, m bool) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteBool(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const setSize3SetItEncodedSizeBytes = 4

type SetSize3_TRUE struct {
	Size uint64
}

func (m *SetSize3_TRUE) isSetSize3() {}

func (m *SetSize3_TRUE) GetSetIt() bool {
	return true
}

func (m *SetSize3_TRUE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m bool = true
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Size
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *SetSize3_TRUE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 8
	return
}

type SetSize3_default struct {
	SetIt bool
}

func (m *SetSize3_default) isSetSize3() {}

func (m *SetSize3_default) GetSetIt() bool {
	return m.SetIt
}

func (m *SetSize3_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.SetIt
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *SetSize3_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "set_atime".

type SetAtime interface {
	isSetAtime()
	GetSetIt() TimeHow
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadSetAtime(r io.Reader) (m SetAtime, nTotal int64, err error) {
	var nField int64
	var discriminant TimeHow
	{
		var m TimeHow
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 2:
		var mArm SetAtime_SET_TO_CLIENT_TIME
		{
			m := &mArm
			{
				m := &m.Atime
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm SetAtime_default
		{
			m := &mArm
			m.SetIt = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readSetAtimeSetIt(r io.Reader) (m TimeHow, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeSetAtimeSetIt(w io.Writer, m TimeHow) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const setAtimeSetItEncodedSizeBytes = 4

type SetAtime_SET_TO_CLIENT_TIME struct {
	Atime Nfstime3
}

func (m *SetAtime_SET_TO_CLIENT_TIME) isSetAtime() {}

func (m *SetAtime_SET_TO_CLIENT_TIME) GetSetIt() TimeHow {
	return 2
}

func (m *SetAtime_SET_TO_CLIENT_TIME) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m TimeHow = 2
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Atime
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *SetAtime_SET_TO_CLIENT_TIME) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 8
	return
}

type SetAtime_default struct {
	SetIt TimeHow
}

func (m *SetAtime_default) isSetAtime() {}

func (m *SetAtime_default) GetSetIt() TimeHow {
	return m.SetIt
}

func (m *SetAtime_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.SetIt
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *SetAtime_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "set_mtime".

type SetMtime interface {
	isSetMtime()
	GetSetIt() TimeHow
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadSetMtime(r io.Reader) (m SetMtime, nTotal int64, err error) {
	var nField int64
	var discriminant TimeHow
	{
		var m TimeHow
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 2:
		var mArm SetMtime_SET_TO_CLIENT_TIME
		{
			m := &mArm
			{
				m := &m.Mtime
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm SetMtime_default
		{
			m := &mArm
			m.SetIt = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readSetMtimeSetIt(r io.Reader) (m TimeHow, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeSetMtimeSetIt(w io.Writer, m TimeHow) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const setMtimeSetItEncodedSizeBytes = 4

type SetMtime_SET_TO_CLIENT_TIME struct {
	Mtime Nfstime3
}

func (m *SetMtime_SET_TO_CLIENT_TIME) isSetMtime() {}

func (m *SetMtime_SET_TO_CLIENT_TIME) GetSetIt() TimeHow {
	return 2
}

func (m *SetMtime_SET_TO_CLIENT_TIME) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m TimeHow = 2
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Mtime
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *SetMtime_SET_TO_CLIENT_TIME) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 8
	return
}

type SetMtime_default struct {
	SetIt TimeHow
}

func (m *SetMtime_default) isSetMtime() {}

func (m *SetMtime_default) GetSetIt() TimeHow {
	return m.SetIt
}

func (m *SetMtime_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.SetIt
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *SetMtime_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "sattr3".

type Sattr3 struct {
	Mode  SetMode3
	Uid   SetUid3
	Gid   SetGid3
	Size  SetSize3
	Atime SetAtime
	Mtime SetMtime
}

func (m *Sattr3) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Mode
		var m SetMode3
		m, nField, err = ReadSetMode3(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Uid
		var m SetUid3
		m, nField, err = ReadSetUid3(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Gid
		var m SetGid3
		m, nField, err = ReadSetGid3(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Size
		var m SetSize3
		m, nField, err = ReadSetSize3(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Atime
		var m SetAtime
		m, nField, err = ReadSetAtime(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Mtime
		var m SetMtime
		m, nField, err = ReadSetMtime(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Sattr3) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Mode
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Uid
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Gid
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Size
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Atime
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Mtime
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Sattr3) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.Mode
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := m.Uid
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := m.Gid
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := m.Size
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := m.Atime
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := m.Mtime
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "diropargs3".

type Diropargs3 struct {
	Dir  NfsFh3
	Name string
}

func (m *Diropargs3) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Dir
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.Name
		var m string
		m, nField, err = runtime.ReadASCIIString(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Diropargs3) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Dir
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Name
		nField, err = runtime.WriteASCIIString(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Diropargs3) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.Dir
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := m.Name
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

const NFS_PROGRAM_PROGRAM_NUMBER uint32 = 100003

type NfsProgram interface {
	NfsV3Nfsproc3Null(context.Context) error
	NfsV3Nfsproc3Getattr(context.Context, *Getattr3args) (Getattr3res, error)
	NfsV3Nfsproc3Setattr(context.Context, *Setattr3args) (Setattr3res, error)
	NfsV3Nfsproc3Lookup(context.Context, *Lookup3args) (Lookup3res, error)
	NfsV3Nfsproc3Access(context.Context, *Access3args) (Access3res, error)
	NfsV3Nfsproc3Readlink(context.Context, *Readlink3args) (Readlink3res, error)
	NfsV3Nfsproc3Read(context.Context, *Read3args) (Read3res, error)
	NfsV3Nfsproc3Write(context.Context, *Write3args) (Write3res, error)
	NfsV3Nfsproc3Create(context.Context, *Create3args) (Create3res, error)
	NfsV3Nfsproc3Mkdir(context.Context, *Mkdir3args) (Mkdir3res, error)
	NfsV3Nfsproc3Symlink(context.Context, *Symlink3args) (Symlink3res, error)
	NfsV3Nfsproc3Mknod(context.Context, *Mknod3args) (Mknod3res, error)
	NfsV3Nfsproc3Remove(context.Context, *Remove3args) (Remove3res, error)
	NfsV3Nfsproc3Rmdir(context.Context, *Rmdir3args) (Rmdir3res, error)
	NfsV3Nfsproc3Rename(context.Context, *Rename3args) (Rename3res, error)
	NfsV3Nfsproc3Link(context.Context, *Link3args) (Link3res, error)
	NfsV3Nfsproc3Readdir(context.Context, *Readdir3args) (Readdir3res, error)
	NfsV3Nfsproc3Readdirplus(context.Context, *Readdirplus3args) (Readdirplus3res, error)
	NfsV3Nfsproc3Fsstat(context.Context, *Fsstat3args) (Fsstat3res, error)
	NfsV3Nfsproc3Fsinfo(context.Context, *Fsinfo3args) (Fsinfo3res, error)
	NfsV3Nfsproc3Pathconf(context.Context, *Pathconf3args) (Pathconf3res, error)
	NfsV3Nfsproc3Commit(context.Context, *Commit3args) (Commit3res, error)
}

func NewNfsProgramService(p NfsProgram) func(context.Context, uint32, uint32, io.ReadCloser, io.Writer) (rpcv2.AcceptedReplyData, error) {
	return func(ctx context.Context, vers, proc uint32, r io.ReadCloser, w io.Writer) (rpcv2.AcceptedReplyData, error) {
		var err error
		switch vers {
		case 3:
			switch proc {
			case 0:
				r.Close()
				r = nil
				errProc := p.NfsV3Nfsproc3Null(ctx)
				if errProc != nil {
					return nil, errProc
				}
			case 1:
				var a0 Getattr3args
				{
					m := &a0
					var nField, nTotal int64
					nField, err = m.ReadFrom(r)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
				r.Close()
				r = nil
				m, errProc := p.NfsV3Nfsproc3Getattr(ctx, &a0)
				if errProc != nil {
					return nil, errProc
				}
				{
					var nField, nTotal int64
					nField, err = m.WriteTo(w)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
			case 2:
				var a0 Setattr3args
				{
					m := &a0
					var nField, nTotal int64
					nField, err = m.ReadFrom(r)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
				r.Close()
				r = nil
				m, errProc := p.NfsV3Nfsproc3Setattr(ctx, &a0)
				if errProc != nil {
					return nil, errProc
				}
				{
					var nField, nTotal int64
					nField, err = m.WriteTo(w)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
			case 3:
				var a0 Lookup3args
				{
					m := &a0
					var nField, nTotal int64
					nField, err = m.ReadFrom(r)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
				r.Close()
				r = nil
				m, errProc := p.NfsV3Nfsproc3Lookup(ctx, &a0)
				if errProc != nil {
					return nil, errProc
				}
				{
					var nField, nTotal int64
					nField, err = m.WriteTo(w)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
			case 4:
				var a0 Access3args
				{
					m := &a0
					var nField, nTotal int64
					nField, err = m.ReadFrom(r)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
				r.Close()
				r = nil
				m, errProc := p.NfsV3Nfsproc3Access(ctx, &a0)
				if errProc != nil {
					return nil, errProc
				}
				{
					var nField, nTotal int64
					nField, err = m.WriteTo(w)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
			case 5:
				var a0 Readlink3args
				{
					m := &a0
					var nField, nTotal int64
					nField, err = m.ReadFrom(r)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
				r.Close()
				r = nil
				m, errProc := p.NfsV3Nfsproc3Readlink(ctx, &a0)
				if errProc != nil {
					return nil, errProc
				}
				{
					var nField, nTotal int64
					nField, err = m.WriteTo(w)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
			case 6:
				var a0 Read3args
				{
					m := &a0
					var nField, nTotal int64
					nField, err = m.ReadFrom(r)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
				r.Close()
				r = nil
				m, errProc := p.NfsV3Nfsproc3Read(ctx, &a0)
				if errProc != nil {
					return nil, errProc
				}
				{
					var nField, nTotal int64
					nField, err = m.WriteTo(w)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
			case 7:
				var a0 Write3args
				{
					m := &a0
					var nField, nTotal int64
					nField, err = m.ReadFrom(r)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
				r.Close()
				r = nil
				m, errProc := p.NfsV3Nfsproc3Write(ctx, &a0)
				if errProc != nil {
					return nil, errProc
				}
				{
					var nField, nTotal int64
					nField, err = m.WriteTo(w)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
			case 8:
				var a0 Create3args
				{
					m := &a0
					var nField, nTotal int64
					nField, err = m.ReadFrom(r)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
				r.Close()
				r = nil
				m, errProc := p.NfsV3Nfsproc3Create(ctx, &a0)
				if errProc != nil {
					return nil, errProc
				}
				{
					var nField, nTotal int64
					nField, err = m.WriteTo(w)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
			case 9:
				var a0 Mkdir3args
				{
					m := &a0
					var nField, nTotal int64
					nField, err = m.ReadFrom(r)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
				r.Close()
				r = nil
				m, errProc := p.NfsV3Nfsproc3Mkdir(ctx, &a0)
				if errProc != nil {
					return nil, errProc
				}
				{
					var nField, nTotal int64
					nField, err = m.WriteTo(w)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
			case 10:
				var a0 Symlink3args
				{
					m := &a0
					var nField, nTotal int64
					nField, err = m.ReadFrom(r)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
				r.Close()
				r = nil
				m, errProc := p.NfsV3Nfsproc3Symlink(ctx, &a0)
				if errProc != nil {
					return nil, errProc
				}
				{
					var nField, nTotal int64
					nField, err = m.WriteTo(w)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
			case 11:
				var a0 Mknod3args
				{
					m := &a0
					var nField, nTotal int64
					nField, err = m.ReadFrom(r)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
				r.Close()
				r = nil
				m, errProc := p.NfsV3Nfsproc3Mknod(ctx, &a0)
				if errProc != nil {
					return nil, errProc
				}
				{
					var nField, nTotal int64
					nField, err = m.WriteTo(w)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
			case 12:
				var a0 Remove3args
				{
					m := &a0
					var nField, nTotal int64
					nField, err = m.ReadFrom(r)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
				r.Close()
				r = nil
				m, errProc := p.NfsV3Nfsproc3Remove(ctx, &a0)
				if errProc != nil {
					return nil, errProc
				}
				{
					var nField, nTotal int64
					nField, err = m.WriteTo(w)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
			case 13:
				var a0 Rmdir3args
				{
					m := &a0
					var nField, nTotal int64
					nField, err = m.ReadFrom(r)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
				r.Close()
				r = nil
				m, errProc := p.NfsV3Nfsproc3Rmdir(ctx, &a0)
				if errProc != nil {
					return nil, errProc
				}
				{
					var nField, nTotal int64
					nField, err = m.WriteTo(w)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
			case 14:
				var a0 Rename3args
				{
					m := &a0
					var nField, nTotal int64
					nField, err = m.ReadFrom(r)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
				r.Close()
				r = nil
				m, errProc := p.NfsV3Nfsproc3Rename(ctx, &a0)
				if errProc != nil {
					return nil, errProc
				}
				{
					var nField, nTotal int64
					nField, err = m.WriteTo(w)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
			case 15:
				var a0 Link3args
				{
					m := &a0
					var nField, nTotal int64
					nField, err = m.ReadFrom(r)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
				r.Close()
				r = nil
				m, errProc := p.NfsV3Nfsproc3Link(ctx, &a0)
				if errProc != nil {
					return nil, errProc
				}
				{
					var nField, nTotal int64
					nField, err = m.WriteTo(w)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
			case 16:
				var a0 Readdir3args
				{
					m := &a0
					var nField, nTotal int64
					nField, err = m.ReadFrom(r)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
				r.Close()
				r = nil
				m, errProc := p.NfsV3Nfsproc3Readdir(ctx, &a0)
				if errProc != nil {
					return nil, errProc
				}
				{
					var nField, nTotal int64
					nField, err = m.WriteTo(w)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
			case 17:
				var a0 Readdirplus3args
				{
					m := &a0
					var nField, nTotal int64
					nField, err = m.ReadFrom(r)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
				r.Close()
				r = nil
				m, errProc := p.NfsV3Nfsproc3Readdirplus(ctx, &a0)
				if errProc != nil {
					return nil, errProc
				}
				{
					var nField, nTotal int64
					nField, err = m.WriteTo(w)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
			case 18:
				var a0 Fsstat3args
				{
					m := &a0
					var nField, nTotal int64
					nField, err = m.ReadFrom(r)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
				r.Close()
				r = nil
				m, errProc := p.NfsV3Nfsproc3Fsstat(ctx, &a0)
				if errProc != nil {
					return nil, errProc
				}
				{
					var nField, nTotal int64
					nField, err = m.WriteTo(w)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
			case 19:
				var a0 Fsinfo3args
				{
					m := &a0
					var nField, nTotal int64
					nField, err = m.ReadFrom(r)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
				r.Close()
				r = nil
				m, errProc := p.NfsV3Nfsproc3Fsinfo(ctx, &a0)
				if errProc != nil {
					return nil, errProc
				}
				{
					var nField, nTotal int64
					nField, err = m.WriteTo(w)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
			case 20:
				var a0 Pathconf3args
				{
					m := &a0
					var nField, nTotal int64
					nField, err = m.ReadFrom(r)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
				r.Close()
				r = nil
				m, errProc := p.NfsV3Nfsproc3Pathconf(ctx, &a0)
				if errProc != nil {
					return nil, errProc
				}
				{
					var nField, nTotal int64
					nField, err = m.WriteTo(w)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
			case 21:
				var a0 Commit3args
				{
					m := &a0
					var nField, nTotal int64
					nField, err = m.ReadFrom(r)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
				r.Close()
				r = nil
				m, errProc := p.NfsV3Nfsproc3Commit(ctx, &a0)
				if errProc != nil {
					return nil, errProc
				}
				{
					var nField, nTotal int64
					nField, err = m.WriteTo(w)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
			default:
				r.Close()
				return &rpcv2.AcceptedReplyData_default{Stat: rpcv2.PROC_UNAVAIL}, nil
			}
		default:
			r.Close()
			var replyData rpcv2.AcceptedReplyData_PROG_MISMATCH
			replyData.MismatchInfo.Low = 3
			replyData.MismatchInfo.High = 3
			return &replyData, nil
		}
		return &rpcv2.AcceptedReplyData_SUCCESS{}, nil
	done:
		if r != nil {
			r.Close()
		}
		return nil, err
	}
}

// Type definition "GETATTR3args".

type Getattr3args struct {
	Object NfsFh3
}

func (m *Getattr3args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Object
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Getattr3args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Object
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Getattr3args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.Object
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "GETATTR3resok".

type Getattr3resok struct {
	ObjAttributes Fattr3
}

func (m *Getattr3resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.ObjAttributes
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Getattr3resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.ObjAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Getattr3resokEncodedSizeBytes = 84

// Type definition "GETATTR3res".

type Getattr3res interface {
	isGetattr3res()
	GetStatus() Nfsstat3
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadGetattr3res(r io.Reader) (m Getattr3res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat3
	{
		var m Nfsstat3
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Getattr3res_NFS3_OK
		{
			m := &mArm
			{
				m := &m.Resok
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Getattr3res_default
		{
			m := &mArm
			m.Status = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readGetattr3resStatus(r io.Reader) (m Nfsstat3, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeGetattr3resStatus(w io.Writer, m Nfsstat3) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const getattr3resStatusEncodedSizeBytes = 4

type Getattr3res_NFS3_OK struct {
	Resok Getattr3resok
}

func (m *Getattr3res_NFS3_OK) isGetattr3res() {}

func (m *Getattr3res_NFS3_OK) GetStatus() Nfsstat3 {
	return 0
}

func (m *Getattr3res_NFS3_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat3 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Getattr3res_NFS3_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 84
	return
}

type Getattr3res_default struct {
	Status Nfsstat3
}

func (m *Getattr3res_default) isGetattr3res() {}

func (m *Getattr3res_default) GetStatus() Nfsstat3 {
	return m.Status
}

func (m *Getattr3res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Getattr3res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "sattrguard3".

type Sattrguard3 interface {
	isSattrguard3()
	GetCheck() bool
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadSattrguard3(r io.Reader) (m Sattrguard3, nTotal int64, err error) {
	var nField int64
	var discriminant bool
	{
		var m bool
		m, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case true:
		var mArm Sattrguard3_TRUE
		{
			m := &mArm
			{
				m := &m.ObjCtime
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case false:
		var mArm Sattrguard3_FALSE
		{
			m := &mArm
			_ = m
		}
		m = &mArm
	default:
		err = fmt.Errorf("discriminant sattrguard3.check has unknown value %d", discriminant)
		goto done
	}
done:
	return
}

func readSattrguard3Check(r io.Reader) (m bool, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadBool(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeSattrguard3Check(w io.Writer, m bool) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteBool(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const sattrguard3CheckEncodedSizeBytes = 4

type Sattrguard3_TRUE struct {
	ObjCtime Nfstime3
}

func (m *Sattrguard3_TRUE) isSattrguard3() {}

func (m *Sattrguard3_TRUE) GetCheck() bool {
	return true
}

func (m *Sattrguard3_TRUE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m bool = true
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.ObjCtime
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Sattrguard3_TRUE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 8
	return
}

type Sattrguard3_FALSE struct{}

func (m *Sattrguard3_FALSE) isSattrguard3() {}

func (m *Sattrguard3_FALSE) GetCheck() bool {
	return false
}

func (m *Sattrguard3_FALSE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m bool = false
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Sattrguard3_FALSE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "SETATTR3args".

type Setattr3args struct {
	Object        NfsFh3
	NewAttributes Sattr3
	Guard         Sattrguard3
}

func (m *Setattr3args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Object
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.NewAttributes
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.Guard
		var m Sattrguard3
		m, nField, err = ReadSattrguard3(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Setattr3args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Object
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.NewAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Guard
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Setattr3args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.Object
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := &m.NewAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := m.Guard
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "SETATTR3resok".

type Setattr3resok struct {
	ObjWcc WccData
}

func (m *Setattr3resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.ObjWcc
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Setattr3resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.ObjWcc
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Setattr3resok) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.ObjWcc
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "SETATTR3resfail".

type Setattr3resfail struct {
	ObjWcc WccData
}

func (m *Setattr3resfail) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.ObjWcc
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Setattr3resfail) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.ObjWcc
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Setattr3resfail) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.ObjWcc
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "SETATTR3res".

type Setattr3res interface {
	isSetattr3res()
	GetStatus() Nfsstat3
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadSetattr3res(r io.Reader) (m Setattr3res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat3
	{
		var m Nfsstat3
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Setattr3res_NFS3_OK
		{
			m := &mArm
			{
				m := &m.Resok
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Setattr3res_default
		{
			m := &mArm
			m.Status = discriminant
			{
				m := &m.Resfail
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	}
done:
	return
}

func readSetattr3resStatus(r io.Reader) (m Nfsstat3, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeSetattr3resStatus(w io.Writer, m Nfsstat3) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const setattr3resStatusEncodedSizeBytes = 4

type Setattr3res_NFS3_OK struct {
	Resok Setattr3resok
}

func (m *Setattr3res_NFS3_OK) isSetattr3res() {}

func (m *Setattr3res_NFS3_OK) GetStatus() Nfsstat3 {
	return 0
}

func (m *Setattr3res_NFS3_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat3 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Setattr3res_NFS3_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resok
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Setattr3res_default struct {
	Status  Nfsstat3
	Resfail Setattr3resfail
}

func (m *Setattr3res_default) isSetattr3res() {}

func (m *Setattr3res_default) GetStatus() Nfsstat3 {
	return m.Status
}

func (m *Setattr3res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resfail
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Setattr3res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resfail
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "LOOKUP3args".

type Lookup3args struct {
	What Diropargs3
}

func (m *Lookup3args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.What
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Lookup3args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.What
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Lookup3args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.What
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "LOOKUP3resok".

type Lookup3resok struct {
	Object        NfsFh3
	ObjAttributes PostOpAttr
	DirAttributes PostOpAttr
}

func (m *Lookup3resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Object
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.ObjAttributes
		var m PostOpAttr
		m, nField, err = ReadPostOpAttr(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.DirAttributes
		var m PostOpAttr
		m, nField, err = ReadPostOpAttr(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Lookup3resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Object
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.ObjAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.DirAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Lookup3resok) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.Object
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := m.ObjAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := m.DirAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "LOOKUP3resfail".

type Lookup3resfail struct {
	DirAttributes PostOpAttr
}

func (m *Lookup3resfail) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.DirAttributes
		var m PostOpAttr
		m, nField, err = ReadPostOpAttr(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Lookup3resfail) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.DirAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Lookup3resfail) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.DirAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "LOOKUP3res".

type Lookup3res interface {
	isLookup3res()
	GetStatus() Nfsstat3
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadLookup3res(r io.Reader) (m Lookup3res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat3
	{
		var m Nfsstat3
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Lookup3res_NFS3_OK
		{
			m := &mArm
			{
				m := &m.Resok
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Lookup3res_default
		{
			m := &mArm
			m.Status = discriminant
			{
				m := &m.Resfail
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	}
done:
	return
}

func readLookup3resStatus(r io.Reader) (m Nfsstat3, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeLookup3resStatus(w io.Writer, m Nfsstat3) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const lookup3resStatusEncodedSizeBytes = 4

type Lookup3res_NFS3_OK struct {
	Resok Lookup3resok
}

func (m *Lookup3res_NFS3_OK) isLookup3res() {}

func (m *Lookup3res_NFS3_OK) GetStatus() Nfsstat3 {
	return 0
}

func (m *Lookup3res_NFS3_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat3 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Lookup3res_NFS3_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resok
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Lookup3res_default struct {
	Status  Nfsstat3
	Resfail Lookup3resfail
}

func (m *Lookup3res_default) isLookup3res() {}

func (m *Lookup3res_default) GetStatus() Nfsstat3 {
	return m.Status
}

func (m *Lookup3res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resfail
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Lookup3res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resfail
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

const ACCESS3_READ = 1

const ACCESS3_LOOKUP = 2

const ACCESS3_MODIFY = 4

const ACCESS3_EXTEND = 8

const ACCESS3_DELETE = 16

const ACCESS3_EXECUTE = 32

// Type definition "ACCESS3args".

type Access3args struct {
	Object NfsFh3
	Access uint32
}

func (m *Access3args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Object
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.Access
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Access3args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Object
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Access
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Access3args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.Object
		nTotal += m.GetEncodedSizeBytes()
	}
	nTotal += 4
	return
}

// Type definition "ACCESS3resok".

type Access3resok struct {
	ObjAttributes PostOpAttr
	Access        uint32
}

func (m *Access3resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.ObjAttributes
		var m PostOpAttr
		m, nField, err = ReadPostOpAttr(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Access
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Access3resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.ObjAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Access
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Access3resok) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.ObjAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	nTotal += 4
	return
}

// Type definition "ACCESS3resfail".

type Access3resfail struct {
	ObjAttributes PostOpAttr
}

func (m *Access3resfail) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.ObjAttributes
		var m PostOpAttr
		m, nField, err = ReadPostOpAttr(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Access3resfail) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.ObjAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Access3resfail) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.ObjAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "ACCESS3res".

type Access3res interface {
	isAccess3res()
	GetStatus() Nfsstat3
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadAccess3res(r io.Reader) (m Access3res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat3
	{
		var m Nfsstat3
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Access3res_NFS3_OK
		{
			m := &mArm
			{
				m := &m.Resok
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Access3res_default
		{
			m := &mArm
			m.Status = discriminant
			{
				m := &m.Resfail
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	}
done:
	return
}

func readAccess3resStatus(r io.Reader) (m Nfsstat3, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeAccess3resStatus(w io.Writer, m Nfsstat3) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const access3resStatusEncodedSizeBytes = 4

type Access3res_NFS3_OK struct {
	Resok Access3resok
}

func (m *Access3res_NFS3_OK) isAccess3res() {}

func (m *Access3res_NFS3_OK) GetStatus() Nfsstat3 {
	return 0
}

func (m *Access3res_NFS3_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat3 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Access3res_NFS3_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resok
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Access3res_default struct {
	Status  Nfsstat3
	Resfail Access3resfail
}

func (m *Access3res_default) isAccess3res() {}

func (m *Access3res_default) GetStatus() Nfsstat3 {
	return m.Status
}

func (m *Access3res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resfail
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Access3res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resfail
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "READLINK3args".

type Readlink3args struct {
	Symlink NfsFh3
}

func (m *Readlink3args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Symlink
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Readlink3args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Symlink
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Readlink3args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.Symlink
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "READLINK3resok".

type Readlink3resok struct {
	SymlinkAttributes PostOpAttr
	Data              string
}

func (m *Readlink3resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.SymlinkAttributes
		var m PostOpAttr
		m, nField, err = ReadPostOpAttr(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Data
		var m string
		m, nField, err = runtime.ReadASCIIString(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Readlink3resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.SymlinkAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Data
		nField, err = runtime.WriteASCIIString(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Readlink3resok) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.SymlinkAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := m.Data
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "READLINK3resfail".

type Readlink3resfail struct {
	SymlinkAttributes PostOpAttr
}

func (m *Readlink3resfail) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.SymlinkAttributes
		var m PostOpAttr
		m, nField, err = ReadPostOpAttr(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Readlink3resfail) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.SymlinkAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Readlink3resfail) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.SymlinkAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "READLINK3res".

type Readlink3res interface {
	isReadlink3res()
	GetStatus() Nfsstat3
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadReadlink3res(r io.Reader) (m Readlink3res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat3
	{
		var m Nfsstat3
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Readlink3res_NFS3_OK
		{
			m := &mArm
			{
				m := &m.Resok
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Readlink3res_default
		{
			m := &mArm
			m.Status = discriminant
			{
				m := &m.Resfail
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	}
done:
	return
}

func readReadlink3resStatus(r io.Reader) (m Nfsstat3, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeReadlink3resStatus(w io.Writer, m Nfsstat3) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const readlink3resStatusEncodedSizeBytes = 4

type Readlink3res_NFS3_OK struct {
	Resok Readlink3resok
}

func (m *Readlink3res_NFS3_OK) isReadlink3res() {}

func (m *Readlink3res_NFS3_OK) GetStatus() Nfsstat3 {
	return 0
}

func (m *Readlink3res_NFS3_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat3 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Readlink3res_NFS3_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resok
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Readlink3res_default struct {
	Status  Nfsstat3
	Resfail Readlink3resfail
}

func (m *Readlink3res_default) isReadlink3res() {}

func (m *Readlink3res_default) GetStatus() Nfsstat3 {
	return m.Status
}

func (m *Readlink3res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resfail
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Readlink3res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resfail
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "READ3args".

type Read3args struct {
	File   NfsFh3
	Offset uint64
	Count  uint32
}

func (m *Read3args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.File
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.Offset
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Count
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Read3args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.File
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Offset
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Count
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Read3args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.File
		nTotal += m.GetEncodedSizeBytes()
	}
	nTotal += 8
	nTotal += 4
	return
}

// Type definition "READ3resok".

type Read3resok struct {
	FileAttributes PostOpAttr
	Count          uint32
	Eof            bool
	Data           []byte
}

func (m *Read3resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.FileAttributes
		var m PostOpAttr
		m, nField, err = ReadPostOpAttr(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Count
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Eof
		var m bool
		m, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Data
		var m []byte
		m, nField, err = runtime.ReadVariableLengthOpaque(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Read3resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.FileAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Count
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Eof
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Data
		nField, err = runtime.WriteVariableLengthOpaque(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Read3resok) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.FileAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	nTotal += 4
	nTotal += 4
	{
		m := m.Data
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "READ3resfail".

type Read3resfail struct {
	FileAttributes PostOpAttr
}

func (m *Read3resfail) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.FileAttributes
		var m PostOpAttr
		m, nField, err = ReadPostOpAttr(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Read3resfail) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.FileAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Read3resfail) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.FileAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "READ3res".

type Read3res interface {
	isRead3res()
	GetStatus() Nfsstat3
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadRead3res(r io.Reader) (m Read3res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat3
	{
		var m Nfsstat3
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Read3res_NFS3_OK
		{
			m := &mArm
			{
				m := &m.Resok
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Read3res_default
		{
			m := &mArm
			m.Status = discriminant
			{
				m := &m.Resfail
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	}
done:
	return
}

func readRead3resStatus(r io.Reader) (m Nfsstat3, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeRead3resStatus(w io.Writer, m Nfsstat3) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const read3resStatusEncodedSizeBytes = 4

type Read3res_NFS3_OK struct {
	Resok Read3resok
}

func (m *Read3res_NFS3_OK) isRead3res() {}

func (m *Read3res_NFS3_OK) GetStatus() Nfsstat3 {
	return 0
}

func (m *Read3res_NFS3_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat3 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Read3res_NFS3_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resok
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Read3res_default struct {
	Status  Nfsstat3
	Resfail Read3resfail
}

func (m *Read3res_default) isRead3res() {}

func (m *Read3res_default) GetStatus() Nfsstat3 {
	return m.Status
}

func (m *Read3res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resfail
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Read3res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resfail
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "stable_how".

type StableHow int32

func (mParent *StableHow) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	var m StableHow
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	*mParent = m
done:
	return
}

func (m StableHow) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const StableHowEncodedSizeBytes = 4

const DATA_SYNC StableHow = 1

const FILE_SYNC StableHow = 2

const UNSTABLE StableHow = 0

var StableHow_name = map[StableHow]string{
	1: "DATA_SYNC",
	2: "FILE_SYNC",
	0: "UNSTABLE",
}

// Type definition "WRITE3args".

type Write3args struct {
	File   NfsFh3
	Offset uint64
	Count  uint32
	Stable StableHow
	Data   []byte
}

func (m *Write3args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.File
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.Offset
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Count
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Stable
		var m StableHow
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Data
		var m []byte
		m, nField, err = runtime.ReadVariableLengthOpaque(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Write3args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.File
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Offset
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Count
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Stable
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Data
		nField, err = runtime.WriteVariableLengthOpaque(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Write3args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.File
		nTotal += m.GetEncodedSizeBytes()
	}
	nTotal += 8
	nTotal += 4
	nTotal += 4
	{
		m := m.Data
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "WRITE3resok".

type Write3resok struct {
	FileWcc   WccData
	Count     uint32
	Committed StableHow
	Verf      [8]byte
}

func (m *Write3resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.FileWcc
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.Count
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Committed
		var m StableHow
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.Verf
		nField, err = runtime.ReadFixedLengthOpaque(r, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Write3resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.FileWcc
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Count
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Committed
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Verf
		nField, err = runtime.WriteFixedLengthOpaque(w, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Write3resok) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.FileWcc
		nTotal += m.GetEncodedSizeBytes()
	}
	nTotal += 4
	nTotal += 4
	nTotal += 8
	return
}

// Type definition "WRITE3resfail".

type Write3resfail struct {
	FileWcc WccData
}

func (m *Write3resfail) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.FileWcc
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Write3resfail) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.FileWcc
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Write3resfail) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.FileWcc
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "WRITE3res".

type Write3res interface {
	isWrite3res()
	GetStatus() Nfsstat3
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadWrite3res(r io.Reader) (m Write3res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat3
	{
		var m Nfsstat3
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Write3res_NFS3_OK
		{
			m := &mArm
			{
				m := &m.Resok
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Write3res_default
		{
			m := &mArm
			m.Status = discriminant
			{
				m := &m.Resfail
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	}
done:
	return
}

func readWrite3resStatus(r io.Reader) (m Nfsstat3, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeWrite3resStatus(w io.Writer, m Nfsstat3) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const write3resStatusEncodedSizeBytes = 4

type Write3res_NFS3_OK struct {
	Resok Write3resok
}

func (m *Write3res_NFS3_OK) isWrite3res() {}

func (m *Write3res_NFS3_OK) GetStatus() Nfsstat3 {
	return 0
}

func (m *Write3res_NFS3_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat3 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Write3res_NFS3_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resok
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Write3res_default struct {
	Status  Nfsstat3
	Resfail Write3resfail
}

func (m *Write3res_default) isWrite3res() {}

func (m *Write3res_default) GetStatus() Nfsstat3 {
	return m.Status
}

func (m *Write3res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resfail
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Write3res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resfail
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "createmode3".

type Createmode3 int32

func (mParent *Createmode3) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	var m Createmode3
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	*mParent = m
done:
	return
}

func (m Createmode3) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Createmode3EncodedSizeBytes = 4

const EXCLUSIVE Createmode3 = 2

const GUARDED Createmode3 = 1

const UNCHECKED Createmode3 = 0

var Createmode3_name = map[Createmode3]string{
	2: "EXCLUSIVE",
	1: "GUARDED",
	0: "UNCHECKED",
}

// Type definition "createhow3".

type Createhow3 interface {
	isCreatehow3()
	GetMode() Createmode3
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadCreatehow3(r io.Reader) (m Createhow3, nTotal int64, err error) {
	var nField int64
	var discriminant Createmode3
	{
		var m Createmode3
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Createhow3_UNCHECKED
		{
			m := &mArm
			{
				m := &m.ObjAttributes
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 1:
		var mArm Createhow3_GUARDED
		{
			m := &mArm
			{
				m := &m.ObjAttributes
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 2:
		var mArm Createhow3_EXCLUSIVE
		{
			m := &mArm
			{
				m := &m.Verf
				nField, err = runtime.ReadFixedLengthOpaque(r, m[:])
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		err = fmt.Errorf("discriminant createhow3.mode has unknown value %d", discriminant)
		goto done
	}
done:
	return
}

func readCreatehow3Mode(r io.Reader) (m Createmode3, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeCreatehow3Mode(w io.Writer, m Createmode3) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const createhow3ModeEncodedSizeBytes = 4

type Createhow3_UNCHECKED struct {
	ObjAttributes Sattr3
}

func (m *Createhow3_UNCHECKED) isCreatehow3() {}

func (m *Createhow3_UNCHECKED) GetMode() Createmode3 {
	return 0
}

func (m *Createhow3_UNCHECKED) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Createmode3 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.ObjAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Createhow3_UNCHECKED) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.ObjAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Createhow3_GUARDED struct {
	ObjAttributes Sattr3
}

func (m *Createhow3_GUARDED) isCreatehow3() {}

func (m *Createhow3_GUARDED) GetMode() Createmode3 {
	return 1
}

func (m *Createhow3_GUARDED) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Createmode3 = 1
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.ObjAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Createhow3_GUARDED) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.ObjAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Createhow3_EXCLUSIVE struct {
	Verf [8]byte
}

func (m *Createhow3_EXCLUSIVE) isCreatehow3() {}

func (m *Createhow3_EXCLUSIVE) GetMode() Createmode3 {
	return 2
}

func (m *Createhow3_EXCLUSIVE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Createmode3 = 2
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Verf
		nField, err = runtime.WriteFixedLengthOpaque(w, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Createhow3_EXCLUSIVE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 8
	return
}

// Type definition "CREATE3args".

type Create3args struct {
	Where Diropargs3
	How   Createhow3
}

func (m *Create3args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Where
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.How
		var m Createhow3
		m, nField, err = ReadCreatehow3(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Create3args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Where
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.How
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Create3args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.Where
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := m.How
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "CREATE3resok".

type Create3resok struct {
	Obj           PostOpFh3
	ObjAttributes PostOpAttr
	DirWcc        WccData
}

func (m *Create3resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Obj
		var m PostOpFh3
		m, nField, err = ReadPostOpFh3(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.ObjAttributes
		var m PostOpAttr
		m, nField, err = ReadPostOpAttr(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.DirWcc
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Create3resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Obj
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.ObjAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.DirWcc
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Create3resok) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.Obj
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := m.ObjAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := &m.DirWcc
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "CREATE3resfail".

type Create3resfail struct {
	DirWcc WccData
}

func (m *Create3resfail) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.DirWcc
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Create3resfail) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.DirWcc
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Create3resfail) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.DirWcc
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "CREATE3res".

type Create3res interface {
	isCreate3res()
	GetStatus() Nfsstat3
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadCreate3res(r io.Reader) (m Create3res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat3
	{
		var m Nfsstat3
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Create3res_NFS3_OK
		{
			m := &mArm
			{
				m := &m.Resok
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Create3res_default
		{
			m := &mArm
			m.Status = discriminant
			{
				m := &m.Resfail
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	}
done:
	return
}

func readCreate3resStatus(r io.Reader) (m Nfsstat3, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeCreate3resStatus(w io.Writer, m Nfsstat3) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const create3resStatusEncodedSizeBytes = 4

type Create3res_NFS3_OK struct {
	Resok Create3resok
}

func (m *Create3res_NFS3_OK) isCreate3res() {}

func (m *Create3res_NFS3_OK) GetStatus() Nfsstat3 {
	return 0
}

func (m *Create3res_NFS3_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat3 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Create3res_NFS3_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resok
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Create3res_default struct {
	Status  Nfsstat3
	Resfail Create3resfail
}

func (m *Create3res_default) isCreate3res() {}

func (m *Create3res_default) GetStatus() Nfsstat3 {
	return m.Status
}

func (m *Create3res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resfail
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Create3res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resfail
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "MKDIR3args".

type Mkdir3args struct {
	Where      Diropargs3
	Attributes Sattr3
}

func (m *Mkdir3args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Where
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Attributes
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Mkdir3args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Where
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Attributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Mkdir3args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.Where
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := &m.Attributes
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "MKDIR3resok".

type Mkdir3resok struct {
	Obj           PostOpFh3
	ObjAttributes PostOpAttr
	DirWcc        WccData
}

func (m *Mkdir3resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Obj
		var m PostOpFh3
		m, nField, err = ReadPostOpFh3(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.ObjAttributes
		var m PostOpAttr
		m, nField, err = ReadPostOpAttr(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.DirWcc
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Mkdir3resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Obj
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.ObjAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.DirWcc
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Mkdir3resok) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.Obj
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := m.ObjAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := &m.DirWcc
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "MKDIR3resfail".

type Mkdir3resfail struct {
	DirWcc WccData
}

func (m *Mkdir3resfail) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.DirWcc
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Mkdir3resfail) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.DirWcc
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Mkdir3resfail) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.DirWcc
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "MKDIR3res".

type Mkdir3res interface {
	isMkdir3res()
	GetStatus() Nfsstat3
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadMkdir3res(r io.Reader) (m Mkdir3res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat3
	{
		var m Nfsstat3
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Mkdir3res_NFS3_OK
		{
			m := &mArm
			{
				m := &m.Resok
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Mkdir3res_default
		{
			m := &mArm
			m.Status = discriminant
			{
				m := &m.Resfail
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	}
done:
	return
}

func readMkdir3resStatus(r io.Reader) (m Nfsstat3, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeMkdir3resStatus(w io.Writer, m Nfsstat3) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const mkdir3resStatusEncodedSizeBytes = 4

type Mkdir3res_NFS3_OK struct {
	Resok Mkdir3resok
}

func (m *Mkdir3res_NFS3_OK) isMkdir3res() {}

func (m *Mkdir3res_NFS3_OK) GetStatus() Nfsstat3 {
	return 0
}

func (m *Mkdir3res_NFS3_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat3 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Mkdir3res_NFS3_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resok
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Mkdir3res_default struct {
	Status  Nfsstat3
	Resfail Mkdir3resfail
}

func (m *Mkdir3res_default) isMkdir3res() {}

func (m *Mkdir3res_default) GetStatus() Nfsstat3 {
	return m.Status
}

func (m *Mkdir3res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resfail
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Mkdir3res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resfail
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "symlinkdata3".

type Symlinkdata3 struct {
	SymlinkAttributes Sattr3
	SymlinkData       string
}

func (m *Symlinkdata3) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.SymlinkAttributes
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.SymlinkData
		var m string
		m, nField, err = runtime.ReadASCIIString(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Symlinkdata3) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.SymlinkAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.SymlinkData
		nField, err = runtime.WriteASCIIString(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Symlinkdata3) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.SymlinkAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := m.SymlinkData
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "SYMLINK3args".

type Symlink3args struct {
	Where   Diropargs3
	Symlink Symlinkdata3
}

func (m *Symlink3args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Where
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Symlink
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Symlink3args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Where
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Symlink
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Symlink3args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.Where
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := &m.Symlink
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "SYMLINK3resok".

type Symlink3resok struct {
	Obj           PostOpFh3
	ObjAttributes PostOpAttr
	DirWcc        WccData
}

func (m *Symlink3resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Obj
		var m PostOpFh3
		m, nField, err = ReadPostOpFh3(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.ObjAttributes
		var m PostOpAttr
		m, nField, err = ReadPostOpAttr(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.DirWcc
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Symlink3resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Obj
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.ObjAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.DirWcc
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Symlink3resok) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.Obj
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := m.ObjAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := &m.DirWcc
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "SYMLINK3resfail".

type Symlink3resfail struct {
	DirWcc WccData
}

func (m *Symlink3resfail) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.DirWcc
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Symlink3resfail) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.DirWcc
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Symlink3resfail) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.DirWcc
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "SYMLINK3res".

type Symlink3res interface {
	isSymlink3res()
	GetStatus() Nfsstat3
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadSymlink3res(r io.Reader) (m Symlink3res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat3
	{
		var m Nfsstat3
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Symlink3res_NFS3_OK
		{
			m := &mArm
			{
				m := &m.Resok
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Symlink3res_default
		{
			m := &mArm
			m.Status = discriminant
			{
				m := &m.Resfail
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	}
done:
	return
}

func readSymlink3resStatus(r io.Reader) (m Nfsstat3, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeSymlink3resStatus(w io.Writer, m Nfsstat3) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const symlink3resStatusEncodedSizeBytes = 4

type Symlink3res_NFS3_OK struct {
	Resok Symlink3resok
}

func (m *Symlink3res_NFS3_OK) isSymlink3res() {}

func (m *Symlink3res_NFS3_OK) GetStatus() Nfsstat3 {
	return 0
}

func (m *Symlink3res_NFS3_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat3 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Symlink3res_NFS3_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resok
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Symlink3res_default struct {
	Status  Nfsstat3
	Resfail Symlink3resfail
}

func (m *Symlink3res_default) isSymlink3res() {}

func (m *Symlink3res_default) GetStatus() Nfsstat3 {
	return m.Status
}

func (m *Symlink3res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resfail
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Symlink3res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resfail
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "devicedata3".

type Devicedata3 struct {
	DevAttributes Sattr3
	Spec          Specdata3
}

func (m *Devicedata3) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.DevAttributes
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Spec
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Devicedata3) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.DevAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Spec
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Devicedata3) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.DevAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	nTotal += 8
	return
}

// Type definition "mknoddata3".

type Mknoddata3 interface {
	isMknoddata3()
	GetType() Ftype3
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadMknoddata3(r io.Reader) (m Mknoddata3, nTotal int64, err error) {
	var nField int64
	var discriminant Ftype3
	{
		var m Ftype3
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 4:
		var mArm Mknoddata3_NF3CHR
		{
			m := &mArm
			{
				m := &m.Device
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 3:
		var mArm Mknoddata3_NF3BLK
		{
			m := &mArm
			{
				m := &m.Device
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 6:
		var mArm Mknoddata3_NF3SOCK
		{
			m := &mArm
			{
				m := &m.PipeAttributes
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 7:
		var mArm Mknoddata3_NF3FIFO
		{
			m := &mArm
			{
				m := &m.PipeAttributes
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Mknoddata3_default
		{
			m := &mArm
			m.Type = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readMknoddata3Type(r io.Reader) (m Ftype3, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeMknoddata3Type(w io.Writer, m Ftype3) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const mknoddata3TypeEncodedSizeBytes = 4

type Mknoddata3_NF3CHR struct {
	Device Devicedata3
}

func (m *Mknoddata3_NF3CHR) isMknoddata3() {}

func (m *Mknoddata3_NF3CHR) GetType() Ftype3 {
	return 4
}

func (m *Mknoddata3_NF3CHR) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Ftype3 = 4
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Device
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Mknoddata3_NF3CHR) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Device
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Mknoddata3_NF3BLK struct {
	Device Devicedata3
}

func (m *Mknoddata3_NF3BLK) isMknoddata3() {}

func (m *Mknoddata3_NF3BLK) GetType() Ftype3 {
	return 3
}

func (m *Mknoddata3_NF3BLK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Ftype3 = 3
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Device
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Mknoddata3_NF3BLK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Device
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Mknoddata3_NF3SOCK struct {
	PipeAttributes Sattr3
}

func (m *Mknoddata3_NF3SOCK) isMknoddata3() {}

func (m *Mknoddata3_NF3SOCK) GetType() Ftype3 {
	return 6
}

func (m *Mknoddata3_NF3SOCK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Ftype3 = 6
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.PipeAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Mknoddata3_NF3SOCK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.PipeAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Mknoddata3_NF3FIFO struct {
	PipeAttributes Sattr3
}

func (m *Mknoddata3_NF3FIFO) isMknoddata3() {}

func (m *Mknoddata3_NF3FIFO) GetType() Ftype3 {
	return 7
}

func (m *Mknoddata3_NF3FIFO) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Ftype3 = 7
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.PipeAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Mknoddata3_NF3FIFO) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.PipeAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Mknoddata3_default struct {
	Type Ftype3
}

func (m *Mknoddata3_default) isMknoddata3() {}

func (m *Mknoddata3_default) GetType() Ftype3 {
	return m.Type
}

func (m *Mknoddata3_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Type
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Mknoddata3_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "MKNOD3args".

type Mknod3args struct {
	Where Diropargs3
	What  Mknoddata3
}

func (m *Mknod3args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Where
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.What
		var m Mknoddata3
		m, nField, err = ReadMknoddata3(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Mknod3args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Where
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.What
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Mknod3args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.Where
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := m.What
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "MKNOD3resok".

type Mknod3resok struct {
	Obj           PostOpFh3
	ObjAttributes PostOpAttr
	DirWcc        WccData
}

func (m *Mknod3resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Obj
		var m PostOpFh3
		m, nField, err = ReadPostOpFh3(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.ObjAttributes
		var m PostOpAttr
		m, nField, err = ReadPostOpAttr(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.DirWcc
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Mknod3resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Obj
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.ObjAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.DirWcc
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Mknod3resok) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.Obj
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := m.ObjAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := &m.DirWcc
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "MKNOD3resfail".

type Mknod3resfail struct {
	DirWcc WccData
}

func (m *Mknod3resfail) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.DirWcc
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Mknod3resfail) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.DirWcc
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Mknod3resfail) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.DirWcc
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "MKNOD3res".

type Mknod3res interface {
	isMknod3res()
	GetStatus() Nfsstat3
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadMknod3res(r io.Reader) (m Mknod3res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat3
	{
		var m Nfsstat3
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Mknod3res_NFS3_OK
		{
			m := &mArm
			{
				m := &m.Resok
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Mknod3res_default
		{
			m := &mArm
			m.Status = discriminant
			{
				m := &m.Resfail
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	}
done:
	return
}

func readMknod3resStatus(r io.Reader) (m Nfsstat3, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeMknod3resStatus(w io.Writer, m Nfsstat3) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const mknod3resStatusEncodedSizeBytes = 4

type Mknod3res_NFS3_OK struct {
	Resok Mknod3resok
}

func (m *Mknod3res_NFS3_OK) isMknod3res() {}

func (m *Mknod3res_NFS3_OK) GetStatus() Nfsstat3 {
	return 0
}

func (m *Mknod3res_NFS3_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat3 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Mknod3res_NFS3_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resok
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Mknod3res_default struct {
	Status  Nfsstat3
	Resfail Mknod3resfail
}

func (m *Mknod3res_default) isMknod3res() {}

func (m *Mknod3res_default) GetStatus() Nfsstat3 {
	return m.Status
}

func (m *Mknod3res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resfail
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Mknod3res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resfail
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "REMOVE3args".

type Remove3args struct {
	Object Diropargs3
}

func (m *Remove3args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Object
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Remove3args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Object
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Remove3args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.Object
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "REMOVE3resok".

type Remove3resok struct {
	DirWcc WccData
}

func (m *Remove3resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.DirWcc
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Remove3resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.DirWcc
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Remove3resok) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.DirWcc
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "REMOVE3resfail".

type Remove3resfail struct {
	DirWcc WccData
}

func (m *Remove3resfail) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.DirWcc
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Remove3resfail) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.DirWcc
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Remove3resfail) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.DirWcc
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "REMOVE3res".

type Remove3res interface {
	isRemove3res()
	GetStatus() Nfsstat3
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadRemove3res(r io.Reader) (m Remove3res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat3
	{
		var m Nfsstat3
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Remove3res_NFS3_OK
		{
			m := &mArm
			{
				m := &m.Resok
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Remove3res_default
		{
			m := &mArm
			m.Status = discriminant
			{
				m := &m.Resfail
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	}
done:
	return
}

func readRemove3resStatus(r io.Reader) (m Nfsstat3, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeRemove3resStatus(w io.Writer, m Nfsstat3) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const remove3resStatusEncodedSizeBytes = 4

type Remove3res_NFS3_OK struct {
	Resok Remove3resok
}

func (m *Remove3res_NFS3_OK) isRemove3res() {}

func (m *Remove3res_NFS3_OK) GetStatus() Nfsstat3 {
	return 0
}

func (m *Remove3res_NFS3_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat3 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Remove3res_NFS3_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resok
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Remove3res_default struct {
	Status  Nfsstat3
	Resfail Remove3resfail
}

func (m *Remove3res_default) isRemove3res() {}

func (m *Remove3res_default) GetStatus() Nfsstat3 {
	return m.Status
}

func (m *Remove3res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resfail
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Remove3res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resfail
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "RMDIR3args".

type Rmdir3args struct {
	Object Diropargs3
}

func (m *Rmdir3args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Object
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Rmdir3args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Object
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Rmdir3args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.Object
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "RMDIR3resok".

type Rmdir3resok struct {
	DirWcc WccData
}

func (m *Rmdir3resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.DirWcc
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Rmdir3resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.DirWcc
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Rmdir3resok) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.DirWcc
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "RMDIR3resfail".

type Rmdir3resfail struct {
	DirWcc WccData
}

func (m *Rmdir3resfail) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.DirWcc
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Rmdir3resfail) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.DirWcc
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Rmdir3resfail) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.DirWcc
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "RMDIR3res".

type Rmdir3res interface {
	isRmdir3res()
	GetStatus() Nfsstat3
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadRmdir3res(r io.Reader) (m Rmdir3res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat3
	{
		var m Nfsstat3
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Rmdir3res_NFS3_OK
		{
			m := &mArm
			{
				m := &m.Resok
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Rmdir3res_default
		{
			m := &mArm
			m.Status = discriminant
			{
				m := &m.Resfail
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	}
done:
	return
}

func readRmdir3resStatus(r io.Reader) (m Nfsstat3, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeRmdir3resStatus(w io.Writer, m Nfsstat3) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const rmdir3resStatusEncodedSizeBytes = 4

type Rmdir3res_NFS3_OK struct {
	Resok Rmdir3resok
}

func (m *Rmdir3res_NFS3_OK) isRmdir3res() {}

func (m *Rmdir3res_NFS3_OK) GetStatus() Nfsstat3 {
	return 0
}

func (m *Rmdir3res_NFS3_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat3 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Rmdir3res_NFS3_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resok
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Rmdir3res_default struct {
	Status  Nfsstat3
	Resfail Rmdir3resfail
}

func (m *Rmdir3res_default) isRmdir3res() {}

func (m *Rmdir3res_default) GetStatus() Nfsstat3 {
	return m.Status
}

func (m *Rmdir3res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resfail
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Rmdir3res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resfail
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "RENAME3args".

type Rename3args struct {
	From Diropargs3
	To   Diropargs3
}

func (m *Rename3args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.From
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.To
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Rename3args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.From
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.To
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Rename3args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.From
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := &m.To
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "RENAME3resok".

type Rename3resok struct {
	FromdirWcc WccData
	TodirWcc   WccData
}

func (m *Rename3resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.FromdirWcc
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.TodirWcc
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Rename3resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.FromdirWcc
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.TodirWcc
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Rename3resok) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.FromdirWcc
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := &m.TodirWcc
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "RENAME3resfail".

type Rename3resfail struct {
	FromdirWcc WccData
	TodirWcc   WccData
}

func (m *Rename3resfail) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.FromdirWcc
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.TodirWcc
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Rename3resfail) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.FromdirWcc
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.TodirWcc
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Rename3resfail) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.FromdirWcc
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := &m.TodirWcc
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "RENAME3res".

type Rename3res interface {
	isRename3res()
	GetStatus() Nfsstat3
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadRename3res(r io.Reader) (m Rename3res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat3
	{
		var m Nfsstat3
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Rename3res_NFS3_OK
		{
			m := &mArm
			{
				m := &m.Resok
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Rename3res_default
		{
			m := &mArm
			m.Status = discriminant
			{
				m := &m.Resfail
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	}
done:
	return
}

func readRename3resStatus(r io.Reader) (m Nfsstat3, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeRename3resStatus(w io.Writer, m Nfsstat3) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const rename3resStatusEncodedSizeBytes = 4

type Rename3res_NFS3_OK struct {
	Resok Rename3resok
}

func (m *Rename3res_NFS3_OK) isRename3res() {}

func (m *Rename3res_NFS3_OK) GetStatus() Nfsstat3 {
	return 0
}

func (m *Rename3res_NFS3_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat3 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Rename3res_NFS3_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resok
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Rename3res_default struct {
	Status  Nfsstat3
	Resfail Rename3resfail
}

func (m *Rename3res_default) isRename3res() {}

func (m *Rename3res_default) GetStatus() Nfsstat3 {
	return m.Status
}

func (m *Rename3res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resfail
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Rename3res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resfail
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "LINK3args".

type Link3args struct {
	File NfsFh3
	Link Diropargs3
}

func (m *Link3args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.File
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Link
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Link3args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.File
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Link
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Link3args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.File
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := &m.Link
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "LINK3resok".

type Link3resok struct {
	FileAttributes PostOpAttr
	LinkdirWcc     WccData
}

func (m *Link3resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.FileAttributes
		var m PostOpAttr
		m, nField, err = ReadPostOpAttr(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.LinkdirWcc
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Link3resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.FileAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.LinkdirWcc
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Link3resok) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.FileAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := &m.LinkdirWcc
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "LINK3resfail".

type Link3resfail struct {
	FileAttributes PostOpAttr
	LinkdirWcc     WccData
}

func (m *Link3resfail) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.FileAttributes
		var m PostOpAttr
		m, nField, err = ReadPostOpAttr(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.LinkdirWcc
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Link3resfail) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.FileAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.LinkdirWcc
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Link3resfail) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.FileAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := &m.LinkdirWcc
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "LINK3res".

type Link3res interface {
	isLink3res()
	GetStatus() Nfsstat3
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadLink3res(r io.Reader) (m Link3res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat3
	{
		var m Nfsstat3
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Link3res_NFS3_OK
		{
			m := &mArm
			{
				m := &m.Resok
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Link3res_default
		{
			m := &mArm
			m.Status = discriminant
			{
				m := &m.Resfail
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	}
done:
	return
}

func readLink3resStatus(r io.Reader) (m Nfsstat3, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeLink3resStatus(w io.Writer, m Nfsstat3) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const link3resStatusEncodedSizeBytes = 4

type Link3res_NFS3_OK struct {
	Resok Link3resok
}

func (m *Link3res_NFS3_OK) isLink3res() {}

func (m *Link3res_NFS3_OK) GetStatus() Nfsstat3 {
	return 0
}

func (m *Link3res_NFS3_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat3 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Link3res_NFS3_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resok
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Link3res_default struct {
	Status  Nfsstat3
	Resfail Link3resfail
}

func (m *Link3res_default) isLink3res() {}

func (m *Link3res_default) GetStatus() Nfsstat3 {
	return m.Status
}

func (m *Link3res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resfail
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Link3res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resfail
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "READDIR3args".

type Readdir3args struct {
	Dir        NfsFh3
	Cookie     uint64
	Cookieverf [8]byte
	Count      uint32
}

func (m *Readdir3args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Dir
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.Cookie
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.Cookieverf
		nField, err = runtime.ReadFixedLengthOpaque(r, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.Count
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Readdir3args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Dir
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Cookie
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Cookieverf
		nField, err = runtime.WriteFixedLengthOpaque(w, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Count
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Readdir3args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.Dir
		nTotal += m.GetEncodedSizeBytes()
	}
	nTotal += 8
	nTotal += 8
	nTotal += 4
	return
}

// Type definition "entry3".

type Entry3 struct {
	Fileid    uint64
	Name      string
	Cookie    uint64
	Nextentry *Entry3
}

func (m *Entry3) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Fileid
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Name
		var m string
		m, nField, err = runtime.ReadASCIIString(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Cookie
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Nextentry
		var m *Entry3
		var isSet bool
		isSet, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if isSet {
			mParent := &m
			var m Entry3
			nField, err = m.ReadFrom(r)
			nTotal += nField
			if err != nil {
				goto done
			}
			*mParent = &m
		}
		*mSave = m
	}
done:
	return
}

func (m *Entry3) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Fileid
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Name
		nField, err = runtime.WriteASCIIString(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Cookie
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Nextentry
		if m == nil {
			nField, err = runtime.WriteBool(w, false)
			nTotal += nField
			if err != nil {
				goto done
			}
		} else {
			nField, err = runtime.WriteBool(w, true)
			nTotal += nField
			if err != nil {
				goto done
			}
			{
				nField, err = m.WriteTo(w)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
	}
done:
	return
}

func (m *Entry3) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 8
	{
		m := m.Name
		nTotal += (len(m) + 7) &^ 3
	}
	nTotal += 8
	{
		m := m.Nextentry
		nTotal += 4
		if m != nil {
			nTotal += m.GetEncodedSizeBytes()
		}
	}
	return
}

// Type definition "dirlist3".

type Dirlist3 struct {
	Entries *Entry3
	Eof     bool
}

func (m *Dirlist3) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Entries
		var m *Entry3
		var isSet bool
		isSet, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if isSet {
			mParent := &m
			var m Entry3
			nField, err = m.ReadFrom(r)
			nTotal += nField
			if err != nil {
				goto done
			}
			*mParent = &m
		}
		*mSave = m
	}
	{
		mSave := &m.Eof
		var m bool
		m, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Dirlist3) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Entries
		if m == nil {
			nField, err = runtime.WriteBool(w, false)
			nTotal += nField
			if err != nil {
				goto done
			}
		} else {
			nField, err = runtime.WriteBool(w, true)
			nTotal += nField
			if err != nil {
				goto done
			}
			{
				nField, err = m.WriteTo(w)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
	}
	{
		m := m.Eof
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Dirlist3) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.Entries
		nTotal += 4
		if m != nil {
			nTotal += m.GetEncodedSizeBytes()
		}
	}
	nTotal += 4
	return
}

// Type definition "READDIR3resok".

type Readdir3resok struct {
	DirAttributes PostOpAttr
	Cookieverf    [8]byte
	Reply         Dirlist3
}

func (m *Readdir3resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.DirAttributes
		var m PostOpAttr
		m, nField, err = ReadPostOpAttr(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.Cookieverf
		nField, err = runtime.ReadFixedLengthOpaque(r, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Reply
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Readdir3resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.DirAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Cookieverf
		nField, err = runtime.WriteFixedLengthOpaque(w, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Reply
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Readdir3resok) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.DirAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	nTotal += 8
	{
		m := &m.Reply
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "READDIR3resfail".

type Readdir3resfail struct {
	DirAttributes PostOpAttr
}

func (m *Readdir3resfail) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.DirAttributes
		var m PostOpAttr
		m, nField, err = ReadPostOpAttr(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Readdir3resfail) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.DirAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Readdir3resfail) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.DirAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "READDIR3res".

type Readdir3res interface {
	isReaddir3res()
	GetStatus() Nfsstat3
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadReaddir3res(r io.Reader) (m Readdir3res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat3
	{
		var m Nfsstat3
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Readdir3res_NFS3_OK
		{
			m := &mArm
			{
				m := &m.Resok
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Readdir3res_default
		{
			m := &mArm
			m.Status = discriminant
			{
				m := &m.Resfail
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	}
done:
	return
}

func readReaddir3resStatus(r io.Reader) (m Nfsstat3, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeReaddir3resStatus(w io.Writer, m Nfsstat3) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const readdir3resStatusEncodedSizeBytes = 4

type Readdir3res_NFS3_OK struct {
	Resok Readdir3resok
}

func (m *Readdir3res_NFS3_OK) isReaddir3res() {}

func (m *Readdir3res_NFS3_OK) GetStatus() Nfsstat3 {
	return 0
}

func (m *Readdir3res_NFS3_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat3 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Readdir3res_NFS3_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resok
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Readdir3res_default struct {
	Status  Nfsstat3
	Resfail Readdir3resfail
}

func (m *Readdir3res_default) isReaddir3res() {}

func (m *Readdir3res_default) GetStatus() Nfsstat3 {
	return m.Status
}

func (m *Readdir3res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resfail
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Readdir3res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resfail
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "READDIRPLUS3args".

type Readdirplus3args struct {
	Dir        NfsFh3
	Cookie     uint64
	Cookieverf [8]byte
	Dircount   uint32
	Maxcount   uint32
}

func (m *Readdirplus3args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Dir
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.Cookie
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.Cookieverf
		nField, err = runtime.ReadFixedLengthOpaque(r, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.Dircount
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Maxcount
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Readdirplus3args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Dir
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Cookie
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Cookieverf
		nField, err = runtime.WriteFixedLengthOpaque(w, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Dircount
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Maxcount
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Readdirplus3args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.Dir
		nTotal += m.GetEncodedSizeBytes()
	}
	nTotal += 8
	nTotal += 8
	nTotal += 4
	nTotal += 4
	return
}

// Type definition "entryplus3".

type Entryplus3 struct {
	Fileid         uint64
	Name           string
	Cookie         uint64
	NameAttributes PostOpAttr
	NameHandle     PostOpFh3
	Nextentry      *Entryplus3
}

func (m *Entryplus3) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Fileid
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Name
		var m string
		m, nField, err = runtime.ReadASCIIString(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Cookie
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.NameAttributes
		var m PostOpAttr
		m, nField, err = ReadPostOpAttr(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.NameHandle
		var m PostOpFh3
		m, nField, err = ReadPostOpFh3(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Nextentry
		var m *Entryplus3
		var isSet bool
		isSet, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if isSet {
			mParent := &m
			var m Entryplus3
			nField, err = m.ReadFrom(r)
			nTotal += nField
			if err != nil {
				goto done
			}
			*mParent = &m
		}
		*mSave = m
	}
done:
	return
}

func (m *Entryplus3) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Fileid
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Name
		nField, err = runtime.WriteASCIIString(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Cookie
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.NameAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.NameHandle
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Nextentry
		if m == nil {
			nField, err = runtime.WriteBool(w, false)
			nTotal += nField
			if err != nil {
				goto done
			}
		} else {
			nField, err = runtime.WriteBool(w, true)
			nTotal += nField
			if err != nil {
				goto done
			}
			{
				nField, err = m.WriteTo(w)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
	}
done:
	return
}

func (m *Entryplus3) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 8
	{
		m := m.Name
		nTotal += (len(m) + 7) &^ 3
	}
	nTotal += 8
	{
		m := m.NameAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := m.NameHandle
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := m.Nextentry
		nTotal += 4
		if m != nil {
			nTotal += m.GetEncodedSizeBytes()
		}
	}
	return
}

// Type definition "dirlistplus3".

type Dirlistplus3 struct {
	Entries *Entryplus3
	Eof     bool
}

func (m *Dirlistplus3) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Entries
		var m *Entryplus3
		var isSet bool
		isSet, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if isSet {
			mParent := &m
			var m Entryplus3
			nField, err = m.ReadFrom(r)
			nTotal += nField
			if err != nil {
				goto done
			}
			*mParent = &m
		}
		*mSave = m
	}
	{
		mSave := &m.Eof
		var m bool
		m, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Dirlistplus3) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Entries
		if m == nil {
			nField, err = runtime.WriteBool(w, false)
			nTotal += nField
			if err != nil {
				goto done
			}
		} else {
			nField, err = runtime.WriteBool(w, true)
			nTotal += nField
			if err != nil {
				goto done
			}
			{
				nField, err = m.WriteTo(w)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
	}
	{
		m := m.Eof
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Dirlistplus3) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.Entries
		nTotal += 4
		if m != nil {
			nTotal += m.GetEncodedSizeBytes()
		}
	}
	nTotal += 4
	return
}

// Type definition "READDIRPLUS3resok".

type Readdirplus3resok struct {
	DirAttributes PostOpAttr
	Cookieverf    [8]byte
	Reply         Dirlistplus3
}

func (m *Readdirplus3resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.DirAttributes
		var m PostOpAttr
		m, nField, err = ReadPostOpAttr(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.Cookieverf
		nField, err = runtime.ReadFixedLengthOpaque(r, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Reply
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Readdirplus3resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.DirAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Cookieverf
		nField, err = runtime.WriteFixedLengthOpaque(w, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Reply
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Readdirplus3resok) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.DirAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	nTotal += 8
	{
		m := &m.Reply
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "READDIRPLUS3resfail".

type Readdirplus3resfail struct {
	DirAttributes PostOpAttr
}

func (m *Readdirplus3resfail) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.DirAttributes
		var m PostOpAttr
		m, nField, err = ReadPostOpAttr(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Readdirplus3resfail) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.DirAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Readdirplus3resfail) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.DirAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "READDIRPLUS3res".

type Readdirplus3res interface {
	isReaddirplus3res()
	GetStatus() Nfsstat3
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadReaddirplus3res(r io.Reader) (m Readdirplus3res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat3
	{
		var m Nfsstat3
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Readdirplus3res_NFS3_OK
		{
			m := &mArm
			{
				m := &m.Resok
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Readdirplus3res_default
		{
			m := &mArm
			m.Status = discriminant
			{
				m := &m.Resfail
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	}
done:
	return
}

func readReaddirplus3resStatus(r io.Reader) (m Nfsstat3, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeReaddirplus3resStatus(w io.Writer, m Nfsstat3) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const readdirplus3resStatusEncodedSizeBytes = 4

type Readdirplus3res_NFS3_OK struct {
	Resok Readdirplus3resok
}

func (m *Readdirplus3res_NFS3_OK) isReaddirplus3res() {}

func (m *Readdirplus3res_NFS3_OK) GetStatus() Nfsstat3 {
	return 0
}

func (m *Readdirplus3res_NFS3_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat3 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Readdirplus3res_NFS3_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resok
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Readdirplus3res_default struct {
	Status  Nfsstat3
	Resfail Readdirplus3resfail
}

func (m *Readdirplus3res_default) isReaddirplus3res() {}

func (m *Readdirplus3res_default) GetStatus() Nfsstat3 {
	return m.Status
}

func (m *Readdirplus3res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resfail
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Readdirplus3res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resfail
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "FSSTAT3args".

type Fsstat3args struct {
	Fsroot NfsFh3
}

func (m *Fsstat3args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Fsroot
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Fsstat3args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Fsroot
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Fsstat3args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.Fsroot
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "FSSTAT3resok".

type Fsstat3resok struct {
	ObjAttributes PostOpAttr
	Tbytes        uint64
	Fbytes        uint64
	Abytes        uint64
	Tfiles        uint64
	Ffiles        uint64
	Afiles        uint64
	Invarsec      uint32
}

func (m *Fsstat3resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.ObjAttributes
		var m PostOpAttr
		m, nField, err = ReadPostOpAttr(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Tbytes
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Fbytes
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Abytes
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Tfiles
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Ffiles
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Afiles
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Invarsec
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Fsstat3resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.ObjAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Tbytes
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Fbytes
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Abytes
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Tfiles
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Ffiles
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Afiles
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Invarsec
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Fsstat3resok) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.ObjAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	nTotal += 8
	nTotal += 8
	nTotal += 8
	nTotal += 8
	nTotal += 8
	nTotal += 8
	nTotal += 4
	return
}

// Type definition "FSSTAT3resfail".

type Fsstat3resfail struct {
	ObjAttributes PostOpAttr
}

func (m *Fsstat3resfail) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.ObjAttributes
		var m PostOpAttr
		m, nField, err = ReadPostOpAttr(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Fsstat3resfail) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.ObjAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Fsstat3resfail) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.ObjAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "FSSTAT3res".

type Fsstat3res interface {
	isFsstat3res()
	GetStatus() Nfsstat3
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadFsstat3res(r io.Reader) (m Fsstat3res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat3
	{
		var m Nfsstat3
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Fsstat3res_NFS3_OK
		{
			m := &mArm
			{
				m := &m.Resok
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Fsstat3res_default
		{
			m := &mArm
			m.Status = discriminant
			{
				m := &m.Resfail
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	}
done:
	return
}

func readFsstat3resStatus(r io.Reader) (m Nfsstat3, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeFsstat3resStatus(w io.Writer, m Nfsstat3) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const fsstat3resStatusEncodedSizeBytes = 4

type Fsstat3res_NFS3_OK struct {
	Resok Fsstat3resok
}

func (m *Fsstat3res_NFS3_OK) isFsstat3res() {}

func (m *Fsstat3res_NFS3_OK) GetStatus() Nfsstat3 {
	return 0
}

func (m *Fsstat3res_NFS3_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat3 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Fsstat3res_NFS3_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resok
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Fsstat3res_default struct {
	Status  Nfsstat3
	Resfail Fsstat3resfail
}

func (m *Fsstat3res_default) isFsstat3res() {}

func (m *Fsstat3res_default) GetStatus() Nfsstat3 {
	return m.Status
}

func (m *Fsstat3res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resfail
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Fsstat3res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resfail
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

const FSF3_LINK = 1

const FSF3_SYMLINK = 2

const FSF3_HOMOGENEOUS = 8

const FSF3_CANSETTIME = 16

// Type definition "FSINFO3args".

type Fsinfo3args struct {
	Fsroot NfsFh3
}

func (m *Fsinfo3args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Fsroot
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Fsinfo3args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Fsroot
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Fsinfo3args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.Fsroot
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "FSINFO3resok".

type Fsinfo3resok struct {
	ObjAttributes PostOpAttr
	Rtmax         uint32
	Rtpref        uint32
	Rtmult        uint32
	Wtmax         uint32
	Wtpref        uint32
	Wtmult        uint32
	Dtpref        uint32
	Maxfilesize   uint64
	TimeDelta     Nfstime3
	Properties    uint32
}

func (m *Fsinfo3resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.ObjAttributes
		var m PostOpAttr
		m, nField, err = ReadPostOpAttr(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Rtmax
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Rtpref
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Rtmult
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Wtmax
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Wtpref
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Wtmult
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Dtpref
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Maxfilesize
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.TimeDelta
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.Properties
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Fsinfo3resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.ObjAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Rtmax
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Rtpref
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Rtmult
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Wtmax
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Wtpref
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Wtmult
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Dtpref
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Maxfilesize
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.TimeDelta
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Properties
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Fsinfo3resok) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.ObjAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	nTotal += 4
	nTotal += 4
	nTotal += 4
	nTotal += 4
	nTotal += 4
	nTotal += 4
	nTotal += 4
	nTotal += 8
	nTotal += 8
	nTotal += 4
	return
}

// Type definition "FSINFO3resfail".

type Fsinfo3resfail struct {
	ObjAttributes PostOpAttr
}

func (m *Fsinfo3resfail) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.ObjAttributes
		var m PostOpAttr
		m, nField, err = ReadPostOpAttr(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Fsinfo3resfail) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.ObjAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Fsinfo3resfail) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.ObjAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "FSINFO3res".

type Fsinfo3res interface {
	isFsinfo3res()
	GetStatus() Nfsstat3
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadFsinfo3res(r io.Reader) (m Fsinfo3res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat3
	{
		var m Nfsstat3
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Fsinfo3res_NFS3_OK
		{
			m := &mArm
			{
				m := &m.Resok
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Fsinfo3res_default
		{
			m := &mArm
			m.Status = discriminant
			{
				m := &m.Resfail
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	}
done:
	return
}

func readFsinfo3resStatus(r io.Reader) (m Nfsstat3, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeFsinfo3resStatus(w io.Writer, m Nfsstat3) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const fsinfo3resStatusEncodedSizeBytes = 4

type Fsinfo3res_NFS3_OK struct {
	Resok Fsinfo3resok
}

func (m *Fsinfo3res_NFS3_OK) isFsinfo3res() {}

func (m *Fsinfo3res_NFS3_OK) GetStatus() Nfsstat3 {
	return 0
}

func (m *Fsinfo3res_NFS3_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat3 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Fsinfo3res_NFS3_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resok
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Fsinfo3res_default struct {
	Status  Nfsstat3
	Resfail Fsinfo3resfail
}

func (m *Fsinfo3res_default) isFsinfo3res() {}

func (m *Fsinfo3res_default) GetStatus() Nfsstat3 {
	return m.Status
}

func (m *Fsinfo3res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resfail
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Fsinfo3res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resfail
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "PATHCONF3args".

type Pathconf3args struct {
	Object NfsFh3
}

func (m *Pathconf3args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Object
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Pathconf3args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Object
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Pathconf3args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.Object
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "PATHCONF3resok".

type Pathconf3resok struct {
	ObjAttributes   PostOpAttr
	Linkmax         uint32
	NameMax         uint32
	NoTrunc         bool
	ChownRestricted bool
	CaseInsensitive bool
	CasePreserving  bool
}

func (m *Pathconf3resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.ObjAttributes
		var m PostOpAttr
		m, nField, err = ReadPostOpAttr(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Linkmax
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.NameMax
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.NoTrunc
		var m bool
		m, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.ChownRestricted
		var m bool
		m, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.CaseInsensitive
		var m bool
		m, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.CasePreserving
		var m bool
		m, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Pathconf3resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.ObjAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Linkmax
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.NameMax
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.NoTrunc
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.ChownRestricted
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.CaseInsensitive
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.CasePreserving
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Pathconf3resok) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.ObjAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	nTotal += 4
	nTotal += 4
	nTotal += 4
	nTotal += 4
	nTotal += 4
	nTotal += 4
	return
}

// Type definition "PATHCONF3resfail".

type Pathconf3resfail struct {
	ObjAttributes PostOpAttr
}

func (m *Pathconf3resfail) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.ObjAttributes
		var m PostOpAttr
		m, nField, err = ReadPostOpAttr(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Pathconf3resfail) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.ObjAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Pathconf3resfail) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.ObjAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "PATHCONF3res".

type Pathconf3res interface {
	isPathconf3res()
	GetStatus() Nfsstat3
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadPathconf3res(r io.Reader) (m Pathconf3res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat3
	{
		var m Nfsstat3
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Pathconf3res_NFS3_OK
		{
			m := &mArm
			{
				m := &m.Resok
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Pathconf3res_default
		{
			m := &mArm
			m.Status = discriminant
			{
				m := &m.Resfail
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	}
done:
	return
}

func readPathconf3resStatus(r io.Reader) (m Nfsstat3, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writePathconf3resStatus(w io.Writer, m Nfsstat3) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const pathconf3resStatusEncodedSizeBytes = 4

type Pathconf3res_NFS3_OK struct {
	Resok Pathconf3resok
}

func (m *Pathconf3res_NFS3_OK) isPathconf3res() {}

func (m *Pathconf3res_NFS3_OK) GetStatus() Nfsstat3 {
	return 0
}

func (m *Pathconf3res_NFS3_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat3 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Pathconf3res_NFS3_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resok
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Pathconf3res_default struct {
	Status  Nfsstat3
	Resfail Pathconf3resfail
}

func (m *Pathconf3res_default) isPathconf3res() {}

func (m *Pathconf3res_default) GetStatus() Nfsstat3 {
	return m.Status
}

func (m *Pathconf3res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resfail
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Pathconf3res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resfail
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "COMMIT3args".

type Commit3args struct {
	File   NfsFh3
	Offset uint64
	Count  uint32
}

func (m *Commit3args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.File
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.Offset
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Count
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Commit3args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.File
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Offset
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Count
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Commit3args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.File
		nTotal += m.GetEncodedSizeBytes()
	}
	nTotal += 8
	nTotal += 4
	return
}

// Type definition "COMMIT3resok".

type Commit3resok struct {
	FileWcc WccData
	Verf    [8]byte
}

func (m *Commit3resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.FileWcc
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Verf
		nField, err = runtime.ReadFixedLengthOpaque(r, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Commit3resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.FileWcc
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Verf
		nField, err = runtime.WriteFixedLengthOpaque(w, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Commit3resok) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.FileWcc
		nTotal += m.GetEncodedSizeBytes()
	}
	nTotal += 8
	return
}

// Type definition "COMMIT3resfail".

type Commit3resfail struct {
	FileWcc WccData
}

func (m *Commit3resfail) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.FileWcc
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Commit3resfail) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.FileWcc
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Commit3resfail) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.FileWcc
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "COMMIT3res".

type Commit3res interface {
	isCommit3res()
	GetStatus() Nfsstat3
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadCommit3res(r io.Reader) (m Commit3res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat3
	{
		var m Nfsstat3
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Commit3res_NFS3_OK
		{
			m := &mArm
			{
				m := &m.Resok
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Commit3res_default
		{
			m := &mArm
			m.Status = discriminant
			{
				m := &m.Resfail
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	}
done:
	return
}

func readCommit3resStatus(r io.Reader) (m Nfsstat3, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeCommit3resStatus(w io.Writer, m Nfsstat3) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const commit3resStatusEncodedSizeBytes = 4

type Commit3res_NFS3_OK struct {
	Resok Commit3resok
}

func (m *Commit3res_NFS3_OK) isCommit3res() {}

func (m *Commit3res_NFS3_OK) GetStatus() Nfsstat3 {
	return 0
}

func (m *Commit3res_NFS3_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat3 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Commit3res_NFS3_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resok
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Commit3res_default struct {
	Status  Nfsstat3
	Resfail Commit3resfail
}

func (m *Commit3res_default) isCommit3res() {}

func (m *Commit3res_default) GetStatus() Nfsstat3 {
	return m.Status
}

func (m *Commit3res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resfail
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Commit3res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resfail
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}
