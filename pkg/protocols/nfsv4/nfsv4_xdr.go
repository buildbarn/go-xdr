// Code generated by go-xdr. DO NOT EDIT.
package nfsv4

import (
	"context"
	"fmt"
	"io"

	"github.com/buildbarn/go-xdr/pkg/protocols/rpcv2"
	"github.com/buildbarn/go-xdr/pkg/runtime"
)

// Type definition "int32_t".

type Int32T = int32

func ReadInt32T(r io.Reader) (m int32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteInt32T(w io.Writer, m int32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Int32TEncodedSizeBytes = 4

// Type definition "uint32_t".

type Uint32T = uint32

func ReadUint32T(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteUint32T(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Uint32TEncodedSizeBytes = 4

// Type definition "int64_t".

type Int64T = int64

func ReadInt64T(r io.Reader) (m, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteInt64T(w io.Writer, m int64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Int64TEncodedSizeBytes = 8

// Type definition "uint64_t".

type Uint64T = uint64

func ReadUint64T(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteUint64T(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Uint64TEncodedSizeBytes = 8

const NFS4_FHSIZE = 128

const NFS4_VERIFIER_SIZE = 8

const NFS4_OTHER_SIZE = 12

const NFS4_OPAQUE_LIMIT = 1024

const NFS4_INT64_MAX = 9223372036854775807

const NFS4_UINT64_MAX = 18446744073709551615

const NFS4_INT32_MAX = 2147483647

const NFS4_UINT32_MAX = 4294967295

// Type definition "nfs_ftype4".

type NfsFtype4 int32

func (mParent *NfsFtype4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	var m NfsFtype4
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	*mParent = m
done:
	return
}

func (m NfsFtype4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsFtype4EncodedSizeBytes = 4

const NF4ATTRDIR NfsFtype4 = 8

const NF4BLK NfsFtype4 = 3

const NF4CHR NfsFtype4 = 4

const NF4DIR NfsFtype4 = 2

const NF4FIFO NfsFtype4 = 7

const NF4LNK NfsFtype4 = 5

const NF4NAMEDATTR NfsFtype4 = 9

const NF4REG NfsFtype4 = 1

const NF4SOCK NfsFtype4 = 6

var NfsFtype4_name = map[NfsFtype4]string{
	8: "NF4ATTRDIR",
	3: "NF4BLK",
	4: "NF4CHR",
	2: "NF4DIR",
	7: "NF4FIFO",
	5: "NF4LNK",
	9: "NF4NAMEDATTR",
	1: "NF4REG",
	6: "NF4SOCK",
}

// Type definition "nfsstat4".

type Nfsstat4 int32

func (mParent *Nfsstat4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	var m Nfsstat4
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	*mParent = m
done:
	return
}

func (m Nfsstat4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Nfsstat4EncodedSizeBytes = 4

const NFS4ERR_ACCESS Nfsstat4 = 13

const NFS4ERR_ADMIN_REVOKED Nfsstat4 = 10047

const NFS4ERR_ATTRNOTSUPP Nfsstat4 = 10032

const NFS4ERR_BADCHAR Nfsstat4 = 10040

const NFS4ERR_BADHANDLE Nfsstat4 = 10001

const NFS4ERR_BADNAME Nfsstat4 = 10041

const NFS4ERR_BADOWNER Nfsstat4 = 10039

const NFS4ERR_BADTYPE Nfsstat4 = 10007

const NFS4ERR_BADXDR Nfsstat4 = 10036

const NFS4ERR_BAD_COOKIE Nfsstat4 = 10003

const NFS4ERR_BAD_RANGE Nfsstat4 = 10042

const NFS4ERR_BAD_SEQID Nfsstat4 = 10026

const NFS4ERR_BAD_STATEID Nfsstat4 = 10025

const NFS4ERR_CB_PATH_DOWN Nfsstat4 = 10048

const NFS4ERR_CLID_INUSE Nfsstat4 = 10017

const NFS4ERR_DEADLOCK Nfsstat4 = 10045

const NFS4ERR_DELAY Nfsstat4 = 10008

const NFS4ERR_DENIED Nfsstat4 = 10010

const NFS4ERR_DQUOT Nfsstat4 = 69

const NFS4ERR_EXIST Nfsstat4 = 17

const NFS4ERR_EXPIRED Nfsstat4 = 10011

const NFS4ERR_FBIG Nfsstat4 = 27

const NFS4ERR_FHEXPIRED Nfsstat4 = 10014

const NFS4ERR_FILE_OPEN Nfsstat4 = 10046

const NFS4ERR_GRACE Nfsstat4 = 10013

const NFS4ERR_INVAL Nfsstat4 = 22

const NFS4ERR_IO Nfsstat4 = 5

const NFS4ERR_ISDIR Nfsstat4 = 21

const NFS4ERR_LEASE_MOVED Nfsstat4 = 10031

const NFS4ERR_LOCKED Nfsstat4 = 10012

const NFS4ERR_LOCKS_HELD Nfsstat4 = 10037

const NFS4ERR_LOCK_NOTSUPP Nfsstat4 = 10043

const NFS4ERR_LOCK_RANGE Nfsstat4 = 10028

const NFS4ERR_MINOR_VERS_MISMATCH Nfsstat4 = 10021

const NFS4ERR_MLINK Nfsstat4 = 31

const NFS4ERR_MOVED Nfsstat4 = 10019

const NFS4ERR_NAMETOOLONG Nfsstat4 = 63

const NFS4ERR_NOENT Nfsstat4 = 2

const NFS4ERR_NOFILEHANDLE Nfsstat4 = 10020

const NFS4ERR_NOSPC Nfsstat4 = 28

const NFS4ERR_NOTDIR Nfsstat4 = 20

const NFS4ERR_NOTEMPTY Nfsstat4 = 66

const NFS4ERR_NOTSUPP Nfsstat4 = 10004

const NFS4ERR_NOT_SAME Nfsstat4 = 10027

const NFS4ERR_NO_GRACE Nfsstat4 = 10033

const NFS4ERR_NXIO Nfsstat4 = 6

const NFS4ERR_OLD_STATEID Nfsstat4 = 10024

const NFS4ERR_OPENMODE Nfsstat4 = 10038

const NFS4ERR_OP_ILLEGAL Nfsstat4 = 10044

const NFS4ERR_PERM Nfsstat4 = 1

const NFS4ERR_RECLAIM_BAD Nfsstat4 = 10034

const NFS4ERR_RECLAIM_CONFLICT Nfsstat4 = 10035

const NFS4ERR_RESOURCE Nfsstat4 = 10018

const NFS4ERR_RESTOREFH Nfsstat4 = 10030

const NFS4ERR_ROFS Nfsstat4 = 30

const NFS4ERR_SAME Nfsstat4 = 10009

const NFS4ERR_SERVERFAULT Nfsstat4 = 10006

const NFS4ERR_SHARE_DENIED Nfsstat4 = 10015

const NFS4ERR_STALE Nfsstat4 = 70

const NFS4ERR_STALE_CLIENTID Nfsstat4 = 10022

const NFS4ERR_STALE_STATEID Nfsstat4 = 10023

const NFS4ERR_SYMLINK Nfsstat4 = 10029

const NFS4ERR_TOOSMALL Nfsstat4 = 10005

const NFS4ERR_WRONGSEC Nfsstat4 = 10016

const NFS4ERR_XDEV Nfsstat4 = 18

const NFS4_OK Nfsstat4 = 0

var Nfsstat4_name = map[Nfsstat4]string{
	13:    "NFS4ERR_ACCESS",
	10047: "NFS4ERR_ADMIN_REVOKED",
	10032: "NFS4ERR_ATTRNOTSUPP",
	10040: "NFS4ERR_BADCHAR",
	10001: "NFS4ERR_BADHANDLE",
	10041: "NFS4ERR_BADNAME",
	10039: "NFS4ERR_BADOWNER",
	10007: "NFS4ERR_BADTYPE",
	10036: "NFS4ERR_BADXDR",
	10003: "NFS4ERR_BAD_COOKIE",
	10042: "NFS4ERR_BAD_RANGE",
	10026: "NFS4ERR_BAD_SEQID",
	10025: "NFS4ERR_BAD_STATEID",
	10048: "NFS4ERR_CB_PATH_DOWN",
	10017: "NFS4ERR_CLID_INUSE",
	10045: "NFS4ERR_DEADLOCK",
	10008: "NFS4ERR_DELAY",
	10010: "NFS4ERR_DENIED",
	69:    "NFS4ERR_DQUOT",
	17:    "NFS4ERR_EXIST",
	10011: "NFS4ERR_EXPIRED",
	27:    "NFS4ERR_FBIG",
	10014: "NFS4ERR_FHEXPIRED",
	10046: "NFS4ERR_FILE_OPEN",
	10013: "NFS4ERR_GRACE",
	22:    "NFS4ERR_INVAL",
	5:     "NFS4ERR_IO",
	21:    "NFS4ERR_ISDIR",
	10031: "NFS4ERR_LEASE_MOVED",
	10012: "NFS4ERR_LOCKED",
	10037: "NFS4ERR_LOCKS_HELD",
	10043: "NFS4ERR_LOCK_NOTSUPP",
	10028: "NFS4ERR_LOCK_RANGE",
	10021: "NFS4ERR_MINOR_VERS_MISMATCH",
	31:    "NFS4ERR_MLINK",
	10019: "NFS4ERR_MOVED",
	63:    "NFS4ERR_NAMETOOLONG",
	2:     "NFS4ERR_NOENT",
	10020: "NFS4ERR_NOFILEHANDLE",
	28:    "NFS4ERR_NOSPC",
	20:    "NFS4ERR_NOTDIR",
	66:    "NFS4ERR_NOTEMPTY",
	10004: "NFS4ERR_NOTSUPP",
	10027: "NFS4ERR_NOT_SAME",
	10033: "NFS4ERR_NO_GRACE",
	6:     "NFS4ERR_NXIO",
	10024: "NFS4ERR_OLD_STATEID",
	10038: "NFS4ERR_OPENMODE",
	10044: "NFS4ERR_OP_ILLEGAL",
	1:     "NFS4ERR_PERM",
	10034: "NFS4ERR_RECLAIM_BAD",
	10035: "NFS4ERR_RECLAIM_CONFLICT",
	10018: "NFS4ERR_RESOURCE",
	10030: "NFS4ERR_RESTOREFH",
	30:    "NFS4ERR_ROFS",
	10009: "NFS4ERR_SAME",
	10006: "NFS4ERR_SERVERFAULT",
	10015: "NFS4ERR_SHARE_DENIED",
	70:    "NFS4ERR_STALE",
	10022: "NFS4ERR_STALE_CLIENTID",
	10023: "NFS4ERR_STALE_STATEID",
	10029: "NFS4ERR_SYMLINK",
	10005: "NFS4ERR_TOOSMALL",
	10016: "NFS4ERR_WRONGSEC",
	18:    "NFS4ERR_XDEV",
	0:     "NFS4_OK",
}

// Type definition "attrlist4".

type Attrlist4 = []byte

func ReadAttrlist4(r io.Reader) (m []byte, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadVariableLengthOpaque(r, 4294967295)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteAttrlist4(w io.Writer, m []byte) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteVariableLengthOpaque(w, 4294967295, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetAttrlist4EncodedSizeBytes(m []byte) (nTotal int) {
	nTotal += (len(m) + 7) &^ 3
	return
}

// Type definition "bitmap4".

type Bitmap4 = []uint32

func ReadBitmap4(r io.Reader) (m []uint32, nTotal int64, err error) {
	var nField int64
	var nElements uint32
	nElements, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	if nElements > 4294967295 {
		err = fmt.Errorf("size of %d elements exceeds bitmap4's maximum of 4294967295 elements", nElements)
		goto done
	}
	for nElements > 0 {
		nElements--
		mParent := &m
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mParent = append(*mParent, m)
	}
done:
	return
}

func WriteBitmap4(w io.Writer, m []uint32) (nTotal int64, err error) {
	var nField int64
	if uint(len(m)) > 4294967295 {
		err = fmt.Errorf("size of %d elements exceeds bitmap4's maximum of 4294967295 elements", len(m))
		goto done
	}
	nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
	nTotal += nField
	if err != nil {
		goto done
	}
	for _, m := range m {
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func GetBitmap4EncodedSizeBytes(m []uint32) (nTotal int) {
	nTotal += 4 + 4*len(m)
	return
}

// Type definition "changeid4".

type Changeid4 = uint64

func ReadChangeid4(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteChangeid4(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Changeid4EncodedSizeBytes = 8

// Type definition "clientid4".

type Clientid4 = uint64

func ReadClientid4(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteClientid4(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Clientid4EncodedSizeBytes = 8

// Type definition "count4".

type Count4 = uint32

func ReadCount4(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteCount4(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Count4EncodedSizeBytes = 4

// Type definition "length4".

type Length4 = uint64

func ReadLength4(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteLength4(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Length4EncodedSizeBytes = 8

// Type definition "mode4".

type Mode4 = uint32

func ReadMode4(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteMode4(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Mode4EncodedSizeBytes = 4

// Type definition "nfs_cookie4".

type NfsCookie4 = uint64

func ReadNfsCookie4(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsCookie4(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsCookie4EncodedSizeBytes = 8

// Type definition "nfs_fh4".

type NfsFh4 = []byte

func ReadNfsFh4(r io.Reader) (m []byte, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadVariableLengthOpaque(r, 128)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsFh4(w io.Writer, m []byte) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteVariableLengthOpaque(w, 128, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetNfsFh4EncodedSizeBytes(m []byte) (nTotal int) {
	nTotal += (len(m) + 7) &^ 3
	return
}

// Type definition "nfs_lease4".

type NfsLease4 = uint32

func ReadNfsLease4(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsLease4(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsLease4EncodedSizeBytes = 4

// Type definition "offset4".

type Offset4 = uint64

func ReadOffset4(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteOffset4(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Offset4EncodedSizeBytes = 8

// Type definition "qop4".

type Qop4 = uint32

func ReadQop4(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteQop4(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Qop4EncodedSizeBytes = 4

// Type definition "sec_oid4".

type SecOid4 = []byte

func ReadSecOid4(r io.Reader) (m []byte, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadVariableLengthOpaque(r, 4294967295)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteSecOid4(w io.Writer, m []byte) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteVariableLengthOpaque(w, 4294967295, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetSecOid4EncodedSizeBytes(m []byte) (nTotal int) {
	nTotal += (len(m) + 7) &^ 3
	return
}

// Type definition "seqid4".

type Seqid4 = uint32

func ReadSeqid4(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteSeqid4(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Seqid4EncodedSizeBytes = 4

// Type definition "utf8str_cis".

type Utf8strCis = string

func ReadUtf8strCis(r io.Reader) (m string, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUTF8String(r, 4294967295)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteUtf8strCis(w io.Writer, m string) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUTF8String(w, 4294967295, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetUtf8strCisEncodedSizeBytes(m string) (nTotal int) {
	nTotal += (len(m) + 7) &^ 3
	return
}

// Type definition "utf8str_cs".

type Utf8strCs = string

func ReadUtf8strCs(r io.Reader) (m string, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUTF8String(r, 4294967295)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteUtf8strCs(w io.Writer, m string) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUTF8String(w, 4294967295, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetUtf8strCsEncodedSizeBytes(m string) (nTotal int) {
	nTotal += (len(m) + 7) &^ 3
	return
}

// Type definition "utf8str_mixed".

type Utf8strMixed = string

func ReadUtf8strMixed(r io.Reader) (m string, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUTF8String(r, 4294967295)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteUtf8strMixed(w io.Writer, m string) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUTF8String(w, 4294967295, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetUtf8strMixedEncodedSizeBytes(m string) (nTotal int) {
	nTotal += (len(m) + 7) &^ 3
	return
}

// Type definition "component4".

type Component4 = string

func ReadComponent4(r io.Reader) (m string, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUTF8String(r, 4294967295)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteComponent4(w io.Writer, m string) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUTF8String(w, 4294967295, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetComponent4EncodedSizeBytes(m string) (nTotal int) {
	nTotal += (len(m) + 7) &^ 3
	return
}

// Type definition "linktext4".

type Linktext4 = []byte

func ReadLinktext4(r io.Reader) (m []byte, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadVariableLengthOpaque(r, 4294967295)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteLinktext4(w io.Writer, m []byte) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteVariableLengthOpaque(w, 4294967295, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetLinktext4EncodedSizeBytes(m []byte) (nTotal int) {
	nTotal += (len(m) + 7) &^ 3
	return
}

// Type definition "ascii_REQUIRED4".

type AsciiRequired4 = string

func ReadAsciiRequired4(r io.Reader) (m string, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUTF8String(r, 4294967295)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteAsciiRequired4(w io.Writer, m string) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUTF8String(w, 4294967295, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetAsciiRequired4EncodedSizeBytes(m string) (nTotal int) {
	nTotal += (len(m) + 7) &^ 3
	return
}

// Type definition "pathname4".

type Pathname4 = []string

func ReadPathname4(r io.Reader) (m []string, nTotal int64, err error) {
	var nField int64
	var nElements uint32
	nElements, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	if nElements > 4294967295 {
		err = fmt.Errorf("size of %d elements exceeds pathname4's maximum of 4294967295 elements", nElements)
		goto done
	}
	for nElements > 0 {
		nElements--
		mParent := &m
		var m string
		m, nField, err = runtime.ReadUTF8String(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mParent = append(*mParent, m)
	}
done:
	return
}

func WritePathname4(w io.Writer, m []string) (nTotal int64, err error) {
	var nField int64
	if uint(len(m)) > 4294967295 {
		err = fmt.Errorf("size of %d elements exceeds pathname4's maximum of 4294967295 elements", len(m))
		goto done
	}
	nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
	nTotal += nField
	if err != nil {
		goto done
	}
	for _, m := range m {
		nField, err = runtime.WriteUTF8String(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func GetPathname4EncodedSizeBytes(m []string) (nTotal int) {
	nTotal += 4
	for _, m := range m {
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "nfs_lockid4".

type NfsLockid4 = uint64

func ReadNfsLockid4(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteNfsLockid4(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsLockid4EncodedSizeBytes = 8

// Type definition "verifier4".

type Verifier4 = [8]byte

func ReadVerifier4(r io.Reader, m *[8]byte) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.ReadFixedLengthOpaque(r, m[:])
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteVerifier4(w io.Writer, m *[8]byte) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteFixedLengthOpaque(w, m[:])
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Verifier4EncodedSizeBytes = 8

// Type definition "nfstime4".

type Nfstime4 struct {
	Seconds  int64
	Nseconds uint32
}

func (m *Nfstime4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Seconds
		var m int64
		m, nField, err = runtime.ReadHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Nseconds
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Nfstime4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Seconds
		nField, err = runtime.WriteHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Nseconds
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Nfstime4EncodedSizeBytes = 12

// Type definition "time_how4".

type TimeHow4 int32

func (mParent *TimeHow4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	var m TimeHow4
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	*mParent = m
done:
	return
}

func (m TimeHow4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const TimeHow4EncodedSizeBytes = 4

const SET_TO_CLIENT_TIME4 TimeHow4 = 1

const SET_TO_SERVER_TIME4 TimeHow4 = 0

var TimeHow4_name = map[TimeHow4]string{
	1: "SET_TO_CLIENT_TIME4",
	0: "SET_TO_SERVER_TIME4",
}

// Type definition "settime4".

type Settime4 interface {
	isSettime4()
	GetSetIt() TimeHow4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadSettime4(r io.Reader) (m Settime4, nTotal int64, err error) {
	var nField int64
	var discriminant TimeHow4
	{
		var m TimeHow4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 1:
		var mArm Settime4_SET_TO_CLIENT_TIME4
		{
			m := &mArm
			{
				m := &m.Time
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Settime4_default
		{
			m := &mArm
			m.SetIt = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readSettime4SetIt(r io.Reader) (m TimeHow4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeSettime4SetIt(w io.Writer, m TimeHow4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const settime4SetItEncodedSizeBytes = 4

type Settime4_SET_TO_CLIENT_TIME4 struct {
	Time Nfstime4
}

func (m *Settime4_SET_TO_CLIENT_TIME4) isSettime4() {}

func (m *Settime4_SET_TO_CLIENT_TIME4) GetSetIt() TimeHow4 {
	return 1
}

func (m *Settime4_SET_TO_CLIENT_TIME4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m TimeHow4 = 1
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Time
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Settime4_SET_TO_CLIENT_TIME4) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 12
	return
}

type Settime4_default struct {
	SetIt TimeHow4
}

func (m *Settime4_default) isSettime4() {}

func (m *Settime4_default) GetSetIt() TimeHow4 {
	return m.SetIt
}

func (m *Settime4_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.SetIt
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Settime4_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "fsid4".

type Fsid4 struct {
	Major uint64
	Minor uint64
}

func (m *Fsid4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Major
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Minor
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Fsid4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Major
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Minor
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Fsid4EncodedSizeBytes = 16

// Type definition "fs_location4".

type FsLocation4 struct {
	Server   []string
	Rootpath []string
}

func (m *FsLocation4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Server
		var m []string
		var nElements uint32
		nElements, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if nElements > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds fs_location4.server's maximum of 4294967295 elements", nElements)
			goto done
		}
		for nElements > 0 {
			nElements--
			mParent := &m
			var m string
			m, nField, err = runtime.ReadUTF8String(r, 4294967295)
			nTotal += nField
			if err != nil {
				goto done
			}
			*mParent = append(*mParent, m)
		}
		*mSave = m
	}
	{
		mSave := &m.Rootpath
		var m []string
		var nElements uint32
		nElements, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if nElements > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds pathname4's maximum of 4294967295 elements", nElements)
			goto done
		}
		for nElements > 0 {
			nElements--
			mParent := &m
			var m string
			m, nField, err = runtime.ReadUTF8String(r, 4294967295)
			nTotal += nField
			if err != nil {
				goto done
			}
			*mParent = append(*mParent, m)
		}
		*mSave = m
	}
done:
	return
}

func (m *FsLocation4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Server
		if uint(len(m)) > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds fs_location4.server's maximum of 4294967295 elements", len(m))
			goto done
		}
		nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
		nTotal += nField
		if err != nil {
			goto done
		}
		for _, m := range m {
			nField, err = runtime.WriteUTF8String(w, 4294967295, m)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
	{
		m := m.Rootpath
		if uint(len(m)) > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds pathname4's maximum of 4294967295 elements", len(m))
			goto done
		}
		nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
		nTotal += nField
		if err != nil {
			goto done
		}
		for _, m := range m {
			nField, err = runtime.WriteUTF8String(w, 4294967295, m)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
done:
	return
}

func (m *FsLocation4) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.Server
		nTotal += 4
		for _, m := range m {
			nTotal += (len(m) + 7) &^ 3
		}
	}
	{
		m := m.Rootpath
		nTotal += 4
		for _, m := range m {
			nTotal += (len(m) + 7) &^ 3
		}
	}
	return
}

// Type definition "fs_locations4".

type FsLocations4 struct {
	FsRoot    []string
	Locations []FsLocation4
}

func (m *FsLocations4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.FsRoot
		var m []string
		var nElements uint32
		nElements, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if nElements > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds pathname4's maximum of 4294967295 elements", nElements)
			goto done
		}
		for nElements > 0 {
			nElements--
			mParent := &m
			var m string
			m, nField, err = runtime.ReadUTF8String(r, 4294967295)
			nTotal += nField
			if err != nil {
				goto done
			}
			*mParent = append(*mParent, m)
		}
		*mSave = m
	}
	{
		mSave := &m.Locations
		var m []FsLocation4
		var nElements uint32
		nElements, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if nElements > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds fs_locations4.locations's maximum of 4294967295 elements", nElements)
			goto done
		}
		for nElements > 0 {
			nElements--
			m = append(m, FsLocation4{})
			m := &m[len(m)-1]
			nField, err = m.ReadFrom(r)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
		*mSave = m
	}
done:
	return
}

func (m *FsLocations4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.FsRoot
		if uint(len(m)) > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds pathname4's maximum of 4294967295 elements", len(m))
			goto done
		}
		nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
		nTotal += nField
		if err != nil {
			goto done
		}
		for _, m := range m {
			nField, err = runtime.WriteUTF8String(w, 4294967295, m)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
	{
		m := m.Locations
		if uint(len(m)) > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds fs_locations4.locations's maximum of 4294967295 elements", len(m))
			goto done
		}
		nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
		nTotal += nField
		if err != nil {
			goto done
		}
		for _, m := range m {
			nField, err = m.WriteTo(w)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
done:
	return
}

func (m *FsLocations4) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.FsRoot
		nTotal += 4
		for _, m := range m {
			nTotal += (len(m) + 7) &^ 3
		}
	}
	{
		m := m.Locations
		nTotal += 4
		for _, m := range m {
			nTotal += m.GetEncodedSizeBytes()
		}
	}
	return
}

const ACL4_SUPPORT_ALLOW_ACL = 1

const ACL4_SUPPORT_DENY_ACL = 2

const ACL4_SUPPORT_AUDIT_ACL = 4

const ACL4_SUPPORT_ALARM_ACL = 8

// Type definition "acetype4".

type Acetype4 = uint32

func ReadAcetype4(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteAcetype4(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Acetype4EncodedSizeBytes = 4

const ACE4_ACCESS_ALLOWED_ACE_TYPE = 0

const ACE4_ACCESS_DENIED_ACE_TYPE = 1

const ACE4_SYSTEM_AUDIT_ACE_TYPE = 2

const ACE4_SYSTEM_ALARM_ACE_TYPE = 3

// Type definition "aceflag4".

type Aceflag4 = uint32

func ReadAceflag4(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteAceflag4(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Aceflag4EncodedSizeBytes = 4

const ACE4_FILE_INHERIT_ACE = 1

const ACE4_DIRECTORY_INHERIT_ACE = 2

const ACE4_NO_PROPAGATE_INHERIT_ACE = 4

const ACE4_INHERIT_ONLY_ACE = 8

const ACE4_SUCCESSFUL_ACCESS_ACE_FLAG = 16

const ACE4_FAILED_ACCESS_ACE_FLAG = 32

const ACE4_IDENTIFIER_GROUP = 64

// Type definition "acemask4".

type Acemask4 = uint32

func ReadAcemask4(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteAcemask4(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Acemask4EncodedSizeBytes = 4

const ACE4_READ_DATA = 1

const ACE4_LIST_DIRECTORY = 1

const ACE4_WRITE_DATA = 2

const ACE4_ADD_FILE = 2

const ACE4_APPEND_DATA = 4

const ACE4_ADD_SUBDIRECTORY = 4

const ACE4_READ_NAMED_ATTRS = 8

const ACE4_WRITE_NAMED_ATTRS = 16

const ACE4_EXECUTE = 32

const ACE4_DELETE_CHILD = 64

const ACE4_READ_ATTRIBUTES = 128

const ACE4_WRITE_ATTRIBUTES = 256

const ACE4_DELETE = 65536

const ACE4_READ_ACL = 131072

const ACE4_WRITE_ACL = 262144

const ACE4_WRITE_OWNER = 524288

const ACE4_SYNCHRONIZE = 1048576

const ACE4_GENERIC_READ = 1179777

const ACE4_GENERIC_WRITE = 1442054

const ACE4_GENERIC_EXECUTE = 1179808

// Type definition "nfsace4".

type Nfsace4 struct {
	Type       uint32
	Flag       uint32
	AccessMask uint32
	Who        string
}

func (m *Nfsace4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Type
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Flag
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.AccessMask
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Who
		var m string
		m, nField, err = runtime.ReadUTF8String(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Nfsace4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Type
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Flag
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.AccessMask
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Who
		nField, err = runtime.WriteUTF8String(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Nfsace4) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	nTotal += 4
	{
		m := m.Who
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

const MODE4_SUID = 2048

const MODE4_SGID = 1024

const MODE4_SVTX = 512

const MODE4_RUSR = 256

const MODE4_WUSR = 128

const MODE4_XUSR = 64

const MODE4_RGRP = 32

const MODE4_WGRP = 16

const MODE4_XGRP = 8

const MODE4_ROTH = 4

const MODE4_WOTH = 2

const MODE4_XOTH = 1

// Type definition "specdata4".

type Specdata4 struct {
	Specdata1 uint32
	Specdata2 uint32
}

func (m *Specdata4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Specdata1
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Specdata2
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Specdata4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Specdata1
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Specdata2
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Specdata4EncodedSizeBytes = 8

const FH4_PERSISTENT = 0

const FH4_NOEXPIRE_WITH_OPEN = 1

const FH4_VOLATILE_ANY = 2

const FH4_VOL_MIGRATION = 4

const FH4_VOL_RENAME = 8

// Type definition "fattr4_supported_attrs".

type Fattr4SupportedAttrs = []uint32

func ReadFattr4SupportedAttrs(r io.Reader) (m []uint32, nTotal int64, err error) {
	var nField int64
	var nElements uint32
	nElements, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	if nElements > 4294967295 {
		err = fmt.Errorf("size of %d elements exceeds bitmap4's maximum of 4294967295 elements", nElements)
		goto done
	}
	for nElements > 0 {
		nElements--
		mParent := &m
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mParent = append(*mParent, m)
	}
done:
	return
}

func WriteFattr4SupportedAttrs(w io.Writer, m []uint32) (nTotal int64, err error) {
	var nField int64
	if uint(len(m)) > 4294967295 {
		err = fmt.Errorf("size of %d elements exceeds bitmap4's maximum of 4294967295 elements", len(m))
		goto done
	}
	nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
	nTotal += nField
	if err != nil {
		goto done
	}
	for _, m := range m {
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func GetFattr4SupportedAttrsEncodedSizeBytes(m []uint32) (nTotal int) {
	nTotal += 4 + 4*len(m)
	return
}

// Type definition "fattr4_type".

type Fattr4Type = NfsFtype4

func ReadFattr4Type(r io.Reader) (m NfsFtype4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4Type(w io.Writer, m NfsFtype4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4TypeEncodedSizeBytes = 4

// Type definition "fattr4_fh_expire_type".

type Fattr4FhExpireType = uint32

func ReadFattr4FhExpireType(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4FhExpireType(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4FhExpireTypeEncodedSizeBytes = 4

// Type definition "fattr4_change".

type Fattr4Change = uint64

func ReadFattr4Change(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4Change(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4ChangeEncodedSizeBytes = 8

// Type definition "fattr4_size".

type Fattr4Size = uint64

func ReadFattr4Size(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4Size(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4SizeEncodedSizeBytes = 8

// Type definition "fattr4_link_support".

type Fattr4LinkSupport = bool

func ReadFattr4LinkSupport(r io.Reader) (m bool, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadBool(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4LinkSupport(w io.Writer, m bool) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteBool(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4LinkSupportEncodedSizeBytes = 4

// Type definition "fattr4_symlink_support".

type Fattr4SymlinkSupport = bool

func ReadFattr4SymlinkSupport(r io.Reader) (m bool, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadBool(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4SymlinkSupport(w io.Writer, m bool) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteBool(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4SymlinkSupportEncodedSizeBytes = 4

// Type definition "fattr4_named_attr".

type Fattr4NamedAttr = bool

func ReadFattr4NamedAttr(r io.Reader) (m bool, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadBool(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4NamedAttr(w io.Writer, m bool) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteBool(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4NamedAttrEncodedSizeBytes = 4

// Type definition "fattr4_fsid".

type Fattr4Fsid = Fsid4

func ReadFattr4Fsid(r io.Reader, m *Fsid4) (nTotal int64, err error) {
	var nField int64
	nField, err = m.ReadFrom(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4Fsid(w io.Writer, m *Fsid4) (nTotal int64, err error) {
	var nField int64
	nField, err = m.WriteTo(w)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4FsidEncodedSizeBytes = 16

// Type definition "fattr4_unique_handles".

type Fattr4UniqueHandles = bool

func ReadFattr4UniqueHandles(r io.Reader) (m bool, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadBool(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4UniqueHandles(w io.Writer, m bool) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteBool(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4UniqueHandlesEncodedSizeBytes = 4

// Type definition "fattr4_lease_time".

type Fattr4LeaseTime = uint32

func ReadFattr4LeaseTime(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4LeaseTime(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4LeaseTimeEncodedSizeBytes = 4

// Type definition "fattr4_rdattr_error".

type Fattr4RdattrError = Nfsstat4

func ReadFattr4RdattrError(r io.Reader) (m Nfsstat4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4RdattrError(w io.Writer, m Nfsstat4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4RdattrErrorEncodedSizeBytes = 4

// Type definition "fattr4_acl".

type Fattr4Acl = []Nfsace4

func ReadFattr4Acl(r io.Reader) (m []Nfsace4, nTotal int64, err error) {
	var nField int64
	var nElements uint32
	nElements, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	if nElements > 4294967295 {
		err = fmt.Errorf("size of %d elements exceeds fattr4_acl's maximum of 4294967295 elements", nElements)
		goto done
	}
	for nElements > 0 {
		nElements--
		m = append(m, Nfsace4{})
		m := &m[len(m)-1]
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func WriteFattr4Acl(w io.Writer, m []Nfsace4) (nTotal int64, err error) {
	var nField int64
	if uint(len(m)) > 4294967295 {
		err = fmt.Errorf("size of %d elements exceeds fattr4_acl's maximum of 4294967295 elements", len(m))
		goto done
	}
	nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
	nTotal += nField
	if err != nil {
		goto done
	}
	for _, m := range m {
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func GetFattr4AclEncodedSizeBytes(m []Nfsace4) (nTotal int) {
	nTotal += 4
	for _, m := range m {
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "fattr4_aclsupport".

type Fattr4Aclsupport = uint32

func ReadFattr4Aclsupport(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4Aclsupport(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4AclsupportEncodedSizeBytes = 4

// Type definition "fattr4_archive".

type Fattr4Archive = bool

func ReadFattr4Archive(r io.Reader) (m bool, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadBool(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4Archive(w io.Writer, m bool) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteBool(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4ArchiveEncodedSizeBytes = 4

// Type definition "fattr4_cansettime".

type Fattr4Cansettime = bool

func ReadFattr4Cansettime(r io.Reader) (m bool, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadBool(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4Cansettime(w io.Writer, m bool) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteBool(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4CansettimeEncodedSizeBytes = 4

// Type definition "fattr4_case_insensitive".

type Fattr4CaseInsensitive = bool

func ReadFattr4CaseInsensitive(r io.Reader) (m bool, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadBool(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4CaseInsensitive(w io.Writer, m bool) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteBool(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4CaseInsensitiveEncodedSizeBytes = 4

// Type definition "fattr4_case_preserving".

type Fattr4CasePreserving = bool

func ReadFattr4CasePreserving(r io.Reader) (m bool, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadBool(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4CasePreserving(w io.Writer, m bool) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteBool(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4CasePreservingEncodedSizeBytes = 4

// Type definition "fattr4_chown_restricted".

type Fattr4ChownRestricted = bool

func ReadFattr4ChownRestricted(r io.Reader) (m bool, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadBool(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4ChownRestricted(w io.Writer, m bool) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteBool(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4ChownRestrictedEncodedSizeBytes = 4

// Type definition "fattr4_fileid".

type Fattr4Fileid = uint64

func ReadFattr4Fileid(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4Fileid(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4FileidEncodedSizeBytes = 8

// Type definition "fattr4_files_avail".

type Fattr4FilesAvail = uint64

func ReadFattr4FilesAvail(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4FilesAvail(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4FilesAvailEncodedSizeBytes = 8

// Type definition "fattr4_filehandle".

type Fattr4Filehandle = []byte

func ReadFattr4Filehandle(r io.Reader) (m []byte, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadVariableLengthOpaque(r, 128)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4Filehandle(w io.Writer, m []byte) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteVariableLengthOpaque(w, 128, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetFattr4FilehandleEncodedSizeBytes(m []byte) (nTotal int) {
	nTotal += (len(m) + 7) &^ 3
	return
}

// Type definition "fattr4_files_free".

type Fattr4FilesFree = uint64

func ReadFattr4FilesFree(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4FilesFree(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4FilesFreeEncodedSizeBytes = 8

// Type definition "fattr4_files_total".

type Fattr4FilesTotal = uint64

func ReadFattr4FilesTotal(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4FilesTotal(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4FilesTotalEncodedSizeBytes = 8

// Type definition "fattr4_fs_locations".

type Fattr4FsLocations = FsLocations4

func ReadFattr4FsLocations(r io.Reader, m *FsLocations4) (nTotal int64, err error) {
	var nField int64
	nField, err = m.ReadFrom(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4FsLocations(w io.Writer, m *FsLocations4) (nTotal int64, err error) {
	var nField int64
	nField, err = m.WriteTo(w)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetFattr4FsLocationsEncodedSizeBytes(m *FsLocations4) (nTotal int) {
	nTotal += m.GetEncodedSizeBytes()
	return
}

// Type definition "fattr4_hidden".

type Fattr4Hidden = bool

func ReadFattr4Hidden(r io.Reader) (m bool, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadBool(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4Hidden(w io.Writer, m bool) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteBool(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4HiddenEncodedSizeBytes = 4

// Type definition "fattr4_homogeneous".

type Fattr4Homogeneous = bool

func ReadFattr4Homogeneous(r io.Reader) (m bool, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadBool(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4Homogeneous(w io.Writer, m bool) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteBool(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4HomogeneousEncodedSizeBytes = 4

// Type definition "fattr4_maxfilesize".

type Fattr4Maxfilesize = uint64

func ReadFattr4Maxfilesize(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4Maxfilesize(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4MaxfilesizeEncodedSizeBytes = 8

// Type definition "fattr4_maxlink".

type Fattr4Maxlink = uint32

func ReadFattr4Maxlink(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4Maxlink(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4MaxlinkEncodedSizeBytes = 4

// Type definition "fattr4_maxname".

type Fattr4Maxname = uint32

func ReadFattr4Maxname(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4Maxname(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4MaxnameEncodedSizeBytes = 4

// Type definition "fattr4_maxread".

type Fattr4Maxread = uint64

func ReadFattr4Maxread(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4Maxread(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4MaxreadEncodedSizeBytes = 8

// Type definition "fattr4_maxwrite".

type Fattr4Maxwrite = uint64

func ReadFattr4Maxwrite(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4Maxwrite(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4MaxwriteEncodedSizeBytes = 8

// Type definition "fattr4_mimetype".

type Fattr4Mimetype = string

func ReadFattr4Mimetype(r io.Reader) (m string, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUTF8String(r, 4294967295)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4Mimetype(w io.Writer, m string) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUTF8String(w, 4294967295, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetFattr4MimetypeEncodedSizeBytes(m string) (nTotal int) {
	nTotal += (len(m) + 7) &^ 3
	return
}

// Type definition "fattr4_mode".

type Fattr4Mode = uint32

func ReadFattr4Mode(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4Mode(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4ModeEncodedSizeBytes = 4

// Type definition "fattr4_mounted_on_fileid".

type Fattr4MountedOnFileid = uint64

func ReadFattr4MountedOnFileid(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4MountedOnFileid(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4MountedOnFileidEncodedSizeBytes = 8

// Type definition "fattr4_no_trunc".

type Fattr4NoTrunc = bool

func ReadFattr4NoTrunc(r io.Reader) (m bool, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadBool(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4NoTrunc(w io.Writer, m bool) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteBool(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4NoTruncEncodedSizeBytes = 4

// Type definition "fattr4_numlinks".

type Fattr4Numlinks = uint32

func ReadFattr4Numlinks(r io.Reader) (m uint32, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4Numlinks(w io.Writer, m uint32) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedInt(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4NumlinksEncodedSizeBytes = 4

// Type definition "fattr4_owner".

type Fattr4Owner = string

func ReadFattr4Owner(r io.Reader) (m string, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUTF8String(r, 4294967295)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4Owner(w io.Writer, m string) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUTF8String(w, 4294967295, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetFattr4OwnerEncodedSizeBytes(m string) (nTotal int) {
	nTotal += (len(m) + 7) &^ 3
	return
}

// Type definition "fattr4_owner_group".

type Fattr4OwnerGroup = string

func ReadFattr4OwnerGroup(r io.Reader) (m string, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUTF8String(r, 4294967295)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4OwnerGroup(w io.Writer, m string) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUTF8String(w, 4294967295, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetFattr4OwnerGroupEncodedSizeBytes(m string) (nTotal int) {
	nTotal += (len(m) + 7) &^ 3
	return
}

// Type definition "fattr4_quota_avail_hard".

type Fattr4QuotaAvailHard = uint64

func ReadFattr4QuotaAvailHard(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4QuotaAvailHard(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4QuotaAvailHardEncodedSizeBytes = 8

// Type definition "fattr4_quota_avail_soft".

type Fattr4QuotaAvailSoft = uint64

func ReadFattr4QuotaAvailSoft(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4QuotaAvailSoft(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4QuotaAvailSoftEncodedSizeBytes = 8

// Type definition "fattr4_quota_used".

type Fattr4QuotaUsed = uint64

func ReadFattr4QuotaUsed(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4QuotaUsed(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4QuotaUsedEncodedSizeBytes = 8

// Type definition "fattr4_rawdev".

type Fattr4Rawdev = Specdata4

func ReadFattr4Rawdev(r io.Reader, m *Specdata4) (nTotal int64, err error) {
	var nField int64
	nField, err = m.ReadFrom(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4Rawdev(w io.Writer, m *Specdata4) (nTotal int64, err error) {
	var nField int64
	nField, err = m.WriteTo(w)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4RawdevEncodedSizeBytes = 8

// Type definition "fattr4_space_avail".

type Fattr4SpaceAvail = uint64

func ReadFattr4SpaceAvail(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4SpaceAvail(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4SpaceAvailEncodedSizeBytes = 8

// Type definition "fattr4_space_free".

type Fattr4SpaceFree = uint64

func ReadFattr4SpaceFree(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4SpaceFree(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4SpaceFreeEncodedSizeBytes = 8

// Type definition "fattr4_space_total".

type Fattr4SpaceTotal = uint64

func ReadFattr4SpaceTotal(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4SpaceTotal(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4SpaceTotalEncodedSizeBytes = 8

// Type definition "fattr4_space_used".

type Fattr4SpaceUsed = uint64

func ReadFattr4SpaceUsed(r io.Reader) (m uint64, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadUnsignedHyper(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4SpaceUsed(w io.Writer, m uint64) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteUnsignedHyper(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4SpaceUsedEncodedSizeBytes = 8

// Type definition "fattr4_system".

type Fattr4System = bool

func ReadFattr4System(r io.Reader) (m bool, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadBool(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4System(w io.Writer, m bool) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteBool(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4SystemEncodedSizeBytes = 4

// Type definition "fattr4_time_access".

type Fattr4TimeAccess = Nfstime4

func ReadFattr4TimeAccess(r io.Reader, m *Nfstime4) (nTotal int64, err error) {
	var nField int64
	nField, err = m.ReadFrom(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4TimeAccess(w io.Writer, m *Nfstime4) (nTotal int64, err error) {
	var nField int64
	nField, err = m.WriteTo(w)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4TimeAccessEncodedSizeBytes = 12

// Type definition "fattr4_time_access_set".

type Fattr4TimeAccessSet = Settime4

func ReadFattr4TimeAccessSet(r io.Reader) (m Settime4, nTotal int64, err error) {
	var nField int64
	m, nField, err = ReadSettime4(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4TimeAccessSet(w io.Writer, m Settime4) (nTotal int64, err error) {
	var nField int64
	nField, err = m.WriteTo(w)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetFattr4TimeAccessSetEncodedSizeBytes(m Settime4) (nTotal int) {
	nTotal += m.GetEncodedSizeBytes()
	return
}

// Type definition "fattr4_time_backup".

type Fattr4TimeBackup = Nfstime4

func ReadFattr4TimeBackup(r io.Reader, m *Nfstime4) (nTotal int64, err error) {
	var nField int64
	nField, err = m.ReadFrom(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4TimeBackup(w io.Writer, m *Nfstime4) (nTotal int64, err error) {
	var nField int64
	nField, err = m.WriteTo(w)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4TimeBackupEncodedSizeBytes = 12

// Type definition "fattr4_time_create".

type Fattr4TimeCreate = Nfstime4

func ReadFattr4TimeCreate(r io.Reader, m *Nfstime4) (nTotal int64, err error) {
	var nField int64
	nField, err = m.ReadFrom(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4TimeCreate(w io.Writer, m *Nfstime4) (nTotal int64, err error) {
	var nField int64
	nField, err = m.WriteTo(w)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4TimeCreateEncodedSizeBytes = 12

// Type definition "fattr4_time_delta".

type Fattr4TimeDelta = Nfstime4

func ReadFattr4TimeDelta(r io.Reader, m *Nfstime4) (nTotal int64, err error) {
	var nField int64
	nField, err = m.ReadFrom(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4TimeDelta(w io.Writer, m *Nfstime4) (nTotal int64, err error) {
	var nField int64
	nField, err = m.WriteTo(w)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4TimeDeltaEncodedSizeBytes = 12

// Type definition "fattr4_time_metadata".

type Fattr4TimeMetadata = Nfstime4

func ReadFattr4TimeMetadata(r io.Reader, m *Nfstime4) (nTotal int64, err error) {
	var nField int64
	nField, err = m.ReadFrom(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4TimeMetadata(w io.Writer, m *Nfstime4) (nTotal int64, err error) {
	var nField int64
	nField, err = m.WriteTo(w)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4TimeMetadataEncodedSizeBytes = 12

// Type definition "fattr4_time_modify".

type Fattr4TimeModify = Nfstime4

func ReadFattr4TimeModify(r io.Reader, m *Nfstime4) (nTotal int64, err error) {
	var nField int64
	nField, err = m.ReadFrom(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4TimeModify(w io.Writer, m *Nfstime4) (nTotal int64, err error) {
	var nField int64
	nField, err = m.WriteTo(w)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Fattr4TimeModifyEncodedSizeBytes = 12

// Type definition "fattr4_time_modify_set".

type Fattr4TimeModifySet = Settime4

func ReadFattr4TimeModifySet(r io.Reader) (m Settime4, nTotal int64, err error) {
	var nField int64
	m, nField, err = ReadSettime4(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func WriteFattr4TimeModifySet(w io.Writer, m Settime4) (nTotal int64, err error) {
	var nField int64
	nField, err = m.WriteTo(w)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func GetFattr4TimeModifySetEncodedSizeBytes(m Settime4) (nTotal int) {
	nTotal += m.GetEncodedSizeBytes()
	return
}

const FATTR4_SUPPORTED_ATTRS = 0

const FATTR4_TYPE = 1

const FATTR4_FH_EXPIRE_TYPE = 2

const FATTR4_CHANGE = 3

const FATTR4_SIZE = 4

const FATTR4_LINK_SUPPORT = 5

const FATTR4_SYMLINK_SUPPORT = 6

const FATTR4_NAMED_ATTR = 7

const FATTR4_FSID = 8

const FATTR4_UNIQUE_HANDLES = 9

const FATTR4_LEASE_TIME = 10

const FATTR4_RDATTR_ERROR = 11

const FATTR4_FILEHANDLE = 19

const FATTR4_ACL = 12

const FATTR4_ACLSUPPORT = 13

const FATTR4_ARCHIVE = 14

const FATTR4_CANSETTIME = 15

const FATTR4_CASE_INSENSITIVE = 16

const FATTR4_CASE_PRESERVING = 17

const FATTR4_CHOWN_RESTRICTED = 18

const FATTR4_FILEID = 20

const FATTR4_FILES_AVAIL = 21

const FATTR4_FILES_FREE = 22

const FATTR4_FILES_TOTAL = 23

const FATTR4_FS_LOCATIONS = 24

const FATTR4_HIDDEN = 25

const FATTR4_HOMOGENEOUS = 26

const FATTR4_MAXFILESIZE = 27

const FATTR4_MAXLINK = 28

const FATTR4_MAXNAME = 29

const FATTR4_MAXREAD = 30

const FATTR4_MAXWRITE = 31

const FATTR4_MIMETYPE = 32

const FATTR4_MODE = 33

const FATTR4_NO_TRUNC = 34

const FATTR4_NUMLINKS = 35

const FATTR4_OWNER = 36

const FATTR4_OWNER_GROUP = 37

const FATTR4_QUOTA_AVAIL_HARD = 38

const FATTR4_QUOTA_AVAIL_SOFT = 39

const FATTR4_QUOTA_USED = 40

const FATTR4_RAWDEV = 41

const FATTR4_SPACE_AVAIL = 42

const FATTR4_SPACE_FREE = 43

const FATTR4_SPACE_TOTAL = 44

const FATTR4_SPACE_USED = 45

const FATTR4_SYSTEM = 46

const FATTR4_TIME_ACCESS = 47

const FATTR4_TIME_ACCESS_SET = 48

const FATTR4_TIME_BACKUP = 49

const FATTR4_TIME_CREATE = 50

const FATTR4_TIME_DELTA = 51

const FATTR4_TIME_METADATA = 52

const FATTR4_TIME_MODIFY = 53

const FATTR4_TIME_MODIFY_SET = 54

const FATTR4_MOUNTED_ON_FILEID = 55

// Type definition "fattr4".

type Fattr4 struct {
	Attrmask []uint32
	AttrVals []byte
}

func (m *Fattr4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Attrmask
		var m []uint32
		var nElements uint32
		nElements, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if nElements > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds bitmap4's maximum of 4294967295 elements", nElements)
			goto done
		}
		for nElements > 0 {
			nElements--
			mParent := &m
			var m uint32
			m, nField, err = runtime.ReadUnsignedInt(r)
			nTotal += nField
			if err != nil {
				goto done
			}
			*mParent = append(*mParent, m)
		}
		*mSave = m
	}
	{
		mSave := &m.AttrVals
		var m []byte
		m, nField, err = runtime.ReadVariableLengthOpaque(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Fattr4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Attrmask
		if uint(len(m)) > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds bitmap4's maximum of 4294967295 elements", len(m))
			goto done
		}
		nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
		nTotal += nField
		if err != nil {
			goto done
		}
		for _, m := range m {
			nField, err = runtime.WriteUnsignedInt(w, m)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
	{
		m := m.AttrVals
		nField, err = runtime.WriteVariableLengthOpaque(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Fattr4) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.Attrmask
		nTotal += 4 + 4*len(m)
	}
	{
		m := m.AttrVals
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "change_info4".

type ChangeInfo4 struct {
	Atomic bool
	Before uint64
	After  uint64
}

func (m *ChangeInfo4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Atomic
		var m bool
		m, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Before
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.After
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *ChangeInfo4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Atomic
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Before
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.After
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const ChangeInfo4EncodedSizeBytes = 20

// Type definition "clientaddr4".

type Clientaddr4 struct {
	RNetid string
	RAddr  string
}

func (m *Clientaddr4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.RNetid
		var m string
		m, nField, err = runtime.ReadASCIIString(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.RAddr
		var m string
		m, nField, err = runtime.ReadASCIIString(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Clientaddr4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.RNetid
		nField, err = runtime.WriteASCIIString(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.RAddr
		nField, err = runtime.WriteASCIIString(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Clientaddr4) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.RNetid
		nTotal += (len(m) + 7) &^ 3
	}
	{
		m := m.RAddr
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "cb_client4".

type CbClient4 struct {
	CbProgram  uint32
	CbLocation Clientaddr4
}

func (m *CbClient4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.CbProgram
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.CbLocation
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *CbClient4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.CbProgram
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.CbLocation
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *CbClient4) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.CbLocation
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "stateid4".

type Stateid4 struct {
	Seqid uint32
	Other [12]byte
}

func (m *Stateid4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Seqid
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.Other
		nField, err = runtime.ReadFixedLengthOpaque(r, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Stateid4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Seqid
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Other
		nField, err = runtime.WriteFixedLengthOpaque(w, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Stateid4EncodedSizeBytes = 16

// Type definition "nfs_client_id4".

type NfsClientId4 struct {
	Verifier [8]byte
	Id       []byte
}

func (m *NfsClientId4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Verifier
		nField, err = runtime.ReadFixedLengthOpaque(r, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.Id
		var m []byte
		m, nField, err = runtime.ReadVariableLengthOpaque(r, 1024)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *NfsClientId4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Verifier
		nField, err = runtime.WriteFixedLengthOpaque(w, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Id
		nField, err = runtime.WriteVariableLengthOpaque(w, 1024, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsClientId4) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 8
	{
		m := m.Id
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "open_owner4".

type OpenOwner4 struct {
	Clientid uint64
	Owner    []byte
}

func (m *OpenOwner4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Clientid
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Owner
		var m []byte
		m, nField, err = runtime.ReadVariableLengthOpaque(r, 1024)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *OpenOwner4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Clientid
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Owner
		nField, err = runtime.WriteVariableLengthOpaque(w, 1024, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *OpenOwner4) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 8
	{
		m := m.Owner
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "lock_owner4".

type LockOwner4 struct {
	Clientid uint64
	Owner    []byte
}

func (m *LockOwner4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Clientid
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Owner
		var m []byte
		m, nField, err = runtime.ReadVariableLengthOpaque(r, 1024)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *LockOwner4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Clientid
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Owner
		nField, err = runtime.WriteVariableLengthOpaque(w, 1024, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *LockOwner4) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 8
	{
		m := m.Owner
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "nfs_lock_type4".

type NfsLockType4 int32

func (mParent *NfsLockType4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	var m NfsLockType4
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	*mParent = m
done:
	return
}

func (m NfsLockType4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsLockType4EncodedSizeBytes = 4

const READW_LT NfsLockType4 = 3

const READ_LT NfsLockType4 = 1

const WRITEW_LT NfsLockType4 = 4

const WRITE_LT NfsLockType4 = 2

var NfsLockType4_name = map[NfsLockType4]string{
	3: "READW_LT",
	1: "READ_LT",
	4: "WRITEW_LT",
	2: "WRITE_LT",
}

const ACCESS4_READ = 1

const ACCESS4_LOOKUP = 2

const ACCESS4_MODIFY = 4

const ACCESS4_EXTEND = 8

const ACCESS4_DELETE = 16

const ACCESS4_EXECUTE = 32

// Type definition "ACCESS4args".

type Access4args struct {
	Access uint32
}

func (m *Access4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Access
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Access4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Access
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Access4argsEncodedSizeBytes = 4

// Type definition "ACCESS4resok".

type Access4resok struct {
	Supported uint32
	Access    uint32
}

func (m *Access4resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Supported
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Access
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Access4resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Supported
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Access
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Access4resokEncodedSizeBytes = 8

// Type definition "ACCESS4res".

type Access4res interface {
	isAccess4res()
	GetStatus() Nfsstat4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadAccess4res(r io.Reader) (m Access4res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat4
	{
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Access4res_NFS4_OK
		{
			m := &mArm
			{
				m := &m.Resok4
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Access4res_default
		{
			m := &mArm
			m.Status = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readAccess4resStatus(r io.Reader) (m Nfsstat4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeAccess4resStatus(w io.Writer, m Nfsstat4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const access4resStatusEncodedSizeBytes = 4

type Access4res_NFS4_OK struct {
	Resok4 Access4resok
}

func (m *Access4res_NFS4_OK) isAccess4res() {}

func (m *Access4res_NFS4_OK) GetStatus() Nfsstat4 {
	return 0
}

func (m *Access4res_NFS4_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat4 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok4
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Access4res_NFS4_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 8
	return
}

type Access4res_default struct {
	Status Nfsstat4
}

func (m *Access4res_default) isAccess4res() {}

func (m *Access4res_default) GetStatus() Nfsstat4 {
	return m.Status
}

func (m *Access4res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Access4res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "CLOSE4args".

type Close4args struct {
	Seqid       uint32
	OpenStateid Stateid4
}

func (m *Close4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Seqid
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.OpenStateid
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Close4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Seqid
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.OpenStateid
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Close4argsEncodedSizeBytes = 20

// Type definition "CLOSE4res".

type Close4res interface {
	isClose4res()
	GetStatus() Nfsstat4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadClose4res(r io.Reader) (m Close4res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat4
	{
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Close4res_NFS4_OK
		{
			m := &mArm
			{
				m := &m.OpenStateid
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Close4res_default
		{
			m := &mArm
			m.Status = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readClose4resStatus(r io.Reader) (m Nfsstat4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeClose4resStatus(w io.Writer, m Nfsstat4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const close4resStatusEncodedSizeBytes = 4

type Close4res_NFS4_OK struct {
	OpenStateid Stateid4
}

func (m *Close4res_NFS4_OK) isClose4res() {}

func (m *Close4res_NFS4_OK) GetStatus() Nfsstat4 {
	return 0
}

func (m *Close4res_NFS4_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat4 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.OpenStateid
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Close4res_NFS4_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 16
	return
}

type Close4res_default struct {
	Status Nfsstat4
}

func (m *Close4res_default) isClose4res() {}

func (m *Close4res_default) GetStatus() Nfsstat4 {
	return m.Status
}

func (m *Close4res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Close4res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "COMMIT4args".

type Commit4args struct {
	Offset uint64
	Count  uint32
}

func (m *Commit4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Offset
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Count
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Commit4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Offset
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Count
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Commit4argsEncodedSizeBytes = 12

// Type definition "COMMIT4resok".

type Commit4resok struct {
	Writeverf [8]byte
}

func (m *Commit4resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Writeverf
		nField, err = runtime.ReadFixedLengthOpaque(r, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Commit4resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Writeverf
		nField, err = runtime.WriteFixedLengthOpaque(w, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Commit4resokEncodedSizeBytes = 8

// Type definition "COMMIT4res".

type Commit4res interface {
	isCommit4res()
	GetStatus() Nfsstat4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadCommit4res(r io.Reader) (m Commit4res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat4
	{
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Commit4res_NFS4_OK
		{
			m := &mArm
			{
				m := &m.Resok4
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Commit4res_default
		{
			m := &mArm
			m.Status = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readCommit4resStatus(r io.Reader) (m Nfsstat4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeCommit4resStatus(w io.Writer, m Nfsstat4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const commit4resStatusEncodedSizeBytes = 4

type Commit4res_NFS4_OK struct {
	Resok4 Commit4resok
}

func (m *Commit4res_NFS4_OK) isCommit4res() {}

func (m *Commit4res_NFS4_OK) GetStatus() Nfsstat4 {
	return 0
}

func (m *Commit4res_NFS4_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat4 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok4
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Commit4res_NFS4_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 8
	return
}

type Commit4res_default struct {
	Status Nfsstat4
}

func (m *Commit4res_default) isCommit4res() {}

func (m *Commit4res_default) GetStatus() Nfsstat4 {
	return m.Status
}

func (m *Commit4res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Commit4res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "createtype4".

type Createtype4 interface {
	isCreatetype4()
	GetType() NfsFtype4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadCreatetype4(r io.Reader) (m Createtype4, nTotal int64, err error) {
	var nField int64
	var discriminant NfsFtype4
	{
		var m NfsFtype4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 5:
		var mArm Createtype4_NF4LNK
		{
			m := &mArm
			{
				mSave := &m.Linkdata
				var m []byte
				m, nField, err = runtime.ReadVariableLengthOpaque(r, 4294967295)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	case 3:
		var mArm Createtype4_NF4BLK
		{
			m := &mArm
			{
				m := &m.Devdata
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 4:
		var mArm Createtype4_NF4CHR
		{
			m := &mArm
			{
				m := &m.Devdata
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 6:
		var mArm Createtype4_NF4SOCK
		{
			m := &mArm
			_ = m
		}
		m = &mArm
	case 7:
		var mArm Createtype4_NF4FIFO
		{
			m := &mArm
			_ = m
		}
		m = &mArm
	case 2:
		var mArm Createtype4_NF4DIR
		{
			m := &mArm
			_ = m
		}
		m = &mArm
	default:
		var mArm Createtype4_default
		{
			m := &mArm
			m.Type = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readCreatetype4Type(r io.Reader) (m NfsFtype4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeCreatetype4Type(w io.Writer, m NfsFtype4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const createtype4TypeEncodedSizeBytes = 4

type Createtype4_NF4LNK struct {
	Linkdata []byte
}

func (m *Createtype4_NF4LNK) isCreatetype4() {}

func (m *Createtype4_NF4LNK) GetType() NfsFtype4 {
	return 5
}

func (m *Createtype4_NF4LNK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsFtype4 = 5
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Linkdata
		nField, err = runtime.WriteVariableLengthOpaque(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Createtype4_NF4LNK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Linkdata
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

type Createtype4_NF4BLK struct {
	Devdata Specdata4
}

func (m *Createtype4_NF4BLK) isCreatetype4() {}

func (m *Createtype4_NF4BLK) GetType() NfsFtype4 {
	return 3
}

func (m *Createtype4_NF4BLK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsFtype4 = 3
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Devdata
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Createtype4_NF4BLK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 8
	return
}

type Createtype4_NF4CHR struct {
	Devdata Specdata4
}

func (m *Createtype4_NF4CHR) isCreatetype4() {}

func (m *Createtype4_NF4CHR) GetType() NfsFtype4 {
	return 4
}

func (m *Createtype4_NF4CHR) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsFtype4 = 4
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Devdata
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Createtype4_NF4CHR) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 8
	return
}

type Createtype4_NF4SOCK struct{}

func (m *Createtype4_NF4SOCK) isCreatetype4() {}

func (m *Createtype4_NF4SOCK) GetType() NfsFtype4 {
	return 6
}

func (m *Createtype4_NF4SOCK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsFtype4 = 6
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Createtype4_NF4SOCK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

type Createtype4_NF4FIFO struct{}

func (m *Createtype4_NF4FIFO) isCreatetype4() {}

func (m *Createtype4_NF4FIFO) GetType() NfsFtype4 {
	return 7
}

func (m *Createtype4_NF4FIFO) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsFtype4 = 7
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Createtype4_NF4FIFO) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

type Createtype4_NF4DIR struct{}

func (m *Createtype4_NF4DIR) isCreatetype4() {}

func (m *Createtype4_NF4DIR) GetType() NfsFtype4 {
	return 2
}

func (m *Createtype4_NF4DIR) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsFtype4 = 2
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Createtype4_NF4DIR) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

type Createtype4_default struct {
	Type NfsFtype4
}

func (m *Createtype4_default) isCreatetype4() {}

func (m *Createtype4_default) GetType() NfsFtype4 {
	return m.Type
}

func (m *Createtype4_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Type
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Createtype4_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "CREATE4args".

type Create4args struct {
	Objtype     Createtype4
	Objname     string
	Createattrs Fattr4
}

func (m *Create4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Objtype
		var m Createtype4
		m, nField, err = ReadCreatetype4(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Objname
		var m string
		m, nField, err = runtime.ReadUTF8String(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.Createattrs
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Create4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Objtype
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Objname
		nField, err = runtime.WriteUTF8String(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Createattrs
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Create4args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.Objtype
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := m.Objname
		nTotal += (len(m) + 7) &^ 3
	}
	{
		m := &m.Createattrs
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "CREATE4resok".

type Create4resok struct {
	Cinfo   ChangeInfo4
	Attrset []uint32
}

func (m *Create4resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Cinfo
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.Attrset
		var m []uint32
		var nElements uint32
		nElements, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if nElements > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds bitmap4's maximum of 4294967295 elements", nElements)
			goto done
		}
		for nElements > 0 {
			nElements--
			mParent := &m
			var m uint32
			m, nField, err = runtime.ReadUnsignedInt(r)
			nTotal += nField
			if err != nil {
				goto done
			}
			*mParent = append(*mParent, m)
		}
		*mSave = m
	}
done:
	return
}

func (m *Create4resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Cinfo
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Attrset
		if uint(len(m)) > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds bitmap4's maximum of 4294967295 elements", len(m))
			goto done
		}
		nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
		nTotal += nField
		if err != nil {
			goto done
		}
		for _, m := range m {
			nField, err = runtime.WriteUnsignedInt(w, m)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
done:
	return
}

func (m *Create4resok) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 20
	{
		m := m.Attrset
		nTotal += 4 + 4*len(m)
	}
	return
}

// Type definition "CREATE4res".

type Create4res interface {
	isCreate4res()
	GetStatus() Nfsstat4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadCreate4res(r io.Reader) (m Create4res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat4
	{
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Create4res_NFS4_OK
		{
			m := &mArm
			{
				m := &m.Resok4
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Create4res_default
		{
			m := &mArm
			m.Status = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readCreate4resStatus(r io.Reader) (m Nfsstat4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeCreate4resStatus(w io.Writer, m Nfsstat4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const create4resStatusEncodedSizeBytes = 4

type Create4res_NFS4_OK struct {
	Resok4 Create4resok
}

func (m *Create4res_NFS4_OK) isCreate4res() {}

func (m *Create4res_NFS4_OK) GetStatus() Nfsstat4 {
	return 0
}

func (m *Create4res_NFS4_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat4 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok4
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Create4res_NFS4_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resok4
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Create4res_default struct {
	Status Nfsstat4
}

func (m *Create4res_default) isCreate4res() {}

func (m *Create4res_default) GetStatus() Nfsstat4 {
	return m.Status
}

func (m *Create4res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Create4res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "DELEGPURGE4args".

type Delegpurge4args struct {
	Clientid uint64
}

func (m *Delegpurge4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Clientid
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Delegpurge4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Clientid
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Delegpurge4argsEncodedSizeBytes = 8

// Type definition "DELEGPURGE4res".

type Delegpurge4res struct {
	Status Nfsstat4
}

func (m *Delegpurge4res) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Status
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Delegpurge4res) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Delegpurge4resEncodedSizeBytes = 4

// Type definition "DELEGRETURN4args".

type Delegreturn4args struct {
	DelegStateid Stateid4
}

func (m *Delegreturn4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.DelegStateid
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Delegreturn4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.DelegStateid
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Delegreturn4argsEncodedSizeBytes = 16

// Type definition "DELEGRETURN4res".

type Delegreturn4res struct {
	Status Nfsstat4
}

func (m *Delegreturn4res) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Status
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Delegreturn4res) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Delegreturn4resEncodedSizeBytes = 4

// Type definition "GETATTR4args".

type Getattr4args struct {
	AttrRequest []uint32
}

func (m *Getattr4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.AttrRequest
		var m []uint32
		var nElements uint32
		nElements, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if nElements > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds bitmap4's maximum of 4294967295 elements", nElements)
			goto done
		}
		for nElements > 0 {
			nElements--
			mParent := &m
			var m uint32
			m, nField, err = runtime.ReadUnsignedInt(r)
			nTotal += nField
			if err != nil {
				goto done
			}
			*mParent = append(*mParent, m)
		}
		*mSave = m
	}
done:
	return
}

func (m *Getattr4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.AttrRequest
		if uint(len(m)) > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds bitmap4's maximum of 4294967295 elements", len(m))
			goto done
		}
		nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
		nTotal += nField
		if err != nil {
			goto done
		}
		for _, m := range m {
			nField, err = runtime.WriteUnsignedInt(w, m)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
done:
	return
}

func (m *Getattr4args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.AttrRequest
		nTotal += 4 + 4*len(m)
	}
	return
}

// Type definition "GETATTR4resok".

type Getattr4resok struct {
	ObjAttributes Fattr4
}

func (m *Getattr4resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.ObjAttributes
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Getattr4resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.ObjAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Getattr4resok) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.ObjAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "GETATTR4res".

type Getattr4res interface {
	isGetattr4res()
	GetStatus() Nfsstat4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadGetattr4res(r io.Reader) (m Getattr4res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat4
	{
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Getattr4res_NFS4_OK
		{
			m := &mArm
			{
				m := &m.Resok4
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Getattr4res_default
		{
			m := &mArm
			m.Status = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readGetattr4resStatus(r io.Reader) (m Nfsstat4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeGetattr4resStatus(w io.Writer, m Nfsstat4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const getattr4resStatusEncodedSizeBytes = 4

type Getattr4res_NFS4_OK struct {
	Resok4 Getattr4resok
}

func (m *Getattr4res_NFS4_OK) isGetattr4res() {}

func (m *Getattr4res_NFS4_OK) GetStatus() Nfsstat4 {
	return 0
}

func (m *Getattr4res_NFS4_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat4 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok4
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Getattr4res_NFS4_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resok4
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Getattr4res_default struct {
	Status Nfsstat4
}

func (m *Getattr4res_default) isGetattr4res() {}

func (m *Getattr4res_default) GetStatus() Nfsstat4 {
	return m.Status
}

func (m *Getattr4res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Getattr4res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "GETFH4resok".

type Getfh4resok struct {
	Object []byte
}

func (m *Getfh4resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Object
		var m []byte
		m, nField, err = runtime.ReadVariableLengthOpaque(r, 128)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Getfh4resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Object
		nField, err = runtime.WriteVariableLengthOpaque(w, 128, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Getfh4resok) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.Object
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "GETFH4res".

type Getfh4res interface {
	isGetfh4res()
	GetStatus() Nfsstat4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadGetfh4res(r io.Reader) (m Getfh4res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat4
	{
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Getfh4res_NFS4_OK
		{
			m := &mArm
			{
				m := &m.Resok4
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Getfh4res_default
		{
			m := &mArm
			m.Status = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readGetfh4resStatus(r io.Reader) (m Nfsstat4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeGetfh4resStatus(w io.Writer, m Nfsstat4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const getfh4resStatusEncodedSizeBytes = 4

type Getfh4res_NFS4_OK struct {
	Resok4 Getfh4resok
}

func (m *Getfh4res_NFS4_OK) isGetfh4res() {}

func (m *Getfh4res_NFS4_OK) GetStatus() Nfsstat4 {
	return 0
}

func (m *Getfh4res_NFS4_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat4 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok4
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Getfh4res_NFS4_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resok4
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Getfh4res_default struct {
	Status Nfsstat4
}

func (m *Getfh4res_default) isGetfh4res() {}

func (m *Getfh4res_default) GetStatus() Nfsstat4 {
	return m.Status
}

func (m *Getfh4res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Getfh4res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "LINK4args".

type Link4args struct {
	Newname string
}

func (m *Link4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Newname
		var m string
		m, nField, err = runtime.ReadUTF8String(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Link4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Newname
		nField, err = runtime.WriteUTF8String(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Link4args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.Newname
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "LINK4resok".

type Link4resok struct {
	Cinfo ChangeInfo4
}

func (m *Link4resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Cinfo
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Link4resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Cinfo
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Link4resokEncodedSizeBytes = 20

// Type definition "LINK4res".

type Link4res interface {
	isLink4res()
	GetStatus() Nfsstat4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadLink4res(r io.Reader) (m Link4res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat4
	{
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Link4res_NFS4_OK
		{
			m := &mArm
			{
				m := &m.Resok4
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Link4res_default
		{
			m := &mArm
			m.Status = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readLink4resStatus(r io.Reader) (m Nfsstat4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeLink4resStatus(w io.Writer, m Nfsstat4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const link4resStatusEncodedSizeBytes = 4

type Link4res_NFS4_OK struct {
	Resok4 Link4resok
}

func (m *Link4res_NFS4_OK) isLink4res() {}

func (m *Link4res_NFS4_OK) GetStatus() Nfsstat4 {
	return 0
}

func (m *Link4res_NFS4_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat4 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok4
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Link4res_NFS4_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 20
	return
}

type Link4res_default struct {
	Status Nfsstat4
}

func (m *Link4res_default) isLink4res() {}

func (m *Link4res_default) GetStatus() Nfsstat4 {
	return m.Status
}

func (m *Link4res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Link4res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "open_to_lock_owner4".

type OpenToLockOwner4 struct {
	OpenSeqid   uint32
	OpenStateid Stateid4
	LockSeqid   uint32
	LockOwner   LockOwner4
}

func (m *OpenToLockOwner4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.OpenSeqid
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.OpenStateid
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.LockSeqid
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.LockOwner
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *OpenToLockOwner4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.OpenSeqid
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.OpenStateid
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.LockSeqid
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.LockOwner
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *OpenToLockOwner4) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 16
	nTotal += 4
	{
		m := &m.LockOwner
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "exist_lock_owner4".

type ExistLockOwner4 struct {
	LockStateid Stateid4
	LockSeqid   uint32
}

func (m *ExistLockOwner4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.LockStateid
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.LockSeqid
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *ExistLockOwner4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.LockStateid
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.LockSeqid
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const ExistLockOwner4EncodedSizeBytes = 20

// Type definition "locker4".

type Locker4 interface {
	isLocker4()
	GetNewLockOwner() bool
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadLocker4(r io.Reader) (m Locker4, nTotal int64, err error) {
	var nField int64
	var discriminant bool
	{
		var m bool
		m, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case true:
		var mArm Locker4_TRUE
		{
			m := &mArm
			{
				m := &m.OpenOwner
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case false:
		var mArm Locker4_FALSE
		{
			m := &mArm
			{
				m := &m.LockOwner
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		err = fmt.Errorf("discriminant locker4.new_lock_owner has unknown value %d", discriminant)
		goto done
	}
done:
	return
}

func readLocker4NewLockOwner(r io.Reader) (m bool, nTotal int64, err error) {
	var nField int64
	m, nField, err = runtime.ReadBool(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeLocker4NewLockOwner(w io.Writer, m bool) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteBool(w, m)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const locker4NewLockOwnerEncodedSizeBytes = 4

type Locker4_TRUE struct {
	OpenOwner OpenToLockOwner4
}

func (m *Locker4_TRUE) isLocker4() {}

func (m *Locker4_TRUE) GetNewLockOwner() bool {
	return true
}

func (m *Locker4_TRUE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m bool = true
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.OpenOwner
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Locker4_TRUE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.OpenOwner
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Locker4_FALSE struct {
	LockOwner ExistLockOwner4
}

func (m *Locker4_FALSE) isLocker4() {}

func (m *Locker4_FALSE) GetNewLockOwner() bool {
	return false
}

func (m *Locker4_FALSE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m bool = false
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.LockOwner
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Locker4_FALSE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 20
	return
}

// Type definition "LOCK4args".

type Lock4args struct {
	Locktype NfsLockType4
	Reclaim  bool
	Offset   uint64
	Length   uint64
	Locker   Locker4
}

func (m *Lock4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Locktype
		var m NfsLockType4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Reclaim
		var m bool
		m, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Offset
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Length
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Locker
		var m Locker4
		m, nField, err = ReadLocker4(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Lock4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Locktype
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Reclaim
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Offset
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Length
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Locker
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Lock4args) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	nTotal += 8
	nTotal += 8
	{
		m := m.Locker
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "LOCK4denied".

type Lock4denied struct {
	Offset   uint64
	Length   uint64
	Locktype NfsLockType4
	Owner    LockOwner4
}

func (m *Lock4denied) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Offset
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Length
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Locktype
		var m NfsLockType4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.Owner
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Lock4denied) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Offset
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Length
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Locktype
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Owner
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Lock4denied) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 8
	nTotal += 8
	nTotal += 4
	{
		m := &m.Owner
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "LOCK4resok".

type Lock4resok struct {
	LockStateid Stateid4
}

func (m *Lock4resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.LockStateid
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Lock4resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.LockStateid
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Lock4resokEncodedSizeBytes = 16

// Type definition "LOCK4res".

type Lock4res interface {
	isLock4res()
	GetStatus() Nfsstat4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadLock4res(r io.Reader) (m Lock4res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat4
	{
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Lock4res_NFS4_OK
		{
			m := &mArm
			{
				m := &m.Resok4
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 10010:
		var mArm Lock4res_NFS4ERR_DENIED
		{
			m := &mArm
			{
				m := &m.Denied
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Lock4res_default
		{
			m := &mArm
			m.Status = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readLock4resStatus(r io.Reader) (m Nfsstat4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeLock4resStatus(w io.Writer, m Nfsstat4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const lock4resStatusEncodedSizeBytes = 4

type Lock4res_NFS4_OK struct {
	Resok4 Lock4resok
}

func (m *Lock4res_NFS4_OK) isLock4res() {}

func (m *Lock4res_NFS4_OK) GetStatus() Nfsstat4 {
	return 0
}

func (m *Lock4res_NFS4_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat4 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok4
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Lock4res_NFS4_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 16
	return
}

type Lock4res_NFS4ERR_DENIED struct {
	Denied Lock4denied
}

func (m *Lock4res_NFS4ERR_DENIED) isLock4res() {}

func (m *Lock4res_NFS4ERR_DENIED) GetStatus() Nfsstat4 {
	return 10010
}

func (m *Lock4res_NFS4ERR_DENIED) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat4 = 10010
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Denied
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Lock4res_NFS4ERR_DENIED) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Denied
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Lock4res_default struct {
	Status Nfsstat4
}

func (m *Lock4res_default) isLock4res() {}

func (m *Lock4res_default) GetStatus() Nfsstat4 {
	return m.Status
}

func (m *Lock4res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Lock4res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "LOCKT4args".

type Lockt4args struct {
	Locktype NfsLockType4
	Offset   uint64
	Length   uint64
	Owner    LockOwner4
}

func (m *Lockt4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Locktype
		var m NfsLockType4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Offset
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Length
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.Owner
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Lockt4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Locktype
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Offset
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Length
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Owner
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Lockt4args) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 8
	nTotal += 8
	{
		m := &m.Owner
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "LOCKT4res".

type Lockt4res interface {
	isLockt4res()
	GetStatus() Nfsstat4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadLockt4res(r io.Reader) (m Lockt4res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat4
	{
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 10010:
		var mArm Lockt4res_NFS4ERR_DENIED
		{
			m := &mArm
			{
				m := &m.Denied
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 0:
		var mArm Lockt4res_NFS4_OK
		{
			m := &mArm
			_ = m
		}
		m = &mArm
	default:
		var mArm Lockt4res_default
		{
			m := &mArm
			m.Status = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readLockt4resStatus(r io.Reader) (m Nfsstat4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeLockt4resStatus(w io.Writer, m Nfsstat4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const lockt4resStatusEncodedSizeBytes = 4

type Lockt4res_NFS4ERR_DENIED struct {
	Denied Lock4denied
}

func (m *Lockt4res_NFS4ERR_DENIED) isLockt4res() {}

func (m *Lockt4res_NFS4ERR_DENIED) GetStatus() Nfsstat4 {
	return 10010
}

func (m *Lockt4res_NFS4ERR_DENIED) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat4 = 10010
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Denied
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Lockt4res_NFS4ERR_DENIED) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Denied
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Lockt4res_NFS4_OK struct{}

func (m *Lockt4res_NFS4_OK) isLockt4res() {}

func (m *Lockt4res_NFS4_OK) GetStatus() Nfsstat4 {
	return 0
}

func (m *Lockt4res_NFS4_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat4 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Lockt4res_NFS4_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

type Lockt4res_default struct {
	Status Nfsstat4
}

func (m *Lockt4res_default) isLockt4res() {}

func (m *Lockt4res_default) GetStatus() Nfsstat4 {
	return m.Status
}

func (m *Lockt4res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Lockt4res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "LOCKU4args".

type Locku4args struct {
	Locktype    NfsLockType4
	Seqid       uint32
	LockStateid Stateid4
	Offset      uint64
	Length      uint64
}

func (m *Locku4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Locktype
		var m NfsLockType4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Seqid
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.LockStateid
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.Offset
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Length
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Locku4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Locktype
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Seqid
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.LockStateid
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Offset
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Length
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Locku4argsEncodedSizeBytes = 40

// Type definition "LOCKU4res".

type Locku4res interface {
	isLocku4res()
	GetStatus() Nfsstat4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadLocku4res(r io.Reader) (m Locku4res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat4
	{
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Locku4res_NFS4_OK
		{
			m := &mArm
			{
				m := &m.LockStateid
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Locku4res_default
		{
			m := &mArm
			m.Status = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readLocku4resStatus(r io.Reader) (m Nfsstat4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeLocku4resStatus(w io.Writer, m Nfsstat4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const locku4resStatusEncodedSizeBytes = 4

type Locku4res_NFS4_OK struct {
	LockStateid Stateid4
}

func (m *Locku4res_NFS4_OK) isLocku4res() {}

func (m *Locku4res_NFS4_OK) GetStatus() Nfsstat4 {
	return 0
}

func (m *Locku4res_NFS4_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat4 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.LockStateid
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Locku4res_NFS4_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 16
	return
}

type Locku4res_default struct {
	Status Nfsstat4
}

func (m *Locku4res_default) isLocku4res() {}

func (m *Locku4res_default) GetStatus() Nfsstat4 {
	return m.Status
}

func (m *Locku4res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Locku4res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "LOOKUP4args".

type Lookup4args struct {
	Objname string
}

func (m *Lookup4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Objname
		var m string
		m, nField, err = runtime.ReadUTF8String(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Lookup4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Objname
		nField, err = runtime.WriteUTF8String(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Lookup4args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.Objname
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "LOOKUP4res".

type Lookup4res struct {
	Status Nfsstat4
}

func (m *Lookup4res) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Status
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Lookup4res) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Lookup4resEncodedSizeBytes = 4

// Type definition "LOOKUPP4res".

type Lookupp4res struct {
	Status Nfsstat4
}

func (m *Lookupp4res) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Status
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Lookupp4res) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Lookupp4resEncodedSizeBytes = 4

// Type definition "NVERIFY4args".

type Nverify4args struct {
	ObjAttributes Fattr4
}

func (m *Nverify4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.ObjAttributes
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Nverify4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.ObjAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Nverify4args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.ObjAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "NVERIFY4res".

type Nverify4res struct {
	Status Nfsstat4
}

func (m *Nverify4res) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Status
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Nverify4res) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Nverify4resEncodedSizeBytes = 4

const OPEN4_SHARE_ACCESS_READ = 1

const OPEN4_SHARE_ACCESS_WRITE = 2

const OPEN4_SHARE_ACCESS_BOTH = 3

const OPEN4_SHARE_DENY_NONE = 0

const OPEN4_SHARE_DENY_READ = 1

const OPEN4_SHARE_DENY_WRITE = 2

const OPEN4_SHARE_DENY_BOTH = 3

// Type definition "createmode4".

type Createmode4 int32

func (mParent *Createmode4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	var m Createmode4
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	*mParent = m
done:
	return
}

func (m Createmode4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Createmode4EncodedSizeBytes = 4

const EXCLUSIVE4 Createmode4 = 2

const GUARDED4 Createmode4 = 1

const UNCHECKED4 Createmode4 = 0

var Createmode4_name = map[Createmode4]string{
	2: "EXCLUSIVE4",
	1: "GUARDED4",
	0: "UNCHECKED4",
}

// Type definition "createhow4".

type Createhow4 interface {
	isCreatehow4()
	GetMode() Createmode4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadCreatehow4(r io.Reader) (m Createhow4, nTotal int64, err error) {
	var nField int64
	var discriminant Createmode4
	{
		var m Createmode4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Createhow4_UNCHECKED4
		{
			m := &mArm
			{
				m := &m.Createattrs
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 1:
		var mArm Createhow4_GUARDED4
		{
			m := &mArm
			{
				m := &m.Createattrs
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 2:
		var mArm Createhow4_EXCLUSIVE4
		{
			m := &mArm
			{
				m := &m.Createverf
				nField, err = runtime.ReadFixedLengthOpaque(r, m[:])
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		err = fmt.Errorf("discriminant createhow4.mode has unknown value %d", discriminant)
		goto done
	}
done:
	return
}

func readCreatehow4Mode(r io.Reader) (m Createmode4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeCreatehow4Mode(w io.Writer, m Createmode4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const createhow4ModeEncodedSizeBytes = 4

type Createhow4_UNCHECKED4 struct {
	Createattrs Fattr4
}

func (m *Createhow4_UNCHECKED4) isCreatehow4() {}

func (m *Createhow4_UNCHECKED4) GetMode() Createmode4 {
	return 0
}

func (m *Createhow4_UNCHECKED4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Createmode4 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Createattrs
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Createhow4_UNCHECKED4) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Createattrs
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Createhow4_GUARDED4 struct {
	Createattrs Fattr4
}

func (m *Createhow4_GUARDED4) isCreatehow4() {}

func (m *Createhow4_GUARDED4) GetMode() Createmode4 {
	return 1
}

func (m *Createhow4_GUARDED4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Createmode4 = 1
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Createattrs
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Createhow4_GUARDED4) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Createattrs
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Createhow4_EXCLUSIVE4 struct {
	Createverf [8]byte
}

func (m *Createhow4_EXCLUSIVE4) isCreatehow4() {}

func (m *Createhow4_EXCLUSIVE4) GetMode() Createmode4 {
	return 2
}

func (m *Createhow4_EXCLUSIVE4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Createmode4 = 2
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Createverf
		nField, err = runtime.WriteFixedLengthOpaque(w, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Createhow4_EXCLUSIVE4) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 8
	return
}

// Type definition "opentype4".

type Opentype4 int32

func (mParent *Opentype4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	var m Opentype4
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	*mParent = m
done:
	return
}

func (m Opentype4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const Opentype4EncodedSizeBytes = 4

const OPEN4_CREATE Opentype4 = 1

const OPEN4_NOCREATE Opentype4 = 0

var Opentype4_name = map[Opentype4]string{
	1: "OPEN4_CREATE",
	0: "OPEN4_NOCREATE",
}

// Type definition "openflag4".

type Openflag4 interface {
	isOpenflag4()
	GetOpentype() Opentype4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadOpenflag4(r io.Reader) (m Openflag4, nTotal int64, err error) {
	var nField int64
	var discriminant Opentype4
	{
		var m Opentype4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 1:
		var mArm Openflag4_OPEN4_CREATE
		{
			m := &mArm
			{
				mSave := &m.How
				var m Createhow4
				m, nField, err = ReadCreatehow4(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	default:
		var mArm Openflag4_default
		{
			m := &mArm
			m.Opentype = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readOpenflag4Opentype(r io.Reader) (m Opentype4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeOpenflag4Opentype(w io.Writer, m Opentype4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const openflag4OpentypeEncodedSizeBytes = 4

type Openflag4_OPEN4_CREATE struct {
	How Createhow4
}

func (m *Openflag4_OPEN4_CREATE) isOpenflag4() {}

func (m *Openflag4_OPEN4_CREATE) GetOpentype() Opentype4 {
	return 1
}

func (m *Openflag4_OPEN4_CREATE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Opentype4 = 1
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.How
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Openflag4_OPEN4_CREATE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.How
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Openflag4_default struct {
	Opentype Opentype4
}

func (m *Openflag4_default) isOpenflag4() {}

func (m *Openflag4_default) GetOpentype() Opentype4 {
	return m.Opentype
}

func (m *Openflag4_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Opentype
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Openflag4_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "limit_by4".

type LimitBy4 int32

func (mParent *LimitBy4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	var m LimitBy4
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	*mParent = m
done:
	return
}

func (m LimitBy4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const LimitBy4EncodedSizeBytes = 4

const NFS_LIMIT_BLOCKS LimitBy4 = 2

const NFS_LIMIT_SIZE LimitBy4 = 1

var LimitBy4_name = map[LimitBy4]string{
	2: "NFS_LIMIT_BLOCKS",
	1: "NFS_LIMIT_SIZE",
}

// Type definition "nfs_modified_limit4".

type NfsModifiedLimit4 struct {
	NumBlocks     uint32
	BytesPerBlock uint32
}

func (m *NfsModifiedLimit4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.NumBlocks
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.BytesPerBlock
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *NfsModifiedLimit4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.NumBlocks
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.BytesPerBlock
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const NfsModifiedLimit4EncodedSizeBytes = 8

// Type definition "nfs_space_limit4".

type NfsSpaceLimit4 interface {
	isNfsSpaceLimit4()
	GetLimitby() LimitBy4
	io.WriterTo
}

func ReadNfsSpaceLimit4(r io.Reader) (m NfsSpaceLimit4, nTotal int64, err error) {
	var nField int64
	var discriminant LimitBy4
	{
		var m LimitBy4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 1:
		var mArm NfsSpaceLimit4_NFS_LIMIT_SIZE
		{
			m := &mArm
			{
				mSave := &m.Filesize
				var m uint64
				m, nField, err = runtime.ReadUnsignedHyper(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	case 2:
		var mArm NfsSpaceLimit4_NFS_LIMIT_BLOCKS
		{
			m := &mArm
			{
				m := &m.ModBlocks
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		err = fmt.Errorf("discriminant nfs_space_limit4.limitby has unknown value %d", discriminant)
		goto done
	}
done:
	return
}

func readNfsSpaceLimit4Limitby(r io.Reader) (m LimitBy4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeNfsSpaceLimit4Limitby(w io.Writer, m LimitBy4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const nfsSpaceLimit4LimitbyEncodedSizeBytes = 4

type NfsSpaceLimit4_NFS_LIMIT_SIZE struct {
	Filesize uint64
}

func (m *NfsSpaceLimit4_NFS_LIMIT_SIZE) isNfsSpaceLimit4() {}

func (m *NfsSpaceLimit4_NFS_LIMIT_SIZE) GetLimitby() LimitBy4 {
	return 1
}

func (m *NfsSpaceLimit4_NFS_LIMIT_SIZE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m LimitBy4 = 1
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Filesize
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

type NfsSpaceLimit4_NFS_LIMIT_BLOCKS struct {
	ModBlocks NfsModifiedLimit4
}

func (m *NfsSpaceLimit4_NFS_LIMIT_BLOCKS) isNfsSpaceLimit4() {}

func (m *NfsSpaceLimit4_NFS_LIMIT_BLOCKS) GetLimitby() LimitBy4 {
	return 2
}

func (m *NfsSpaceLimit4_NFS_LIMIT_BLOCKS) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m LimitBy4 = 2
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.ModBlocks
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

// Type definition "open_delegation_type4".

type OpenDelegationType4 int32

func (mParent *OpenDelegationType4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	var m OpenDelegationType4
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	*mParent = m
done:
	return
}

func (m OpenDelegationType4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const OpenDelegationType4EncodedSizeBytes = 4

const OPEN_DELEGATE_NONE OpenDelegationType4 = 0

const OPEN_DELEGATE_READ OpenDelegationType4 = 1

const OPEN_DELEGATE_WRITE OpenDelegationType4 = 2

var OpenDelegationType4_name = map[OpenDelegationType4]string{
	0: "OPEN_DELEGATE_NONE",
	1: "OPEN_DELEGATE_READ",
	2: "OPEN_DELEGATE_WRITE",
}

// Type definition "open_claim_type4".

type OpenClaimType4 int32

func (mParent *OpenClaimType4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	var m OpenClaimType4
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	*mParent = m
done:
	return
}

func (m OpenClaimType4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const OpenClaimType4EncodedSizeBytes = 4

const CLAIM_DELEGATE_CUR OpenClaimType4 = 2

const CLAIM_DELEGATE_PREV OpenClaimType4 = 3

const CLAIM_NULL OpenClaimType4 = 0

const CLAIM_PREVIOUS OpenClaimType4 = 1

var OpenClaimType4_name = map[OpenClaimType4]string{
	2: "CLAIM_DELEGATE_CUR",
	3: "CLAIM_DELEGATE_PREV",
	0: "CLAIM_NULL",
	1: "CLAIM_PREVIOUS",
}

// Type definition "open_claim_delegate_cur4".

type OpenClaimDelegateCur4 struct {
	DelegateStateid Stateid4
	File            string
}

func (m *OpenClaimDelegateCur4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.DelegateStateid
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.File
		var m string
		m, nField, err = runtime.ReadUTF8String(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *OpenClaimDelegateCur4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.DelegateStateid
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.File
		nField, err = runtime.WriteUTF8String(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *OpenClaimDelegateCur4) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 16
	{
		m := m.File
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "open_claim4".

type OpenClaim4 interface {
	isOpenClaim4()
	GetClaim() OpenClaimType4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadOpenClaim4(r io.Reader) (m OpenClaim4, nTotal int64, err error) {
	var nField int64
	var discriminant OpenClaimType4
	{
		var m OpenClaimType4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm OpenClaim4_CLAIM_NULL
		{
			m := &mArm
			{
				mSave := &m.File
				var m string
				m, nField, err = runtime.ReadUTF8String(r, 4294967295)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	case 1:
		var mArm OpenClaim4_CLAIM_PREVIOUS
		{
			m := &mArm
			{
				mSave := &m.DelegateType
				var m OpenDelegationType4
				*(*int32)(&m), nField, err = runtime.ReadInt(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	case 2:
		var mArm OpenClaim4_CLAIM_DELEGATE_CUR
		{
			m := &mArm
			{
				m := &m.DelegateCurInfo
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 3:
		var mArm OpenClaim4_CLAIM_DELEGATE_PREV
		{
			m := &mArm
			{
				mSave := &m.FileDelegatePrev
				var m string
				m, nField, err = runtime.ReadUTF8String(r, 4294967295)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	default:
		err = fmt.Errorf("discriminant open_claim4.claim has unknown value %d", discriminant)
		goto done
	}
done:
	return
}

func readOpenClaim4Claim(r io.Reader) (m OpenClaimType4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeOpenClaim4Claim(w io.Writer, m OpenClaimType4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const openClaim4ClaimEncodedSizeBytes = 4

type OpenClaim4_CLAIM_NULL struct {
	File string
}

func (m *OpenClaim4_CLAIM_NULL) isOpenClaim4() {}

func (m *OpenClaim4_CLAIM_NULL) GetClaim() OpenClaimType4 {
	return 0
}

func (m *OpenClaim4_CLAIM_NULL) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m OpenClaimType4 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.File
		nField, err = runtime.WriteUTF8String(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *OpenClaim4_CLAIM_NULL) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.File
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

type OpenClaim4_CLAIM_PREVIOUS struct {
	DelegateType OpenDelegationType4
}

func (m *OpenClaim4_CLAIM_PREVIOUS) isOpenClaim4() {}

func (m *OpenClaim4_CLAIM_PREVIOUS) GetClaim() OpenClaimType4 {
	return 1
}

func (m *OpenClaim4_CLAIM_PREVIOUS) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m OpenClaimType4 = 1
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.DelegateType
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *OpenClaim4_CLAIM_PREVIOUS) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	return
}

type OpenClaim4_CLAIM_DELEGATE_CUR struct {
	DelegateCurInfo OpenClaimDelegateCur4
}

func (m *OpenClaim4_CLAIM_DELEGATE_CUR) isOpenClaim4() {}

func (m *OpenClaim4_CLAIM_DELEGATE_CUR) GetClaim() OpenClaimType4 {
	return 2
}

func (m *OpenClaim4_CLAIM_DELEGATE_CUR) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m OpenClaimType4 = 2
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.DelegateCurInfo
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *OpenClaim4_CLAIM_DELEGATE_CUR) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.DelegateCurInfo
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type OpenClaim4_CLAIM_DELEGATE_PREV struct {
	FileDelegatePrev string
}

func (m *OpenClaim4_CLAIM_DELEGATE_PREV) isOpenClaim4() {}

func (m *OpenClaim4_CLAIM_DELEGATE_PREV) GetClaim() OpenClaimType4 {
	return 3
}

func (m *OpenClaim4_CLAIM_DELEGATE_PREV) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m OpenClaimType4 = 3
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.FileDelegatePrev
		nField, err = runtime.WriteUTF8String(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *OpenClaim4_CLAIM_DELEGATE_PREV) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.FileDelegatePrev
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "OPEN4args".

type Open4args struct {
	Seqid       uint32
	ShareAccess uint32
	ShareDeny   uint32
	Owner       OpenOwner4
	Openhow     Openflag4
	Claim       OpenClaim4
}

func (m *Open4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Seqid
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.ShareAccess
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.ShareDeny
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.Owner
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.Openhow
		var m Openflag4
		m, nField, err = ReadOpenflag4(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Claim
		var m OpenClaim4
		m, nField, err = ReadOpenClaim4(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Open4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Seqid
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.ShareAccess
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.ShareDeny
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Owner
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Openhow
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Claim
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Open4args) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	nTotal += 4
	{
		m := &m.Owner
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := m.Openhow
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := m.Claim
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "open_read_delegation4".

type OpenReadDelegation4 struct {
	Stateid     Stateid4
	Recall      bool
	Permissions Nfsace4
}

func (m *OpenReadDelegation4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Stateid
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.Recall
		var m bool
		m, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.Permissions
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *OpenReadDelegation4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Stateid
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Recall
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Permissions
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *OpenReadDelegation4) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 16
	nTotal += 4
	{
		m := &m.Permissions
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "open_write_delegation4".

type OpenWriteDelegation4 struct {
	Stateid     Stateid4
	Recall      bool
	SpaceLimit  NfsSpaceLimit4
	Permissions Nfsace4
}

func (m *OpenWriteDelegation4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Stateid
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.Recall
		var m bool
		m, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.SpaceLimit
		var m NfsSpaceLimit4
		m, nField, err = ReadNfsSpaceLimit4(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.Permissions
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *OpenWriteDelegation4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Stateid
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Recall
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.SpaceLimit
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Permissions
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *OpenWriteDelegation4) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 16
	nTotal += 4
	nTotal += 12
	{
		m := &m.Permissions
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "open_delegation4".

type OpenDelegation4 interface {
	isOpenDelegation4()
	GetDelegationType() OpenDelegationType4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadOpenDelegation4(r io.Reader) (m OpenDelegation4, nTotal int64, err error) {
	var nField int64
	var discriminant OpenDelegationType4
	{
		var m OpenDelegationType4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm OpenDelegation4_OPEN_DELEGATE_NONE
		{
			m := &mArm
			_ = m
		}
		m = &mArm
	case 1:
		var mArm OpenDelegation4_OPEN_DELEGATE_READ
		{
			m := &mArm
			{
				m := &m.Read
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 2:
		var mArm OpenDelegation4_OPEN_DELEGATE_WRITE
		{
			m := &mArm
			{
				m := &m.Write
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		err = fmt.Errorf("discriminant open_delegation4.delegation_type has unknown value %d", discriminant)
		goto done
	}
done:
	return
}

func readOpenDelegation4DelegationType(r io.Reader) (m OpenDelegationType4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeOpenDelegation4DelegationType(w io.Writer, m OpenDelegationType4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const openDelegation4DelegationTypeEncodedSizeBytes = 4

type OpenDelegation4_OPEN_DELEGATE_NONE struct{}

func (m *OpenDelegation4_OPEN_DELEGATE_NONE) isOpenDelegation4() {}

func (m *OpenDelegation4_OPEN_DELEGATE_NONE) GetDelegationType() OpenDelegationType4 {
	return 0
}

func (m *OpenDelegation4_OPEN_DELEGATE_NONE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m OpenDelegationType4 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *OpenDelegation4_OPEN_DELEGATE_NONE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

type OpenDelegation4_OPEN_DELEGATE_READ struct {
	Read OpenReadDelegation4
}

func (m *OpenDelegation4_OPEN_DELEGATE_READ) isOpenDelegation4() {}

func (m *OpenDelegation4_OPEN_DELEGATE_READ) GetDelegationType() OpenDelegationType4 {
	return 1
}

func (m *OpenDelegation4_OPEN_DELEGATE_READ) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m OpenDelegationType4 = 1
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Read
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *OpenDelegation4_OPEN_DELEGATE_READ) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Read
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type OpenDelegation4_OPEN_DELEGATE_WRITE struct {
	Write OpenWriteDelegation4
}

func (m *OpenDelegation4_OPEN_DELEGATE_WRITE) isOpenDelegation4() {}

func (m *OpenDelegation4_OPEN_DELEGATE_WRITE) GetDelegationType() OpenDelegationType4 {
	return 2
}

func (m *OpenDelegation4_OPEN_DELEGATE_WRITE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m OpenDelegationType4 = 2
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Write
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *OpenDelegation4_OPEN_DELEGATE_WRITE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Write
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

const OPEN4_RESULT_CONFIRM = 2

const OPEN4_RESULT_LOCKTYPE_POSIX = 4

// Type definition "OPEN4resok".

type Open4resok struct {
	Stateid    Stateid4
	Cinfo      ChangeInfo4
	Rflags     uint32
	Attrset    []uint32
	Delegation OpenDelegation4
}

func (m *Open4resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Stateid
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Cinfo
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.Rflags
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Attrset
		var m []uint32
		var nElements uint32
		nElements, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if nElements > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds bitmap4's maximum of 4294967295 elements", nElements)
			goto done
		}
		for nElements > 0 {
			nElements--
			mParent := &m
			var m uint32
			m, nField, err = runtime.ReadUnsignedInt(r)
			nTotal += nField
			if err != nil {
				goto done
			}
			*mParent = append(*mParent, m)
		}
		*mSave = m
	}
	{
		mSave := &m.Delegation
		var m OpenDelegation4
		m, nField, err = ReadOpenDelegation4(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Open4resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Stateid
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Cinfo
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Rflags
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Attrset
		if uint(len(m)) > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds bitmap4's maximum of 4294967295 elements", len(m))
			goto done
		}
		nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
		nTotal += nField
		if err != nil {
			goto done
		}
		for _, m := range m {
			nField, err = runtime.WriteUnsignedInt(w, m)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
	{
		m := m.Delegation
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Open4resok) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 16
	nTotal += 20
	nTotal += 4
	{
		m := m.Attrset
		nTotal += 4 + 4*len(m)
	}
	{
		m := m.Delegation
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "OPEN4res".

type Open4res interface {
	isOpen4res()
	GetStatus() Nfsstat4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadOpen4res(r io.Reader) (m Open4res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat4
	{
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Open4res_NFS4_OK
		{
			m := &mArm
			{
				m := &m.Resok4
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Open4res_default
		{
			m := &mArm
			m.Status = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readOpen4resStatus(r io.Reader) (m Nfsstat4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeOpen4resStatus(w io.Writer, m Nfsstat4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const open4resStatusEncodedSizeBytes = 4

type Open4res_NFS4_OK struct {
	Resok4 Open4resok
}

func (m *Open4res_NFS4_OK) isOpen4res() {}

func (m *Open4res_NFS4_OK) GetStatus() Nfsstat4 {
	return 0
}

func (m *Open4res_NFS4_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat4 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok4
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Open4res_NFS4_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resok4
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Open4res_default struct {
	Status Nfsstat4
}

func (m *Open4res_default) isOpen4res() {}

func (m *Open4res_default) GetStatus() Nfsstat4 {
	return m.Status
}

func (m *Open4res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Open4res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "OPENATTR4args".

type Openattr4args struct {
	Createdir bool
}

func (m *Openattr4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Createdir
		var m bool
		m, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Openattr4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Createdir
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Openattr4argsEncodedSizeBytes = 4

// Type definition "OPENATTR4res".

type Openattr4res struct {
	Status Nfsstat4
}

func (m *Openattr4res) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Status
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Openattr4res) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Openattr4resEncodedSizeBytes = 4

// Type definition "OPEN_CONFIRM4args".

type OpenConfirm4args struct {
	OpenStateid Stateid4
	Seqid       uint32
}

func (m *OpenConfirm4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.OpenStateid
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.Seqid
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *OpenConfirm4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.OpenStateid
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Seqid
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const OpenConfirm4argsEncodedSizeBytes = 20

// Type definition "OPEN_CONFIRM4resok".

type OpenConfirm4resok struct {
	OpenStateid Stateid4
}

func (m *OpenConfirm4resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.OpenStateid
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *OpenConfirm4resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.OpenStateid
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const OpenConfirm4resokEncodedSizeBytes = 16

// Type definition "OPEN_CONFIRM4res".

type OpenConfirm4res interface {
	isOpenConfirm4res()
	GetStatus() Nfsstat4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadOpenConfirm4res(r io.Reader) (m OpenConfirm4res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat4
	{
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm OpenConfirm4res_NFS4_OK
		{
			m := &mArm
			{
				m := &m.Resok4
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm OpenConfirm4res_default
		{
			m := &mArm
			m.Status = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readOpenConfirm4resStatus(r io.Reader) (m Nfsstat4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeOpenConfirm4resStatus(w io.Writer, m Nfsstat4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const openConfirm4resStatusEncodedSizeBytes = 4

type OpenConfirm4res_NFS4_OK struct {
	Resok4 OpenConfirm4resok
}

func (m *OpenConfirm4res_NFS4_OK) isOpenConfirm4res() {}

func (m *OpenConfirm4res_NFS4_OK) GetStatus() Nfsstat4 {
	return 0
}

func (m *OpenConfirm4res_NFS4_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat4 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok4
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *OpenConfirm4res_NFS4_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 16
	return
}

type OpenConfirm4res_default struct {
	Status Nfsstat4
}

func (m *OpenConfirm4res_default) isOpenConfirm4res() {}

func (m *OpenConfirm4res_default) GetStatus() Nfsstat4 {
	return m.Status
}

func (m *OpenConfirm4res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *OpenConfirm4res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "OPEN_DOWNGRADE4args".

type OpenDowngrade4args struct {
	OpenStateid Stateid4
	Seqid       uint32
	ShareAccess uint32
	ShareDeny   uint32
}

func (m *OpenDowngrade4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.OpenStateid
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.Seqid
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.ShareAccess
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.ShareDeny
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *OpenDowngrade4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.OpenStateid
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Seqid
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.ShareAccess
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.ShareDeny
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const OpenDowngrade4argsEncodedSizeBytes = 28

// Type definition "OPEN_DOWNGRADE4resok".

type OpenDowngrade4resok struct {
	OpenStateid Stateid4
}

func (m *OpenDowngrade4resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.OpenStateid
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *OpenDowngrade4resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.OpenStateid
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const OpenDowngrade4resokEncodedSizeBytes = 16

// Type definition "OPEN_DOWNGRADE4res".

type OpenDowngrade4res interface {
	isOpenDowngrade4res()
	GetStatus() Nfsstat4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadOpenDowngrade4res(r io.Reader) (m OpenDowngrade4res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat4
	{
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm OpenDowngrade4res_NFS4_OK
		{
			m := &mArm
			{
				m := &m.Resok4
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm OpenDowngrade4res_default
		{
			m := &mArm
			m.Status = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readOpenDowngrade4resStatus(r io.Reader) (m Nfsstat4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeOpenDowngrade4resStatus(w io.Writer, m Nfsstat4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const openDowngrade4resStatusEncodedSizeBytes = 4

type OpenDowngrade4res_NFS4_OK struct {
	Resok4 OpenDowngrade4resok
}

func (m *OpenDowngrade4res_NFS4_OK) isOpenDowngrade4res() {}

func (m *OpenDowngrade4res_NFS4_OK) GetStatus() Nfsstat4 {
	return 0
}

func (m *OpenDowngrade4res_NFS4_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat4 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok4
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *OpenDowngrade4res_NFS4_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 16
	return
}

type OpenDowngrade4res_default struct {
	Status Nfsstat4
}

func (m *OpenDowngrade4res_default) isOpenDowngrade4res() {}

func (m *OpenDowngrade4res_default) GetStatus() Nfsstat4 {
	return m.Status
}

func (m *OpenDowngrade4res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *OpenDowngrade4res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "PUTFH4args".

type Putfh4args struct {
	Object []byte
}

func (m *Putfh4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Object
		var m []byte
		m, nField, err = runtime.ReadVariableLengthOpaque(r, 128)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Putfh4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Object
		nField, err = runtime.WriteVariableLengthOpaque(w, 128, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Putfh4args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.Object
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "PUTFH4res".

type Putfh4res struct {
	Status Nfsstat4
}

func (m *Putfh4res) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Status
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Putfh4res) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Putfh4resEncodedSizeBytes = 4

// Type definition "PUTPUBFH4res".

type Putpubfh4res struct {
	Status Nfsstat4
}

func (m *Putpubfh4res) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Status
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Putpubfh4res) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Putpubfh4resEncodedSizeBytes = 4

// Type definition "PUTROOTFH4res".

type Putrootfh4res struct {
	Status Nfsstat4
}

func (m *Putrootfh4res) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Status
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Putrootfh4res) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Putrootfh4resEncodedSizeBytes = 4

// Type definition "READ4args".

type Read4args struct {
	Stateid Stateid4
	Offset  uint64
	Count   uint32
}

func (m *Read4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Stateid
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.Offset
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Count
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Read4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Stateid
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Offset
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Count
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Read4argsEncodedSizeBytes = 28

// Type definition "READ4resok".

type Read4resok struct {
	Eof  bool
	Data []byte
}

func (m *Read4resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Eof
		var m bool
		m, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Data
		var m []byte
		m, nField, err = runtime.ReadVariableLengthOpaque(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Read4resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Eof
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Data
		nField, err = runtime.WriteVariableLengthOpaque(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Read4resok) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Data
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "READ4res".

type Read4res interface {
	isRead4res()
	GetStatus() Nfsstat4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadRead4res(r io.Reader) (m Read4res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat4
	{
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Read4res_NFS4_OK
		{
			m := &mArm
			{
				m := &m.Resok4
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Read4res_default
		{
			m := &mArm
			m.Status = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readRead4resStatus(r io.Reader) (m Nfsstat4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeRead4resStatus(w io.Writer, m Nfsstat4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const read4resStatusEncodedSizeBytes = 4

type Read4res_NFS4_OK struct {
	Resok4 Read4resok
}

func (m *Read4res_NFS4_OK) isRead4res() {}

func (m *Read4res_NFS4_OK) GetStatus() Nfsstat4 {
	return 0
}

func (m *Read4res_NFS4_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat4 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok4
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Read4res_NFS4_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resok4
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Read4res_default struct {
	Status Nfsstat4
}

func (m *Read4res_default) isRead4res() {}

func (m *Read4res_default) GetStatus() Nfsstat4 {
	return m.Status
}

func (m *Read4res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Read4res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "READDIR4args".

type Readdir4args struct {
	Cookie      uint64
	Cookieverf  [8]byte
	Dircount    uint32
	Maxcount    uint32
	AttrRequest []uint32
}

func (m *Readdir4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Cookie
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.Cookieverf
		nField, err = runtime.ReadFixedLengthOpaque(r, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.Dircount
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Maxcount
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.AttrRequest
		var m []uint32
		var nElements uint32
		nElements, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if nElements > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds bitmap4's maximum of 4294967295 elements", nElements)
			goto done
		}
		for nElements > 0 {
			nElements--
			mParent := &m
			var m uint32
			m, nField, err = runtime.ReadUnsignedInt(r)
			nTotal += nField
			if err != nil {
				goto done
			}
			*mParent = append(*mParent, m)
		}
		*mSave = m
	}
done:
	return
}

func (m *Readdir4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Cookie
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Cookieverf
		nField, err = runtime.WriteFixedLengthOpaque(w, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Dircount
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Maxcount
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.AttrRequest
		if uint(len(m)) > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds bitmap4's maximum of 4294967295 elements", len(m))
			goto done
		}
		nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
		nTotal += nField
		if err != nil {
			goto done
		}
		for _, m := range m {
			nField, err = runtime.WriteUnsignedInt(w, m)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
done:
	return
}

func (m *Readdir4args) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 8
	nTotal += 8
	nTotal += 4
	nTotal += 4
	{
		m := m.AttrRequest
		nTotal += 4 + 4*len(m)
	}
	return
}

// Type definition "entry4".

type Entry4 struct {
	Cookie    uint64
	Name      string
	Attrs     Fattr4
	Nextentry *Entry4
}

func (m *Entry4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Cookie
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Name
		var m string
		m, nField, err = runtime.ReadUTF8String(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.Attrs
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.Nextentry
		var m *Entry4
		var isSet bool
		isSet, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if isSet {
			mParent := &m
			var m Entry4
			nField, err = m.ReadFrom(r)
			nTotal += nField
			if err != nil {
				goto done
			}
			*mParent = &m
		}
		*mSave = m
	}
done:
	return
}

func (m *Entry4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Cookie
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Name
		nField, err = runtime.WriteUTF8String(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Attrs
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Nextentry
		if m == nil {
			nField, err = runtime.WriteBool(w, false)
			nTotal += nField
			if err != nil {
				goto done
			}
		} else {
			nField, err = runtime.WriteBool(w, true)
			nTotal += nField
			if err != nil {
				goto done
			}
			{
				nField, err = m.WriteTo(w)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
	}
done:
	return
}

func (m *Entry4) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 8
	{
		m := m.Name
		nTotal += (len(m) + 7) &^ 3
	}
	{
		m := &m.Attrs
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := m.Nextentry
		nTotal += 4
		if m != nil {
			nTotal += m.GetEncodedSizeBytes()
		}
	}
	return
}

// Type definition "dirlist4".

type Dirlist4 struct {
	Entries *Entry4
	Eof     bool
}

func (m *Dirlist4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Entries
		var m *Entry4
		var isSet bool
		isSet, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if isSet {
			mParent := &m
			var m Entry4
			nField, err = m.ReadFrom(r)
			nTotal += nField
			if err != nil {
				goto done
			}
			*mParent = &m
		}
		*mSave = m
	}
	{
		mSave := &m.Eof
		var m bool
		m, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Dirlist4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Entries
		if m == nil {
			nField, err = runtime.WriteBool(w, false)
			nTotal += nField
			if err != nil {
				goto done
			}
		} else {
			nField, err = runtime.WriteBool(w, true)
			nTotal += nField
			if err != nil {
				goto done
			}
			{
				nField, err = m.WriteTo(w)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
	}
	{
		m := m.Eof
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Dirlist4) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.Entries
		nTotal += 4
		if m != nil {
			nTotal += m.GetEncodedSizeBytes()
		}
	}
	nTotal += 4
	return
}

// Type definition "READDIR4resok".

type Readdir4resok struct {
	Cookieverf [8]byte
	Reply      Dirlist4
}

func (m *Readdir4resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Cookieverf
		nField, err = runtime.ReadFixedLengthOpaque(r, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Reply
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Readdir4resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Cookieverf
		nField, err = runtime.WriteFixedLengthOpaque(w, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Reply
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Readdir4resok) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 8
	{
		m := &m.Reply
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "READDIR4res".

type Readdir4res interface {
	isReaddir4res()
	GetStatus() Nfsstat4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadReaddir4res(r io.Reader) (m Readdir4res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat4
	{
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Readdir4res_NFS4_OK
		{
			m := &mArm
			{
				m := &m.Resok4
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Readdir4res_default
		{
			m := &mArm
			m.Status = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readReaddir4resStatus(r io.Reader) (m Nfsstat4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeReaddir4resStatus(w io.Writer, m Nfsstat4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const readdir4resStatusEncodedSizeBytes = 4

type Readdir4res_NFS4_OK struct {
	Resok4 Readdir4resok
}

func (m *Readdir4res_NFS4_OK) isReaddir4res() {}

func (m *Readdir4res_NFS4_OK) GetStatus() Nfsstat4 {
	return 0
}

func (m *Readdir4res_NFS4_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat4 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok4
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Readdir4res_NFS4_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resok4
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Readdir4res_default struct {
	Status Nfsstat4
}

func (m *Readdir4res_default) isReaddir4res() {}

func (m *Readdir4res_default) GetStatus() Nfsstat4 {
	return m.Status
}

func (m *Readdir4res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Readdir4res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "READLINK4resok".

type Readlink4resok struct {
	Link []byte
}

func (m *Readlink4resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Link
		var m []byte
		m, nField, err = runtime.ReadVariableLengthOpaque(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Readlink4resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Link
		nField, err = runtime.WriteVariableLengthOpaque(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Readlink4resok) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.Link
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "READLINK4res".

type Readlink4res interface {
	isReadlink4res()
	GetStatus() Nfsstat4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadReadlink4res(r io.Reader) (m Readlink4res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat4
	{
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Readlink4res_NFS4_OK
		{
			m := &mArm
			{
				m := &m.Resok4
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Readlink4res_default
		{
			m := &mArm
			m.Status = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readReadlink4resStatus(r io.Reader) (m Nfsstat4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeReadlink4resStatus(w io.Writer, m Nfsstat4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const readlink4resStatusEncodedSizeBytes = 4

type Readlink4res_NFS4_OK struct {
	Resok4 Readlink4resok
}

func (m *Readlink4res_NFS4_OK) isReadlink4res() {}

func (m *Readlink4res_NFS4_OK) GetStatus() Nfsstat4 {
	return 0
}

func (m *Readlink4res_NFS4_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat4 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok4
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Readlink4res_NFS4_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resok4
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Readlink4res_default struct {
	Status Nfsstat4
}

func (m *Readlink4res_default) isReadlink4res() {}

func (m *Readlink4res_default) GetStatus() Nfsstat4 {
	return m.Status
}

func (m *Readlink4res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Readlink4res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "REMOVE4args".

type Remove4args struct {
	Target string
}

func (m *Remove4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Target
		var m string
		m, nField, err = runtime.ReadUTF8String(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Remove4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Target
		nField, err = runtime.WriteUTF8String(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Remove4args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.Target
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "REMOVE4resok".

type Remove4resok struct {
	Cinfo ChangeInfo4
}

func (m *Remove4resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Cinfo
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Remove4resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Cinfo
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Remove4resokEncodedSizeBytes = 20

// Type definition "REMOVE4res".

type Remove4res interface {
	isRemove4res()
	GetStatus() Nfsstat4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadRemove4res(r io.Reader) (m Remove4res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat4
	{
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Remove4res_NFS4_OK
		{
			m := &mArm
			{
				m := &m.Resok4
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Remove4res_default
		{
			m := &mArm
			m.Status = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readRemove4resStatus(r io.Reader) (m Nfsstat4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeRemove4resStatus(w io.Writer, m Nfsstat4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const remove4resStatusEncodedSizeBytes = 4

type Remove4res_NFS4_OK struct {
	Resok4 Remove4resok
}

func (m *Remove4res_NFS4_OK) isRemove4res() {}

func (m *Remove4res_NFS4_OK) GetStatus() Nfsstat4 {
	return 0
}

func (m *Remove4res_NFS4_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat4 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok4
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Remove4res_NFS4_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 20
	return
}

type Remove4res_default struct {
	Status Nfsstat4
}

func (m *Remove4res_default) isRemove4res() {}

func (m *Remove4res_default) GetStatus() Nfsstat4 {
	return m.Status
}

func (m *Remove4res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Remove4res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "RENAME4args".

type Rename4args struct {
	Oldname string
	Newname string
}

func (m *Rename4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Oldname
		var m string
		m, nField, err = runtime.ReadUTF8String(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Newname
		var m string
		m, nField, err = runtime.ReadUTF8String(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Rename4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Oldname
		nField, err = runtime.WriteUTF8String(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Newname
		nField, err = runtime.WriteUTF8String(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Rename4args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.Oldname
		nTotal += (len(m) + 7) &^ 3
	}
	{
		m := m.Newname
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "RENAME4resok".

type Rename4resok struct {
	SourceCinfo ChangeInfo4
	TargetCinfo ChangeInfo4
}

func (m *Rename4resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.SourceCinfo
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.TargetCinfo
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Rename4resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.SourceCinfo
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.TargetCinfo
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Rename4resokEncodedSizeBytes = 40

// Type definition "RENAME4res".

type Rename4res interface {
	isRename4res()
	GetStatus() Nfsstat4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadRename4res(r io.Reader) (m Rename4res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat4
	{
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Rename4res_NFS4_OK
		{
			m := &mArm
			{
				m := &m.Resok4
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Rename4res_default
		{
			m := &mArm
			m.Status = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readRename4resStatus(r io.Reader) (m Nfsstat4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeRename4resStatus(w io.Writer, m Nfsstat4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const rename4resStatusEncodedSizeBytes = 4

type Rename4res_NFS4_OK struct {
	Resok4 Rename4resok
}

func (m *Rename4res_NFS4_OK) isRename4res() {}

func (m *Rename4res_NFS4_OK) GetStatus() Nfsstat4 {
	return 0
}

func (m *Rename4res_NFS4_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat4 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok4
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Rename4res_NFS4_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 40
	return
}

type Rename4res_default struct {
	Status Nfsstat4
}

func (m *Rename4res_default) isRename4res() {}

func (m *Rename4res_default) GetStatus() Nfsstat4 {
	return m.Status
}

func (m *Rename4res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Rename4res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "RENEW4args".

type Renew4args struct {
	Clientid uint64
}

func (m *Renew4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Clientid
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Renew4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Clientid
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Renew4argsEncodedSizeBytes = 8

// Type definition "RENEW4res".

type Renew4res struct {
	Status Nfsstat4
}

func (m *Renew4res) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Status
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Renew4res) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Renew4resEncodedSizeBytes = 4

// Type definition "RESTOREFH4res".

type Restorefh4res struct {
	Status Nfsstat4
}

func (m *Restorefh4res) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Status
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Restorefh4res) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Restorefh4resEncodedSizeBytes = 4

// Type definition "SAVEFH4res".

type Savefh4res struct {
	Status Nfsstat4
}

func (m *Savefh4res) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Status
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Savefh4res) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Savefh4resEncodedSizeBytes = 4

// Type definition "SECINFO4args".

type Secinfo4args struct {
	Name string
}

func (m *Secinfo4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Name
		var m string
		m, nField, err = runtime.ReadUTF8String(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Secinfo4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Name
		nField, err = runtime.WriteUTF8String(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Secinfo4args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.Name
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "rpc_gss_svc_t".

type RpcGssSvcT int32

func (mParent *RpcGssSvcT) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	var m RpcGssSvcT
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	*mParent = m
done:
	return
}

func (m RpcGssSvcT) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const RpcGssSvcTEncodedSizeBytes = 4

const RPC_GSS_SVC_INTEGRITY RpcGssSvcT = 2

const RPC_GSS_SVC_NONE RpcGssSvcT = 1

const RPC_GSS_SVC_PRIVACY RpcGssSvcT = 3

var RpcGssSvcT_name = map[RpcGssSvcT]string{
	2: "RPC_GSS_SVC_INTEGRITY",
	1: "RPC_GSS_SVC_NONE",
	3: "RPC_GSS_SVC_PRIVACY",
}

// Type definition "rpcsec_gss_info".

type RpcsecGssInfo struct {
	Oid     []byte
	Qop     uint32
	Service RpcGssSvcT
}

func (m *RpcsecGssInfo) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Oid
		var m []byte
		m, nField, err = runtime.ReadVariableLengthOpaque(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Qop
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Service
		var m RpcGssSvcT
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *RpcsecGssInfo) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Oid
		nField, err = runtime.WriteVariableLengthOpaque(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Qop
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Service
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *RpcsecGssInfo) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.Oid
		nTotal += (len(m) + 7) &^ 3
	}
	nTotal += 4
	nTotal += 4
	return
}

// Type definition "secinfo4".

type Secinfo4 interface {
	isSecinfo4()
	GetFlavor() rpcv2.AuthFlavor
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadSecinfo4(r io.Reader) (m Secinfo4, nTotal int64, err error) {
	var nField int64
	var discriminant rpcv2.AuthFlavor
	{
		var m rpcv2.AuthFlavor
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 6:
		var mArm Secinfo4_RPCSEC_GSS
		{
			m := &mArm
			{
				m := &m.FlavorInfo
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Secinfo4_default
		{
			m := &mArm
			m.Flavor = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readSecinfo4Flavor(r io.Reader) (m rpcv2.AuthFlavor, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeSecinfo4Flavor(w io.Writer, m rpcv2.AuthFlavor) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const secinfo4FlavorEncodedSizeBytes = 4

type Secinfo4_RPCSEC_GSS struct {
	FlavorInfo RpcsecGssInfo
}

func (m *Secinfo4_RPCSEC_GSS) isSecinfo4() {}

func (m *Secinfo4_RPCSEC_GSS) GetFlavor() rpcv2.AuthFlavor {
	return 6
}

func (m *Secinfo4_RPCSEC_GSS) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m rpcv2.AuthFlavor = 6
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.FlavorInfo
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Secinfo4_RPCSEC_GSS) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.FlavorInfo
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Secinfo4_default struct {
	Flavor rpcv2.AuthFlavor
}

func (m *Secinfo4_default) isSecinfo4() {}

func (m *Secinfo4_default) GetFlavor() rpcv2.AuthFlavor {
	return m.Flavor
}

func (m *Secinfo4_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Flavor
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Secinfo4_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "SECINFO4resok".

type Secinfo4resok = []Secinfo4

func ReadSecinfo4resok(r io.Reader) (m []Secinfo4, nTotal int64, err error) {
	var nField int64
	var nElements uint32
	nElements, nField, err = runtime.ReadUnsignedInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	if nElements > 4294967295 {
		err = fmt.Errorf("size of %d elements exceeds SECINFO4resok's maximum of 4294967295 elements", nElements)
		goto done
	}
	for nElements > 0 {
		nElements--
		mParent := &m
		var m Secinfo4
		m, nField, err = ReadSecinfo4(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mParent = append(*mParent, m)
	}
done:
	return
}

func WriteSecinfo4resok(w io.Writer, m []Secinfo4) (nTotal int64, err error) {
	var nField int64
	if uint(len(m)) > 4294967295 {
		err = fmt.Errorf("size of %d elements exceeds SECINFO4resok's maximum of 4294967295 elements", len(m))
		goto done
	}
	nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
	nTotal += nField
	if err != nil {
		goto done
	}
	for _, m := range m {
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func GetSecinfo4resokEncodedSizeBytes(m []Secinfo4) (nTotal int) {
	nTotal += 4
	for _, m := range m {
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "SECINFO4res".

type Secinfo4res interface {
	isSecinfo4res()
	GetStatus() Nfsstat4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadSecinfo4res(r io.Reader) (m Secinfo4res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat4
	{
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Secinfo4res_NFS4_OK
		{
			m := &mArm
			{
				mSave := &m.Resok4
				var m []Secinfo4
				var nElements uint32
				nElements, nField, err = runtime.ReadUnsignedInt(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				if nElements > 4294967295 {
					err = fmt.Errorf("size of %d elements exceeds SECINFO4resok's maximum of 4294967295 elements", nElements)
					goto done
				}
				for nElements > 0 {
					nElements--
					mParent := &m
					var m Secinfo4
					m, nField, err = ReadSecinfo4(r)
					nTotal += nField
					if err != nil {
						goto done
					}
					*mParent = append(*mParent, m)
				}
				*mSave = m
			}
		}
		m = &mArm
	default:
		var mArm Secinfo4res_default
		{
			m := &mArm
			m.Status = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readSecinfo4resStatus(r io.Reader) (m Nfsstat4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeSecinfo4resStatus(w io.Writer, m Nfsstat4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const secinfo4resStatusEncodedSizeBytes = 4

type Secinfo4res_NFS4_OK struct {
	Resok4 []Secinfo4
}

func (m *Secinfo4res_NFS4_OK) isSecinfo4res() {}

func (m *Secinfo4res_NFS4_OK) GetStatus() Nfsstat4 {
	return 0
}

func (m *Secinfo4res_NFS4_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat4 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Resok4
		if uint(len(m)) > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds SECINFO4resok's maximum of 4294967295 elements", len(m))
			goto done
		}
		nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
		nTotal += nField
		if err != nil {
			goto done
		}
		for _, m := range m {
			nField, err = m.WriteTo(w)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
done:
	return
}

func (m *Secinfo4res_NFS4_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Resok4
		nTotal += 4
		for _, m := range m {
			nTotal += m.GetEncodedSizeBytes()
		}
	}
	return
}

type Secinfo4res_default struct {
	Status Nfsstat4
}

func (m *Secinfo4res_default) isSecinfo4res() {}

func (m *Secinfo4res_default) GetStatus() Nfsstat4 {
	return m.Status
}

func (m *Secinfo4res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Secinfo4res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "SETATTR4args".

type Setattr4args struct {
	Stateid       Stateid4
	ObjAttributes Fattr4
}

func (m *Setattr4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Stateid
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.ObjAttributes
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Setattr4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Stateid
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.ObjAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Setattr4args) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 16
	{
		m := &m.ObjAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "SETATTR4res".

type Setattr4res struct {
	Status   Nfsstat4
	Attrsset []uint32
}

func (m *Setattr4res) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Status
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Attrsset
		var m []uint32
		var nElements uint32
		nElements, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if nElements > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds bitmap4's maximum of 4294967295 elements", nElements)
			goto done
		}
		for nElements > 0 {
			nElements--
			mParent := &m
			var m uint32
			m, nField, err = runtime.ReadUnsignedInt(r)
			nTotal += nField
			if err != nil {
				goto done
			}
			*mParent = append(*mParent, m)
		}
		*mSave = m
	}
done:
	return
}

func (m *Setattr4res) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Attrsset
		if uint(len(m)) > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds bitmap4's maximum of 4294967295 elements", len(m))
			goto done
		}
		nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
		nTotal += nField
		if err != nil {
			goto done
		}
		for _, m := range m {
			nField, err = runtime.WriteUnsignedInt(w, m)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
done:
	return
}

func (m *Setattr4res) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Attrsset
		nTotal += 4 + 4*len(m)
	}
	return
}

// Type definition "SETCLIENTID4args".

type Setclientid4args struct {
	Client        NfsClientId4
	Callback      CbClient4
	CallbackIdent uint32
}

func (m *Setclientid4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Client
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Callback
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.CallbackIdent
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Setclientid4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Client
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Callback
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.CallbackIdent
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Setclientid4args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.Client
		nTotal += m.GetEncodedSizeBytes()
	}
	{
		m := &m.Callback
		nTotal += m.GetEncodedSizeBytes()
	}
	nTotal += 4
	return
}

// Type definition "SETCLIENTID4resok".

type Setclientid4resok struct {
	Clientid           uint64
	SetclientidConfirm [8]byte
}

func (m *Setclientid4resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Clientid
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.SetclientidConfirm
		nField, err = runtime.ReadFixedLengthOpaque(r, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Setclientid4resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Clientid
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.SetclientidConfirm
		nField, err = runtime.WriteFixedLengthOpaque(w, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Setclientid4resokEncodedSizeBytes = 16

// Type definition "SETCLIENTID4res".

type Setclientid4res interface {
	isSetclientid4res()
	GetStatus() Nfsstat4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadSetclientid4res(r io.Reader) (m Setclientid4res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat4
	{
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Setclientid4res_NFS4_OK
		{
			m := &mArm
			{
				m := &m.Resok4
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 10017:
		var mArm Setclientid4res_NFS4ERR_CLID_INUSE
		{
			m := &mArm
			{
				m := &m.ClientUsing
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Setclientid4res_default
		{
			m := &mArm
			m.Status = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readSetclientid4resStatus(r io.Reader) (m Nfsstat4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeSetclientid4resStatus(w io.Writer, m Nfsstat4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const setclientid4resStatusEncodedSizeBytes = 4

type Setclientid4res_NFS4_OK struct {
	Resok4 Setclientid4resok
}

func (m *Setclientid4res_NFS4_OK) isSetclientid4res() {}

func (m *Setclientid4res_NFS4_OK) GetStatus() Nfsstat4 {
	return 0
}

func (m *Setclientid4res_NFS4_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat4 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok4
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Setclientid4res_NFS4_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 16
	return
}

type Setclientid4res_NFS4ERR_CLID_INUSE struct {
	ClientUsing Clientaddr4
}

func (m *Setclientid4res_NFS4ERR_CLID_INUSE) isSetclientid4res() {}

func (m *Setclientid4res_NFS4ERR_CLID_INUSE) GetStatus() Nfsstat4 {
	return 10017
}

func (m *Setclientid4res_NFS4ERR_CLID_INUSE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat4 = 10017
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.ClientUsing
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Setclientid4res_NFS4ERR_CLID_INUSE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.ClientUsing
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type Setclientid4res_default struct {
	Status Nfsstat4
}

func (m *Setclientid4res_default) isSetclientid4res() {}

func (m *Setclientid4res_default) GetStatus() Nfsstat4 {
	return m.Status
}

func (m *Setclientid4res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Setclientid4res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "SETCLIENTID_CONFIRM4args".

type SetclientidConfirm4args struct {
	Clientid           uint64
	SetclientidConfirm [8]byte
}

func (m *SetclientidConfirm4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Clientid
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.SetclientidConfirm
		nField, err = runtime.ReadFixedLengthOpaque(r, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *SetclientidConfirm4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Clientid
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.SetclientidConfirm
		nField, err = runtime.WriteFixedLengthOpaque(w, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const SetclientidConfirm4argsEncodedSizeBytes = 16

// Type definition "SETCLIENTID_CONFIRM4res".

type SetclientidConfirm4res struct {
	Status Nfsstat4
}

func (m *SetclientidConfirm4res) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Status
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *SetclientidConfirm4res) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const SetclientidConfirm4resEncodedSizeBytes = 4

// Type definition "VERIFY4args".

type Verify4args struct {
	ObjAttributes Fattr4
}

func (m *Verify4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.ObjAttributes
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Verify4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.ObjAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Verify4args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.ObjAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "VERIFY4res".

type Verify4res struct {
	Status Nfsstat4
}

func (m *Verify4res) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Status
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Verify4res) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Verify4resEncodedSizeBytes = 4

// Type definition "stable_how4".

type StableHow4 int32

func (mParent *StableHow4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	var m StableHow4
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	*mParent = m
done:
	return
}

func (m StableHow4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const StableHow4EncodedSizeBytes = 4

const DATA_SYNC4 StableHow4 = 1

const FILE_SYNC4 StableHow4 = 2

const UNSTABLE4 StableHow4 = 0

var StableHow4_name = map[StableHow4]string{
	1: "DATA_SYNC4",
	2: "FILE_SYNC4",
	0: "UNSTABLE4",
}

// Type definition "WRITE4args".

type Write4args struct {
	Stateid Stateid4
	Offset  uint64
	Stable  StableHow4
	Data    []byte
}

func (m *Write4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Stateid
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.Offset
		var m uint64
		m, nField, err = runtime.ReadUnsignedHyper(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Stable
		var m StableHow4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Data
		var m []byte
		m, nField, err = runtime.ReadVariableLengthOpaque(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Write4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Stateid
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Offset
		nField, err = runtime.WriteUnsignedHyper(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Stable
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Data
		nField, err = runtime.WriteVariableLengthOpaque(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Write4args) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 16
	nTotal += 8
	nTotal += 4
	{
		m := m.Data
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "WRITE4resok".

type Write4resok struct {
	Count     uint32
	Committed StableHow4
	Writeverf [8]byte
}

func (m *Write4resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Count
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Committed
		var m StableHow4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		m := &m.Writeverf
		nField, err = runtime.ReadFixedLengthOpaque(r, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Write4resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Count
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Committed
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Writeverf
		nField, err = runtime.WriteFixedLengthOpaque(w, m[:])
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Write4resokEncodedSizeBytes = 16

// Type definition "WRITE4res".

type Write4res interface {
	isWrite4res()
	GetStatus() Nfsstat4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadWrite4res(r io.Reader) (m Write4res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat4
	{
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm Write4res_NFS4_OK
		{
			m := &mArm
			{
				m := &m.Resok4
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm Write4res_default
		{
			m := &mArm
			m.Status = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readWrite4resStatus(r io.Reader) (m Nfsstat4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeWrite4resStatus(w io.Writer, m Nfsstat4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const write4resStatusEncodedSizeBytes = 4

type Write4res_NFS4_OK struct {
	Resok4 Write4resok
}

func (m *Write4res_NFS4_OK) isWrite4res() {}

func (m *Write4res_NFS4_OK) GetStatus() Nfsstat4 {
	return 0
}

func (m *Write4res_NFS4_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat4 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok4
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Write4res_NFS4_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 16
	return
}

type Write4res_default struct {
	Status Nfsstat4
}

func (m *Write4res_default) isWrite4res() {}

func (m *Write4res_default) GetStatus() Nfsstat4 {
	return m.Status
}

func (m *Write4res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *Write4res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "RELEASE_LOCKOWNER4args".

type ReleaseLockowner4args struct {
	LockOwner LockOwner4
}

func (m *ReleaseLockowner4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.LockOwner
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *ReleaseLockowner4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.LockOwner
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *ReleaseLockowner4args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.LockOwner
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "RELEASE_LOCKOWNER4res".

type ReleaseLockowner4res struct {
	Status Nfsstat4
}

func (m *ReleaseLockowner4res) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Status
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *ReleaseLockowner4res) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const ReleaseLockowner4resEncodedSizeBytes = 4

// Type definition "ILLEGAL4res".

type Illegal4res struct {
	Status Nfsstat4
}

func (m *Illegal4res) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Status
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *Illegal4res) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const Illegal4resEncodedSizeBytes = 4

// Type definition "nfs_opnum4".

type NfsOpnum4 int32

func (mParent *NfsOpnum4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	var m NfsOpnum4
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	*mParent = m
done:
	return
}

func (m NfsOpnum4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsOpnum4EncodedSizeBytes = 4

const OP_ACCESS NfsOpnum4 = 3

const OP_CLOSE NfsOpnum4 = 4

const OP_COMMIT NfsOpnum4 = 5

const OP_CREATE NfsOpnum4 = 6

const OP_DELEGPURGE NfsOpnum4 = 7

const OP_DELEGRETURN NfsOpnum4 = 8

const OP_GETATTR NfsOpnum4 = 9

const OP_GETFH NfsOpnum4 = 10

const OP_ILLEGAL NfsOpnum4 = 10044

const OP_LINK NfsOpnum4 = 11

const OP_LOCK NfsOpnum4 = 12

const OP_LOCKT NfsOpnum4 = 13

const OP_LOCKU NfsOpnum4 = 14

const OP_LOOKUP NfsOpnum4 = 15

const OP_LOOKUPP NfsOpnum4 = 16

const OP_NVERIFY NfsOpnum4 = 17

const OP_OPEN NfsOpnum4 = 18

const OP_OPENATTR NfsOpnum4 = 19

const OP_OPEN_CONFIRM NfsOpnum4 = 20

const OP_OPEN_DOWNGRADE NfsOpnum4 = 21

const OP_PUTFH NfsOpnum4 = 22

const OP_PUTPUBFH NfsOpnum4 = 23

const OP_PUTROOTFH NfsOpnum4 = 24

const OP_READ NfsOpnum4 = 25

const OP_READDIR NfsOpnum4 = 26

const OP_READLINK NfsOpnum4 = 27

const OP_RELEASE_LOCKOWNER NfsOpnum4 = 39

const OP_REMOVE NfsOpnum4 = 28

const OP_RENAME NfsOpnum4 = 29

const OP_RENEW NfsOpnum4 = 30

const OP_RESTOREFH NfsOpnum4 = 31

const OP_SAVEFH NfsOpnum4 = 32

const OP_SECINFO NfsOpnum4 = 33

const OP_SETATTR NfsOpnum4 = 34

const OP_SETCLIENTID NfsOpnum4 = 35

const OP_SETCLIENTID_CONFIRM NfsOpnum4 = 36

const OP_VERIFY NfsOpnum4 = 37

const OP_WRITE NfsOpnum4 = 38

var NfsOpnum4_name = map[NfsOpnum4]string{
	3:     "OP_ACCESS",
	4:     "OP_CLOSE",
	5:     "OP_COMMIT",
	6:     "OP_CREATE",
	7:     "OP_DELEGPURGE",
	8:     "OP_DELEGRETURN",
	9:     "OP_GETATTR",
	10:    "OP_GETFH",
	10044: "OP_ILLEGAL",
	11:    "OP_LINK",
	12:    "OP_LOCK",
	13:    "OP_LOCKT",
	14:    "OP_LOCKU",
	15:    "OP_LOOKUP",
	16:    "OP_LOOKUPP",
	17:    "OP_NVERIFY",
	18:    "OP_OPEN",
	19:    "OP_OPENATTR",
	20:    "OP_OPEN_CONFIRM",
	21:    "OP_OPEN_DOWNGRADE",
	22:    "OP_PUTFH",
	23:    "OP_PUTPUBFH",
	24:    "OP_PUTROOTFH",
	25:    "OP_READ",
	26:    "OP_READDIR",
	27:    "OP_READLINK",
	39:    "OP_RELEASE_LOCKOWNER",
	28:    "OP_REMOVE",
	29:    "OP_RENAME",
	30:    "OP_RENEW",
	31:    "OP_RESTOREFH",
	32:    "OP_SAVEFH",
	33:    "OP_SECINFO",
	34:    "OP_SETATTR",
	35:    "OP_SETCLIENTID",
	36:    "OP_SETCLIENTID_CONFIRM",
	37:    "OP_VERIFY",
	38:    "OP_WRITE",
}

// Type definition "nfs_argop4".

type NfsArgop4 interface {
	isNfsArgop4()
	GetArgop() NfsOpnum4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadNfsArgop4(r io.Reader) (m NfsArgop4, nTotal int64, err error) {
	var nField int64
	var discriminant NfsOpnum4
	{
		var m NfsOpnum4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 3:
		var mArm NfsArgop4_OP_ACCESS
		{
			m := &mArm
			{
				m := &m.Opaccess
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 4:
		var mArm NfsArgop4_OP_CLOSE
		{
			m := &mArm
			{
				m := &m.Opclose
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 5:
		var mArm NfsArgop4_OP_COMMIT
		{
			m := &mArm
			{
				m := &m.Opcommit
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 6:
		var mArm NfsArgop4_OP_CREATE
		{
			m := &mArm
			{
				m := &m.Opcreate
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 7:
		var mArm NfsArgop4_OP_DELEGPURGE
		{
			m := &mArm
			{
				m := &m.Opdelegpurge
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 8:
		var mArm NfsArgop4_OP_DELEGRETURN
		{
			m := &mArm
			{
				m := &m.Opdelegreturn
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 9:
		var mArm NfsArgop4_OP_GETATTR
		{
			m := &mArm
			{
				m := &m.Opgetattr
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 10:
		var mArm NfsArgop4_OP_GETFH
		{
			m := &mArm
			_ = m
		}
		m = &mArm
	case 11:
		var mArm NfsArgop4_OP_LINK
		{
			m := &mArm
			{
				m := &m.Oplink
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 12:
		var mArm NfsArgop4_OP_LOCK
		{
			m := &mArm
			{
				m := &m.Oplock
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 13:
		var mArm NfsArgop4_OP_LOCKT
		{
			m := &mArm
			{
				m := &m.Oplockt
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 14:
		var mArm NfsArgop4_OP_LOCKU
		{
			m := &mArm
			{
				m := &m.Oplocku
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 15:
		var mArm NfsArgop4_OP_LOOKUP
		{
			m := &mArm
			{
				m := &m.Oplookup
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 16:
		var mArm NfsArgop4_OP_LOOKUPP
		{
			m := &mArm
			_ = m
		}
		m = &mArm
	case 17:
		var mArm NfsArgop4_OP_NVERIFY
		{
			m := &mArm
			{
				m := &m.Opnverify
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 18:
		var mArm NfsArgop4_OP_OPEN
		{
			m := &mArm
			{
				m := &m.Opopen
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 19:
		var mArm NfsArgop4_OP_OPENATTR
		{
			m := &mArm
			{
				m := &m.Opopenattr
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 20:
		var mArm NfsArgop4_OP_OPEN_CONFIRM
		{
			m := &mArm
			{
				m := &m.OpopenConfirm
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 21:
		var mArm NfsArgop4_OP_OPEN_DOWNGRADE
		{
			m := &mArm
			{
				m := &m.OpopenDowngrade
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 22:
		var mArm NfsArgop4_OP_PUTFH
		{
			m := &mArm
			{
				m := &m.Opputfh
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 23:
		var mArm NfsArgop4_OP_PUTPUBFH
		{
			m := &mArm
			_ = m
		}
		m = &mArm
	case 24:
		var mArm NfsArgop4_OP_PUTROOTFH
		{
			m := &mArm
			_ = m
		}
		m = &mArm
	case 25:
		var mArm NfsArgop4_OP_READ
		{
			m := &mArm
			{
				m := &m.Opread
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 26:
		var mArm NfsArgop4_OP_READDIR
		{
			m := &mArm
			{
				m := &m.Opreaddir
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 27:
		var mArm NfsArgop4_OP_READLINK
		{
			m := &mArm
			_ = m
		}
		m = &mArm
	case 28:
		var mArm NfsArgop4_OP_REMOVE
		{
			m := &mArm
			{
				m := &m.Opremove
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 29:
		var mArm NfsArgop4_OP_RENAME
		{
			m := &mArm
			{
				m := &m.Oprename
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 30:
		var mArm NfsArgop4_OP_RENEW
		{
			m := &mArm
			{
				m := &m.Oprenew
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 31:
		var mArm NfsArgop4_OP_RESTOREFH
		{
			m := &mArm
			_ = m
		}
		m = &mArm
	case 32:
		var mArm NfsArgop4_OP_SAVEFH
		{
			m := &mArm
			_ = m
		}
		m = &mArm
	case 33:
		var mArm NfsArgop4_OP_SECINFO
		{
			m := &mArm
			{
				m := &m.Opsecinfo
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 34:
		var mArm NfsArgop4_OP_SETATTR
		{
			m := &mArm
			{
				m := &m.Opsetattr
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 35:
		var mArm NfsArgop4_OP_SETCLIENTID
		{
			m := &mArm
			{
				m := &m.Opsetclientid
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 36:
		var mArm NfsArgop4_OP_SETCLIENTID_CONFIRM
		{
			m := &mArm
			{
				m := &m.OpsetclientidConfirm
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 37:
		var mArm NfsArgop4_OP_VERIFY
		{
			m := &mArm
			{
				m := &m.Opverify
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 38:
		var mArm NfsArgop4_OP_WRITE
		{
			m := &mArm
			{
				m := &m.Opwrite
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 39:
		var mArm NfsArgop4_OP_RELEASE_LOCKOWNER
		{
			m := &mArm
			{
				m := &m.OpreleaseLockowner
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 10044:
		var mArm NfsArgop4_OP_ILLEGAL
		{
			m := &mArm
			_ = m
		}
		m = &mArm
	default:
		err = fmt.Errorf("discriminant nfs_argop4.argop has unknown value %d", discriminant)
		goto done
	}
done:
	return
}

func readNfsArgop4Argop(r io.Reader) (m NfsOpnum4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeNfsArgop4Argop(w io.Writer, m NfsOpnum4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const nfsArgop4ArgopEncodedSizeBytes = 4

type NfsArgop4_OP_ACCESS struct {
	Opaccess Access4args
}

func (m *NfsArgop4_OP_ACCESS) isNfsArgop4() {}

func (m *NfsArgop4_OP_ACCESS) GetArgop() NfsOpnum4 {
	return 3
}

func (m *NfsArgop4_OP_ACCESS) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 3
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opaccess
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_ACCESS) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	return
}

type NfsArgop4_OP_CLOSE struct {
	Opclose Close4args
}

func (m *NfsArgop4_OP_CLOSE) isNfsArgop4() {}

func (m *NfsArgop4_OP_CLOSE) GetArgop() NfsOpnum4 {
	return 4
}

func (m *NfsArgop4_OP_CLOSE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 4
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opclose
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_CLOSE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 20
	return
}

type NfsArgop4_OP_COMMIT struct {
	Opcommit Commit4args
}

func (m *NfsArgop4_OP_COMMIT) isNfsArgop4() {}

func (m *NfsArgop4_OP_COMMIT) GetArgop() NfsOpnum4 {
	return 5
}

func (m *NfsArgop4_OP_COMMIT) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 5
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opcommit
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_COMMIT) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 12
	return
}

type NfsArgop4_OP_CREATE struct {
	Opcreate Create4args
}

func (m *NfsArgop4_OP_CREATE) isNfsArgop4() {}

func (m *NfsArgop4_OP_CREATE) GetArgop() NfsOpnum4 {
	return 6
}

func (m *NfsArgop4_OP_CREATE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 6
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opcreate
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_CREATE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Opcreate
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsArgop4_OP_DELEGPURGE struct {
	Opdelegpurge Delegpurge4args
}

func (m *NfsArgop4_OP_DELEGPURGE) isNfsArgop4() {}

func (m *NfsArgop4_OP_DELEGPURGE) GetArgop() NfsOpnum4 {
	return 7
}

func (m *NfsArgop4_OP_DELEGPURGE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 7
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opdelegpurge
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_DELEGPURGE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 8
	return
}

type NfsArgop4_OP_DELEGRETURN struct {
	Opdelegreturn Delegreturn4args
}

func (m *NfsArgop4_OP_DELEGRETURN) isNfsArgop4() {}

func (m *NfsArgop4_OP_DELEGRETURN) GetArgop() NfsOpnum4 {
	return 8
}

func (m *NfsArgop4_OP_DELEGRETURN) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 8
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opdelegreturn
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_DELEGRETURN) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 16
	return
}

type NfsArgop4_OP_GETATTR struct {
	Opgetattr Getattr4args
}

func (m *NfsArgop4_OP_GETATTR) isNfsArgop4() {}

func (m *NfsArgop4_OP_GETATTR) GetArgop() NfsOpnum4 {
	return 9
}

func (m *NfsArgop4_OP_GETATTR) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 9
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opgetattr
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_GETATTR) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Opgetattr
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsArgop4_OP_GETFH struct{}

func (m *NfsArgop4_OP_GETFH) isNfsArgop4() {}

func (m *NfsArgop4_OP_GETFH) GetArgop() NfsOpnum4 {
	return 10
}

func (m *NfsArgop4_OP_GETFH) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 10
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_GETFH) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

type NfsArgop4_OP_LINK struct {
	Oplink Link4args
}

func (m *NfsArgop4_OP_LINK) isNfsArgop4() {}

func (m *NfsArgop4_OP_LINK) GetArgop() NfsOpnum4 {
	return 11
}

func (m *NfsArgop4_OP_LINK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 11
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Oplink
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_LINK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Oplink
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsArgop4_OP_LOCK struct {
	Oplock Lock4args
}

func (m *NfsArgop4_OP_LOCK) isNfsArgop4() {}

func (m *NfsArgop4_OP_LOCK) GetArgop() NfsOpnum4 {
	return 12
}

func (m *NfsArgop4_OP_LOCK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 12
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Oplock
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_LOCK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Oplock
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsArgop4_OP_LOCKT struct {
	Oplockt Lockt4args
}

func (m *NfsArgop4_OP_LOCKT) isNfsArgop4() {}

func (m *NfsArgop4_OP_LOCKT) GetArgop() NfsOpnum4 {
	return 13
}

func (m *NfsArgop4_OP_LOCKT) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 13
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Oplockt
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_LOCKT) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Oplockt
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsArgop4_OP_LOCKU struct {
	Oplocku Locku4args
}

func (m *NfsArgop4_OP_LOCKU) isNfsArgop4() {}

func (m *NfsArgop4_OP_LOCKU) GetArgop() NfsOpnum4 {
	return 14
}

func (m *NfsArgop4_OP_LOCKU) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 14
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Oplocku
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_LOCKU) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 40
	return
}

type NfsArgop4_OP_LOOKUP struct {
	Oplookup Lookup4args
}

func (m *NfsArgop4_OP_LOOKUP) isNfsArgop4() {}

func (m *NfsArgop4_OP_LOOKUP) GetArgop() NfsOpnum4 {
	return 15
}

func (m *NfsArgop4_OP_LOOKUP) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 15
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Oplookup
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_LOOKUP) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Oplookup
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsArgop4_OP_LOOKUPP struct{}

func (m *NfsArgop4_OP_LOOKUPP) isNfsArgop4() {}

func (m *NfsArgop4_OP_LOOKUPP) GetArgop() NfsOpnum4 {
	return 16
}

func (m *NfsArgop4_OP_LOOKUPP) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 16
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_LOOKUPP) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

type NfsArgop4_OP_NVERIFY struct {
	Opnverify Nverify4args
}

func (m *NfsArgop4_OP_NVERIFY) isNfsArgop4() {}

func (m *NfsArgop4_OP_NVERIFY) GetArgop() NfsOpnum4 {
	return 17
}

func (m *NfsArgop4_OP_NVERIFY) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 17
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opnverify
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_NVERIFY) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Opnverify
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsArgop4_OP_OPEN struct {
	Opopen Open4args
}

func (m *NfsArgop4_OP_OPEN) isNfsArgop4() {}

func (m *NfsArgop4_OP_OPEN) GetArgop() NfsOpnum4 {
	return 18
}

func (m *NfsArgop4_OP_OPEN) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 18
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opopen
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_OPEN) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Opopen
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsArgop4_OP_OPENATTR struct {
	Opopenattr Openattr4args
}

func (m *NfsArgop4_OP_OPENATTR) isNfsArgop4() {}

func (m *NfsArgop4_OP_OPENATTR) GetArgop() NfsOpnum4 {
	return 19
}

func (m *NfsArgop4_OP_OPENATTR) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 19
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opopenattr
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_OPENATTR) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	return
}

type NfsArgop4_OP_OPEN_CONFIRM struct {
	OpopenConfirm OpenConfirm4args
}

func (m *NfsArgop4_OP_OPEN_CONFIRM) isNfsArgop4() {}

func (m *NfsArgop4_OP_OPEN_CONFIRM) GetArgop() NfsOpnum4 {
	return 20
}

func (m *NfsArgop4_OP_OPEN_CONFIRM) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 20
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.OpopenConfirm
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_OPEN_CONFIRM) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 20
	return
}

type NfsArgop4_OP_OPEN_DOWNGRADE struct {
	OpopenDowngrade OpenDowngrade4args
}

func (m *NfsArgop4_OP_OPEN_DOWNGRADE) isNfsArgop4() {}

func (m *NfsArgop4_OP_OPEN_DOWNGRADE) GetArgop() NfsOpnum4 {
	return 21
}

func (m *NfsArgop4_OP_OPEN_DOWNGRADE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 21
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.OpopenDowngrade
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_OPEN_DOWNGRADE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 28
	return
}

type NfsArgop4_OP_PUTFH struct {
	Opputfh Putfh4args
}

func (m *NfsArgop4_OP_PUTFH) isNfsArgop4() {}

func (m *NfsArgop4_OP_PUTFH) GetArgop() NfsOpnum4 {
	return 22
}

func (m *NfsArgop4_OP_PUTFH) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 22
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opputfh
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_PUTFH) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Opputfh
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsArgop4_OP_PUTPUBFH struct{}

func (m *NfsArgop4_OP_PUTPUBFH) isNfsArgop4() {}

func (m *NfsArgop4_OP_PUTPUBFH) GetArgop() NfsOpnum4 {
	return 23
}

func (m *NfsArgop4_OP_PUTPUBFH) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 23
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_PUTPUBFH) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

type NfsArgop4_OP_PUTROOTFH struct{}

func (m *NfsArgop4_OP_PUTROOTFH) isNfsArgop4() {}

func (m *NfsArgop4_OP_PUTROOTFH) GetArgop() NfsOpnum4 {
	return 24
}

func (m *NfsArgop4_OP_PUTROOTFH) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 24
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_PUTROOTFH) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

type NfsArgop4_OP_READ struct {
	Opread Read4args
}

func (m *NfsArgop4_OP_READ) isNfsArgop4() {}

func (m *NfsArgop4_OP_READ) GetArgop() NfsOpnum4 {
	return 25
}

func (m *NfsArgop4_OP_READ) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 25
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opread
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_READ) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 28
	return
}

type NfsArgop4_OP_READDIR struct {
	Opreaddir Readdir4args
}

func (m *NfsArgop4_OP_READDIR) isNfsArgop4() {}

func (m *NfsArgop4_OP_READDIR) GetArgop() NfsOpnum4 {
	return 26
}

func (m *NfsArgop4_OP_READDIR) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 26
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opreaddir
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_READDIR) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Opreaddir
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsArgop4_OP_READLINK struct{}

func (m *NfsArgop4_OP_READLINK) isNfsArgop4() {}

func (m *NfsArgop4_OP_READLINK) GetArgop() NfsOpnum4 {
	return 27
}

func (m *NfsArgop4_OP_READLINK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 27
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_READLINK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

type NfsArgop4_OP_REMOVE struct {
	Opremove Remove4args
}

func (m *NfsArgop4_OP_REMOVE) isNfsArgop4() {}

func (m *NfsArgop4_OP_REMOVE) GetArgop() NfsOpnum4 {
	return 28
}

func (m *NfsArgop4_OP_REMOVE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 28
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opremove
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_REMOVE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Opremove
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsArgop4_OP_RENAME struct {
	Oprename Rename4args
}

func (m *NfsArgop4_OP_RENAME) isNfsArgop4() {}

func (m *NfsArgop4_OP_RENAME) GetArgop() NfsOpnum4 {
	return 29
}

func (m *NfsArgop4_OP_RENAME) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 29
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Oprename
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_RENAME) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Oprename
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsArgop4_OP_RENEW struct {
	Oprenew Renew4args
}

func (m *NfsArgop4_OP_RENEW) isNfsArgop4() {}

func (m *NfsArgop4_OP_RENEW) GetArgop() NfsOpnum4 {
	return 30
}

func (m *NfsArgop4_OP_RENEW) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 30
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Oprenew
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_RENEW) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 8
	return
}

type NfsArgop4_OP_RESTOREFH struct{}

func (m *NfsArgop4_OP_RESTOREFH) isNfsArgop4() {}

func (m *NfsArgop4_OP_RESTOREFH) GetArgop() NfsOpnum4 {
	return 31
}

func (m *NfsArgop4_OP_RESTOREFH) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 31
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_RESTOREFH) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

type NfsArgop4_OP_SAVEFH struct{}

func (m *NfsArgop4_OP_SAVEFH) isNfsArgop4() {}

func (m *NfsArgop4_OP_SAVEFH) GetArgop() NfsOpnum4 {
	return 32
}

func (m *NfsArgop4_OP_SAVEFH) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 32
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_SAVEFH) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

type NfsArgop4_OP_SECINFO struct {
	Opsecinfo Secinfo4args
}

func (m *NfsArgop4_OP_SECINFO) isNfsArgop4() {}

func (m *NfsArgop4_OP_SECINFO) GetArgop() NfsOpnum4 {
	return 33
}

func (m *NfsArgop4_OP_SECINFO) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 33
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opsecinfo
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_SECINFO) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Opsecinfo
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsArgop4_OP_SETATTR struct {
	Opsetattr Setattr4args
}

func (m *NfsArgop4_OP_SETATTR) isNfsArgop4() {}

func (m *NfsArgop4_OP_SETATTR) GetArgop() NfsOpnum4 {
	return 34
}

func (m *NfsArgop4_OP_SETATTR) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 34
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opsetattr
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_SETATTR) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Opsetattr
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsArgop4_OP_SETCLIENTID struct {
	Opsetclientid Setclientid4args
}

func (m *NfsArgop4_OP_SETCLIENTID) isNfsArgop4() {}

func (m *NfsArgop4_OP_SETCLIENTID) GetArgop() NfsOpnum4 {
	return 35
}

func (m *NfsArgop4_OP_SETCLIENTID) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 35
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opsetclientid
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_SETCLIENTID) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Opsetclientid
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsArgop4_OP_SETCLIENTID_CONFIRM struct {
	OpsetclientidConfirm SetclientidConfirm4args
}

func (m *NfsArgop4_OP_SETCLIENTID_CONFIRM) isNfsArgop4() {}

func (m *NfsArgop4_OP_SETCLIENTID_CONFIRM) GetArgop() NfsOpnum4 {
	return 36
}

func (m *NfsArgop4_OP_SETCLIENTID_CONFIRM) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 36
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.OpsetclientidConfirm
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_SETCLIENTID_CONFIRM) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 16
	return
}

type NfsArgop4_OP_VERIFY struct {
	Opverify Verify4args
}

func (m *NfsArgop4_OP_VERIFY) isNfsArgop4() {}

func (m *NfsArgop4_OP_VERIFY) GetArgop() NfsOpnum4 {
	return 37
}

func (m *NfsArgop4_OP_VERIFY) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 37
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opverify
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_VERIFY) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Opverify
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsArgop4_OP_WRITE struct {
	Opwrite Write4args
}

func (m *NfsArgop4_OP_WRITE) isNfsArgop4() {}

func (m *NfsArgop4_OP_WRITE) GetArgop() NfsOpnum4 {
	return 38
}

func (m *NfsArgop4_OP_WRITE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 38
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opwrite
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_WRITE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Opwrite
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsArgop4_OP_RELEASE_LOCKOWNER struct {
	OpreleaseLockowner ReleaseLockowner4args
}

func (m *NfsArgop4_OP_RELEASE_LOCKOWNER) isNfsArgop4() {}

func (m *NfsArgop4_OP_RELEASE_LOCKOWNER) GetArgop() NfsOpnum4 {
	return 39
}

func (m *NfsArgop4_OP_RELEASE_LOCKOWNER) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 39
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.OpreleaseLockowner
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_RELEASE_LOCKOWNER) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.OpreleaseLockowner
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsArgop4_OP_ILLEGAL struct{}

func (m *NfsArgop4_OP_ILLEGAL) isNfsArgop4() {}

func (m *NfsArgop4_OP_ILLEGAL) GetArgop() NfsOpnum4 {
	return 10044
}

func (m *NfsArgop4_OP_ILLEGAL) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 10044
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsArgop4_OP_ILLEGAL) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "nfs_resop4".

type NfsResop4 interface {
	isNfsResop4()
	GetResop() NfsOpnum4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadNfsResop4(r io.Reader) (m NfsResop4, nTotal int64, err error) {
	var nField int64
	var discriminant NfsOpnum4
	{
		var m NfsOpnum4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 3:
		var mArm NfsResop4_OP_ACCESS
		{
			m := &mArm
			{
				mSave := &m.Opaccess
				var m Access4res
				m, nField, err = ReadAccess4res(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	case 4:
		var mArm NfsResop4_OP_CLOSE
		{
			m := &mArm
			{
				mSave := &m.Opclose
				var m Close4res
				m, nField, err = ReadClose4res(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	case 5:
		var mArm NfsResop4_OP_COMMIT
		{
			m := &mArm
			{
				mSave := &m.Opcommit
				var m Commit4res
				m, nField, err = ReadCommit4res(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	case 6:
		var mArm NfsResop4_OP_CREATE
		{
			m := &mArm
			{
				mSave := &m.Opcreate
				var m Create4res
				m, nField, err = ReadCreate4res(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	case 7:
		var mArm NfsResop4_OP_DELEGPURGE
		{
			m := &mArm
			{
				m := &m.Opdelegpurge
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 8:
		var mArm NfsResop4_OP_DELEGRETURN
		{
			m := &mArm
			{
				m := &m.Opdelegreturn
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 9:
		var mArm NfsResop4_OP_GETATTR
		{
			m := &mArm
			{
				mSave := &m.Opgetattr
				var m Getattr4res
				m, nField, err = ReadGetattr4res(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	case 10:
		var mArm NfsResop4_OP_GETFH
		{
			m := &mArm
			{
				mSave := &m.Opgetfh
				var m Getfh4res
				m, nField, err = ReadGetfh4res(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	case 11:
		var mArm NfsResop4_OP_LINK
		{
			m := &mArm
			{
				mSave := &m.Oplink
				var m Link4res
				m, nField, err = ReadLink4res(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	case 12:
		var mArm NfsResop4_OP_LOCK
		{
			m := &mArm
			{
				mSave := &m.Oplock
				var m Lock4res
				m, nField, err = ReadLock4res(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	case 13:
		var mArm NfsResop4_OP_LOCKT
		{
			m := &mArm
			{
				mSave := &m.Oplockt
				var m Lockt4res
				m, nField, err = ReadLockt4res(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	case 14:
		var mArm NfsResop4_OP_LOCKU
		{
			m := &mArm
			{
				mSave := &m.Oplocku
				var m Locku4res
				m, nField, err = ReadLocku4res(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	case 15:
		var mArm NfsResop4_OP_LOOKUP
		{
			m := &mArm
			{
				m := &m.Oplookup
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 16:
		var mArm NfsResop4_OP_LOOKUPP
		{
			m := &mArm
			{
				m := &m.Oplookupp
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 17:
		var mArm NfsResop4_OP_NVERIFY
		{
			m := &mArm
			{
				m := &m.Opnverify
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 18:
		var mArm NfsResop4_OP_OPEN
		{
			m := &mArm
			{
				mSave := &m.Opopen
				var m Open4res
				m, nField, err = ReadOpen4res(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	case 19:
		var mArm NfsResop4_OP_OPENATTR
		{
			m := &mArm
			{
				m := &m.Opopenattr
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 20:
		var mArm NfsResop4_OP_OPEN_CONFIRM
		{
			m := &mArm
			{
				mSave := &m.OpopenConfirm
				var m OpenConfirm4res
				m, nField, err = ReadOpenConfirm4res(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	case 21:
		var mArm NfsResop4_OP_OPEN_DOWNGRADE
		{
			m := &mArm
			{
				mSave := &m.OpopenDowngrade
				var m OpenDowngrade4res
				m, nField, err = ReadOpenDowngrade4res(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	case 22:
		var mArm NfsResop4_OP_PUTFH
		{
			m := &mArm
			{
				m := &m.Opputfh
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 23:
		var mArm NfsResop4_OP_PUTPUBFH
		{
			m := &mArm
			{
				m := &m.Opputpubfh
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 24:
		var mArm NfsResop4_OP_PUTROOTFH
		{
			m := &mArm
			{
				m := &m.Opputrootfh
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 25:
		var mArm NfsResop4_OP_READ
		{
			m := &mArm
			{
				mSave := &m.Opread
				var m Read4res
				m, nField, err = ReadRead4res(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	case 26:
		var mArm NfsResop4_OP_READDIR
		{
			m := &mArm
			{
				mSave := &m.Opreaddir
				var m Readdir4res
				m, nField, err = ReadReaddir4res(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	case 27:
		var mArm NfsResop4_OP_READLINK
		{
			m := &mArm
			{
				mSave := &m.Opreadlink
				var m Readlink4res
				m, nField, err = ReadReadlink4res(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	case 28:
		var mArm NfsResop4_OP_REMOVE
		{
			m := &mArm
			{
				mSave := &m.Opremove
				var m Remove4res
				m, nField, err = ReadRemove4res(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	case 29:
		var mArm NfsResop4_OP_RENAME
		{
			m := &mArm
			{
				mSave := &m.Oprename
				var m Rename4res
				m, nField, err = ReadRename4res(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	case 30:
		var mArm NfsResop4_OP_RENEW
		{
			m := &mArm
			{
				m := &m.Oprenew
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 31:
		var mArm NfsResop4_OP_RESTOREFH
		{
			m := &mArm
			{
				m := &m.Oprestorefh
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 32:
		var mArm NfsResop4_OP_SAVEFH
		{
			m := &mArm
			{
				m := &m.Opsavefh
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 33:
		var mArm NfsResop4_OP_SECINFO
		{
			m := &mArm
			{
				mSave := &m.Opsecinfo
				var m Secinfo4res
				m, nField, err = ReadSecinfo4res(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	case 34:
		var mArm NfsResop4_OP_SETATTR
		{
			m := &mArm
			{
				m := &m.Opsetattr
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 35:
		var mArm NfsResop4_OP_SETCLIENTID
		{
			m := &mArm
			{
				mSave := &m.Opsetclientid
				var m Setclientid4res
				m, nField, err = ReadSetclientid4res(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	case 36:
		var mArm NfsResop4_OP_SETCLIENTID_CONFIRM
		{
			m := &mArm
			{
				m := &m.OpsetclientidConfirm
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 37:
		var mArm NfsResop4_OP_VERIFY
		{
			m := &mArm
			{
				m := &m.Opverify
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 38:
		var mArm NfsResop4_OP_WRITE
		{
			m := &mArm
			{
				mSave := &m.Opwrite
				var m Write4res
				m, nField, err = ReadWrite4res(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	case 39:
		var mArm NfsResop4_OP_RELEASE_LOCKOWNER
		{
			m := &mArm
			{
				m := &m.OpreleaseLockowner
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 10044:
		var mArm NfsResop4_OP_ILLEGAL
		{
			m := &mArm
			{
				m := &m.Opillegal
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		err = fmt.Errorf("discriminant nfs_resop4.resop has unknown value %d", discriminant)
		goto done
	}
done:
	return
}

func readNfsResop4Resop(r io.Reader) (m NfsOpnum4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeNfsResop4Resop(w io.Writer, m NfsOpnum4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const nfsResop4ResopEncodedSizeBytes = 4

type NfsResop4_OP_ACCESS struct {
	Opaccess Access4res
}

func (m *NfsResop4_OP_ACCESS) isNfsResop4() {}

func (m *NfsResop4_OP_ACCESS) GetResop() NfsOpnum4 {
	return 3
}

func (m *NfsResop4_OP_ACCESS) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 3
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Opaccess
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_ACCESS) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Opaccess
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsResop4_OP_CLOSE struct {
	Opclose Close4res
}

func (m *NfsResop4_OP_CLOSE) isNfsResop4() {}

func (m *NfsResop4_OP_CLOSE) GetResop() NfsOpnum4 {
	return 4
}

func (m *NfsResop4_OP_CLOSE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 4
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Opclose
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_CLOSE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Opclose
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsResop4_OP_COMMIT struct {
	Opcommit Commit4res
}

func (m *NfsResop4_OP_COMMIT) isNfsResop4() {}

func (m *NfsResop4_OP_COMMIT) GetResop() NfsOpnum4 {
	return 5
}

func (m *NfsResop4_OP_COMMIT) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 5
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Opcommit
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_COMMIT) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Opcommit
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsResop4_OP_CREATE struct {
	Opcreate Create4res
}

func (m *NfsResop4_OP_CREATE) isNfsResop4() {}

func (m *NfsResop4_OP_CREATE) GetResop() NfsOpnum4 {
	return 6
}

func (m *NfsResop4_OP_CREATE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 6
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Opcreate
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_CREATE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Opcreate
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsResop4_OP_DELEGPURGE struct {
	Opdelegpurge Delegpurge4res
}

func (m *NfsResop4_OP_DELEGPURGE) isNfsResop4() {}

func (m *NfsResop4_OP_DELEGPURGE) GetResop() NfsOpnum4 {
	return 7
}

func (m *NfsResop4_OP_DELEGPURGE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 7
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opdelegpurge
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_DELEGPURGE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	return
}

type NfsResop4_OP_DELEGRETURN struct {
	Opdelegreturn Delegreturn4res
}

func (m *NfsResop4_OP_DELEGRETURN) isNfsResop4() {}

func (m *NfsResop4_OP_DELEGRETURN) GetResop() NfsOpnum4 {
	return 8
}

func (m *NfsResop4_OP_DELEGRETURN) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 8
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opdelegreturn
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_DELEGRETURN) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	return
}

type NfsResop4_OP_GETATTR struct {
	Opgetattr Getattr4res
}

func (m *NfsResop4_OP_GETATTR) isNfsResop4() {}

func (m *NfsResop4_OP_GETATTR) GetResop() NfsOpnum4 {
	return 9
}

func (m *NfsResop4_OP_GETATTR) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 9
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Opgetattr
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_GETATTR) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Opgetattr
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsResop4_OP_GETFH struct {
	Opgetfh Getfh4res
}

func (m *NfsResop4_OP_GETFH) isNfsResop4() {}

func (m *NfsResop4_OP_GETFH) GetResop() NfsOpnum4 {
	return 10
}

func (m *NfsResop4_OP_GETFH) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 10
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Opgetfh
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_GETFH) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Opgetfh
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsResop4_OP_LINK struct {
	Oplink Link4res
}

func (m *NfsResop4_OP_LINK) isNfsResop4() {}

func (m *NfsResop4_OP_LINK) GetResop() NfsOpnum4 {
	return 11
}

func (m *NfsResop4_OP_LINK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 11
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Oplink
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_LINK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Oplink
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsResop4_OP_LOCK struct {
	Oplock Lock4res
}

func (m *NfsResop4_OP_LOCK) isNfsResop4() {}

func (m *NfsResop4_OP_LOCK) GetResop() NfsOpnum4 {
	return 12
}

func (m *NfsResop4_OP_LOCK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 12
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Oplock
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_LOCK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Oplock
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsResop4_OP_LOCKT struct {
	Oplockt Lockt4res
}

func (m *NfsResop4_OP_LOCKT) isNfsResop4() {}

func (m *NfsResop4_OP_LOCKT) GetResop() NfsOpnum4 {
	return 13
}

func (m *NfsResop4_OP_LOCKT) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 13
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Oplockt
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_LOCKT) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Oplockt
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsResop4_OP_LOCKU struct {
	Oplocku Locku4res
}

func (m *NfsResop4_OP_LOCKU) isNfsResop4() {}

func (m *NfsResop4_OP_LOCKU) GetResop() NfsOpnum4 {
	return 14
}

func (m *NfsResop4_OP_LOCKU) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 14
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Oplocku
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_LOCKU) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Oplocku
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsResop4_OP_LOOKUP struct {
	Oplookup Lookup4res
}

func (m *NfsResop4_OP_LOOKUP) isNfsResop4() {}

func (m *NfsResop4_OP_LOOKUP) GetResop() NfsOpnum4 {
	return 15
}

func (m *NfsResop4_OP_LOOKUP) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 15
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Oplookup
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_LOOKUP) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	return
}

type NfsResop4_OP_LOOKUPP struct {
	Oplookupp Lookupp4res
}

func (m *NfsResop4_OP_LOOKUPP) isNfsResop4() {}

func (m *NfsResop4_OP_LOOKUPP) GetResop() NfsOpnum4 {
	return 16
}

func (m *NfsResop4_OP_LOOKUPP) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 16
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Oplookupp
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_LOOKUPP) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	return
}

type NfsResop4_OP_NVERIFY struct {
	Opnverify Nverify4res
}

func (m *NfsResop4_OP_NVERIFY) isNfsResop4() {}

func (m *NfsResop4_OP_NVERIFY) GetResop() NfsOpnum4 {
	return 17
}

func (m *NfsResop4_OP_NVERIFY) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 17
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opnverify
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_NVERIFY) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	return
}

type NfsResop4_OP_OPEN struct {
	Opopen Open4res
}

func (m *NfsResop4_OP_OPEN) isNfsResop4() {}

func (m *NfsResop4_OP_OPEN) GetResop() NfsOpnum4 {
	return 18
}

func (m *NfsResop4_OP_OPEN) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 18
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Opopen
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_OPEN) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Opopen
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsResop4_OP_OPENATTR struct {
	Opopenattr Openattr4res
}

func (m *NfsResop4_OP_OPENATTR) isNfsResop4() {}

func (m *NfsResop4_OP_OPENATTR) GetResop() NfsOpnum4 {
	return 19
}

func (m *NfsResop4_OP_OPENATTR) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 19
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opopenattr
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_OPENATTR) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	return
}

type NfsResop4_OP_OPEN_CONFIRM struct {
	OpopenConfirm OpenConfirm4res
}

func (m *NfsResop4_OP_OPEN_CONFIRM) isNfsResop4() {}

func (m *NfsResop4_OP_OPEN_CONFIRM) GetResop() NfsOpnum4 {
	return 20
}

func (m *NfsResop4_OP_OPEN_CONFIRM) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 20
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.OpopenConfirm
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_OPEN_CONFIRM) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.OpopenConfirm
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsResop4_OP_OPEN_DOWNGRADE struct {
	OpopenDowngrade OpenDowngrade4res
}

func (m *NfsResop4_OP_OPEN_DOWNGRADE) isNfsResop4() {}

func (m *NfsResop4_OP_OPEN_DOWNGRADE) GetResop() NfsOpnum4 {
	return 21
}

func (m *NfsResop4_OP_OPEN_DOWNGRADE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 21
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.OpopenDowngrade
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_OPEN_DOWNGRADE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.OpopenDowngrade
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsResop4_OP_PUTFH struct {
	Opputfh Putfh4res
}

func (m *NfsResop4_OP_PUTFH) isNfsResop4() {}

func (m *NfsResop4_OP_PUTFH) GetResop() NfsOpnum4 {
	return 22
}

func (m *NfsResop4_OP_PUTFH) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 22
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opputfh
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_PUTFH) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	return
}

type NfsResop4_OP_PUTPUBFH struct {
	Opputpubfh Putpubfh4res
}

func (m *NfsResop4_OP_PUTPUBFH) isNfsResop4() {}

func (m *NfsResop4_OP_PUTPUBFH) GetResop() NfsOpnum4 {
	return 23
}

func (m *NfsResop4_OP_PUTPUBFH) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 23
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opputpubfh
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_PUTPUBFH) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	return
}

type NfsResop4_OP_PUTROOTFH struct {
	Opputrootfh Putrootfh4res
}

func (m *NfsResop4_OP_PUTROOTFH) isNfsResop4() {}

func (m *NfsResop4_OP_PUTROOTFH) GetResop() NfsOpnum4 {
	return 24
}

func (m *NfsResop4_OP_PUTROOTFH) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 24
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opputrootfh
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_PUTROOTFH) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	return
}

type NfsResop4_OP_READ struct {
	Opread Read4res
}

func (m *NfsResop4_OP_READ) isNfsResop4() {}

func (m *NfsResop4_OP_READ) GetResop() NfsOpnum4 {
	return 25
}

func (m *NfsResop4_OP_READ) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 25
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Opread
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_READ) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Opread
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsResop4_OP_READDIR struct {
	Opreaddir Readdir4res
}

func (m *NfsResop4_OP_READDIR) isNfsResop4() {}

func (m *NfsResop4_OP_READDIR) GetResop() NfsOpnum4 {
	return 26
}

func (m *NfsResop4_OP_READDIR) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 26
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Opreaddir
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_READDIR) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Opreaddir
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsResop4_OP_READLINK struct {
	Opreadlink Readlink4res
}

func (m *NfsResop4_OP_READLINK) isNfsResop4() {}

func (m *NfsResop4_OP_READLINK) GetResop() NfsOpnum4 {
	return 27
}

func (m *NfsResop4_OP_READLINK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 27
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Opreadlink
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_READLINK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Opreadlink
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsResop4_OP_REMOVE struct {
	Opremove Remove4res
}

func (m *NfsResop4_OP_REMOVE) isNfsResop4() {}

func (m *NfsResop4_OP_REMOVE) GetResop() NfsOpnum4 {
	return 28
}

func (m *NfsResop4_OP_REMOVE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 28
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Opremove
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_REMOVE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Opremove
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsResop4_OP_RENAME struct {
	Oprename Rename4res
}

func (m *NfsResop4_OP_RENAME) isNfsResop4() {}

func (m *NfsResop4_OP_RENAME) GetResop() NfsOpnum4 {
	return 29
}

func (m *NfsResop4_OP_RENAME) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 29
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Oprename
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_RENAME) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Oprename
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsResop4_OP_RENEW struct {
	Oprenew Renew4res
}

func (m *NfsResop4_OP_RENEW) isNfsResop4() {}

func (m *NfsResop4_OP_RENEW) GetResop() NfsOpnum4 {
	return 30
}

func (m *NfsResop4_OP_RENEW) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 30
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Oprenew
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_RENEW) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	return
}

type NfsResop4_OP_RESTOREFH struct {
	Oprestorefh Restorefh4res
}

func (m *NfsResop4_OP_RESTOREFH) isNfsResop4() {}

func (m *NfsResop4_OP_RESTOREFH) GetResop() NfsOpnum4 {
	return 31
}

func (m *NfsResop4_OP_RESTOREFH) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 31
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Oprestorefh
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_RESTOREFH) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	return
}

type NfsResop4_OP_SAVEFH struct {
	Opsavefh Savefh4res
}

func (m *NfsResop4_OP_SAVEFH) isNfsResop4() {}

func (m *NfsResop4_OP_SAVEFH) GetResop() NfsOpnum4 {
	return 32
}

func (m *NfsResop4_OP_SAVEFH) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 32
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opsavefh
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_SAVEFH) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	return
}

type NfsResop4_OP_SECINFO struct {
	Opsecinfo Secinfo4res
}

func (m *NfsResop4_OP_SECINFO) isNfsResop4() {}

func (m *NfsResop4_OP_SECINFO) GetResop() NfsOpnum4 {
	return 33
}

func (m *NfsResop4_OP_SECINFO) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 33
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Opsecinfo
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_SECINFO) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Opsecinfo
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsResop4_OP_SETATTR struct {
	Opsetattr Setattr4res
}

func (m *NfsResop4_OP_SETATTR) isNfsResop4() {}

func (m *NfsResop4_OP_SETATTR) GetResop() NfsOpnum4 {
	return 34
}

func (m *NfsResop4_OP_SETATTR) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 34
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opsetattr
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_SETATTR) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Opsetattr
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsResop4_OP_SETCLIENTID struct {
	Opsetclientid Setclientid4res
}

func (m *NfsResop4_OP_SETCLIENTID) isNfsResop4() {}

func (m *NfsResop4_OP_SETCLIENTID) GetResop() NfsOpnum4 {
	return 35
}

func (m *NfsResop4_OP_SETCLIENTID) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 35
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Opsetclientid
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_SETCLIENTID) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Opsetclientid
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsResop4_OP_SETCLIENTID_CONFIRM struct {
	OpsetclientidConfirm SetclientidConfirm4res
}

func (m *NfsResop4_OP_SETCLIENTID_CONFIRM) isNfsResop4() {}

func (m *NfsResop4_OP_SETCLIENTID_CONFIRM) GetResop() NfsOpnum4 {
	return 36
}

func (m *NfsResop4_OP_SETCLIENTID_CONFIRM) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 36
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.OpsetclientidConfirm
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_SETCLIENTID_CONFIRM) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	return
}

type NfsResop4_OP_VERIFY struct {
	Opverify Verify4res
}

func (m *NfsResop4_OP_VERIFY) isNfsResop4() {}

func (m *NfsResop4_OP_VERIFY) GetResop() NfsOpnum4 {
	return 37
}

func (m *NfsResop4_OP_VERIFY) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 37
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opverify
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_VERIFY) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	return
}

type NfsResop4_OP_WRITE struct {
	Opwrite Write4res
}

func (m *NfsResop4_OP_WRITE) isNfsResop4() {}

func (m *NfsResop4_OP_WRITE) GetResop() NfsOpnum4 {
	return 38
}

func (m *NfsResop4_OP_WRITE) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 38
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Opwrite
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_WRITE) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Opwrite
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsResop4_OP_RELEASE_LOCKOWNER struct {
	OpreleaseLockowner ReleaseLockowner4res
}

func (m *NfsResop4_OP_RELEASE_LOCKOWNER) isNfsResop4() {}

func (m *NfsResop4_OP_RELEASE_LOCKOWNER) GetResop() NfsOpnum4 {
	return 39
}

func (m *NfsResop4_OP_RELEASE_LOCKOWNER) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 39
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.OpreleaseLockowner
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_RELEASE_LOCKOWNER) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	return
}

type NfsResop4_OP_ILLEGAL struct {
	Opillegal Illegal4res
}

func (m *NfsResop4_OP_ILLEGAL) isNfsResop4() {}

func (m *NfsResop4_OP_ILLEGAL) GetResop() NfsOpnum4 {
	return 10044
}

func (m *NfsResop4_OP_ILLEGAL) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsOpnum4 = 10044
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opillegal
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsResop4_OP_ILLEGAL) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	return
}

// Type definition "COMPOUND4args".

type Compound4args struct {
	Tag          string
	Minorversion uint32
	Argarray     []NfsArgop4
}

func (m *Compound4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Tag
		var m string
		m, nField, err = runtime.ReadUTF8String(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Minorversion
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Argarray
		var m []NfsArgop4
		var nElements uint32
		nElements, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if nElements > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds COMPOUND4args.argarray's maximum of 4294967295 elements", nElements)
			goto done
		}
		for nElements > 0 {
			nElements--
			mParent := &m
			var m NfsArgop4
			m, nField, err = ReadNfsArgop4(r)
			nTotal += nField
			if err != nil {
				goto done
			}
			*mParent = append(*mParent, m)
		}
		*mSave = m
	}
done:
	return
}

func (m *Compound4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Tag
		nField, err = runtime.WriteUTF8String(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Minorversion
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Argarray
		if uint(len(m)) > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds COMPOUND4args.argarray's maximum of 4294967295 elements", len(m))
			goto done
		}
		nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
		nTotal += nField
		if err != nil {
			goto done
		}
		for _, m := range m {
			nField, err = m.WriteTo(w)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
done:
	return
}

func (m *Compound4args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.Tag
		nTotal += (len(m) + 7) &^ 3
	}
	nTotal += 4
	{
		m := m.Argarray
		nTotal += 4
		for _, m := range m {
			nTotal += m.GetEncodedSizeBytes()
		}
	}
	return
}

// Type definition "COMPOUND4res".

type Compound4res struct {
	Status   Nfsstat4
	Tag      string
	Resarray []NfsResop4
}

func (m *Compound4res) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Status
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Tag
		var m string
		m, nField, err = runtime.ReadUTF8String(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Resarray
		var m []NfsResop4
		var nElements uint32
		nElements, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if nElements > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds COMPOUND4res.resarray's maximum of 4294967295 elements", nElements)
			goto done
		}
		for nElements > 0 {
			nElements--
			mParent := &m
			var m NfsResop4
			m, nField, err = ReadNfsResop4(r)
			nTotal += nField
			if err != nil {
				goto done
			}
			*mParent = append(*mParent, m)
		}
		*mSave = m
	}
done:
	return
}

func (m *Compound4res) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Tag
		nField, err = runtime.WriteUTF8String(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Resarray
		if uint(len(m)) > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds COMPOUND4res.resarray's maximum of 4294967295 elements", len(m))
			goto done
		}
		nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
		nTotal += nField
		if err != nil {
			goto done
		}
		for _, m := range m {
			nField, err = m.WriteTo(w)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
done:
	return
}

func (m *Compound4res) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Tag
		nTotal += (len(m) + 7) &^ 3
	}
	{
		m := m.Resarray
		nTotal += 4
		for _, m := range m {
			nTotal += m.GetEncodedSizeBytes()
		}
	}
	return
}

const NFS4_PROGRAM_PROGRAM_NUMBER uint32 = 100003

type Nfs4Program interface {
	NfsV4Nfsproc4Null(context.Context) error
	NfsV4Nfsproc4Compound(context.Context, *Compound4args) (*Compound4res, error)
}

func NewNfs4ProgramService(p Nfs4Program) func(context.Context, uint32, uint32, io.ReadCloser, io.Writer) (*rpcv2.AcceptedReply, error) {
	return func(ctx context.Context, vers, proc uint32, r io.ReadCloser, w io.Writer) (*rpcv2.AcceptedReply, error) {
		var err error
		switch vers {
		case 4:
			switch proc {
			case 0:
				r.Close()
				r = nil
				err := p.NfsV4Nfsproc4Null(ctx)
				if err != nil {
					return nil, err
				}
			case 1:
				var a0 Compound4args
				{
					m := &a0
					var nField, nTotal int64
					nField, err = m.ReadFrom(r)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
				r.Close()
				r = nil
				m, err := p.NfsV4Nfsproc4Compound(ctx, &a0)
				if err != nil {
					return nil, err
				}
				{
					var nField, nTotal int64
					nField, err = m.WriteTo(w)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
			default:
				r.Close()
				return &rpcv2.AcceptedReply{ReplyData: &rpcv2.AcceptedReplyReplyData_default{Stat: rpcv2.PROC_UNAVAIL}}, nil
			}
		default:
			r.Close()
			var replyData rpcv2.AcceptedReplyReplyData_PROG_MISMATCH
			replyData.MismatchInfo.Low = 4
			replyData.MismatchInfo.High = 4
			return &rpcv2.AcceptedReply{ReplyData: &replyData}, nil
		}
		return &rpcv2.AcceptedReply{ReplyData: &rpcv2.AcceptedReplyReplyData_SUCCESS{}}, nil
	done:
		if r != nil {
			r.Close()
		}
		return nil, err
	}
}

// Type definition "CB_GETATTR4args".

type CbGetattr4args struct {
	Fh          []byte
	AttrRequest []uint32
}

func (m *CbGetattr4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Fh
		var m []byte
		m, nField, err = runtime.ReadVariableLengthOpaque(r, 128)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.AttrRequest
		var m []uint32
		var nElements uint32
		nElements, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if nElements > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds bitmap4's maximum of 4294967295 elements", nElements)
			goto done
		}
		for nElements > 0 {
			nElements--
			mParent := &m
			var m uint32
			m, nField, err = runtime.ReadUnsignedInt(r)
			nTotal += nField
			if err != nil {
				goto done
			}
			*mParent = append(*mParent, m)
		}
		*mSave = m
	}
done:
	return
}

func (m *CbGetattr4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Fh
		nField, err = runtime.WriteVariableLengthOpaque(w, 128, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.AttrRequest
		if uint(len(m)) > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds bitmap4's maximum of 4294967295 elements", len(m))
			goto done
		}
		nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
		nTotal += nField
		if err != nil {
			goto done
		}
		for _, m := range m {
			nField, err = runtime.WriteUnsignedInt(w, m)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
done:
	return
}

func (m *CbGetattr4args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.Fh
		nTotal += (len(m) + 7) &^ 3
	}
	{
		m := m.AttrRequest
		nTotal += 4 + 4*len(m)
	}
	return
}

// Type definition "CB_GETATTR4resok".

type CbGetattr4resok struct {
	ObjAttributes Fattr4
}

func (m *CbGetattr4resok) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.ObjAttributes
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *CbGetattr4resok) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.ObjAttributes
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *CbGetattr4resok) GetEncodedSizeBytes() (nTotal int) {
	{
		m := &m.ObjAttributes
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

// Type definition "CB_GETATTR4res".

type CbGetattr4res interface {
	isCbGetattr4res()
	GetStatus() Nfsstat4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadCbGetattr4res(r io.Reader) (m CbGetattr4res, nTotal int64, err error) {
	var nField int64
	var discriminant Nfsstat4
	{
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 0:
		var mArm CbGetattr4res_NFS4_OK
		{
			m := &mArm
			{
				m := &m.Resok4
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		var mArm CbGetattr4res_default
		{
			m := &mArm
			m.Status = discriminant
			_ = m
		}
		m = &mArm
	}
done:
	return
}

func readCbGetattr4resStatus(r io.Reader) (m Nfsstat4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeCbGetattr4resStatus(w io.Writer, m Nfsstat4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const cbGetattr4resStatusEncodedSizeBytes = 4

type CbGetattr4res_NFS4_OK struct {
	Resok4 CbGetattr4resok
}

func (m *CbGetattr4res_NFS4_OK) isCbGetattr4res() {}

func (m *CbGetattr4res_NFS4_OK) GetStatus() Nfsstat4 {
	return 0
}

func (m *CbGetattr4res_NFS4_OK) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m Nfsstat4 = 0
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Resok4
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *CbGetattr4res_NFS4_OK) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Resok4
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type CbGetattr4res_default struct {
	Status Nfsstat4
}

func (m *CbGetattr4res_default) isCbGetattr4res() {}

func (m *CbGetattr4res_default) GetStatus() Nfsstat4 {
	return m.Status
}

func (m *CbGetattr4res_default) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *CbGetattr4res_default) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "CB_RECALL4args".

type CbRecall4args struct {
	Stateid  Stateid4
	Truncate bool
	Fh       []byte
}

func (m *CbRecall4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Stateid
		nField, err = m.ReadFrom(r)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		mSave := &m.Truncate
		var m bool
		m, nField, err = runtime.ReadBool(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Fh
		var m []byte
		m, nField, err = runtime.ReadVariableLengthOpaque(r, 128)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *CbRecall4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := &m.Stateid
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Truncate
		nField, err = runtime.WriteBool(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Fh
		nField, err = runtime.WriteVariableLengthOpaque(w, 128, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *CbRecall4args) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 16
	nTotal += 4
	{
		m := m.Fh
		nTotal += (len(m) + 7) &^ 3
	}
	return
}

// Type definition "CB_RECALL4res".

type CbRecall4res struct {
	Status Nfsstat4
}

func (m *CbRecall4res) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Status
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *CbRecall4res) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const CbRecall4resEncodedSizeBytes = 4

// Type definition "CB_ILLEGAL4res".

type CbIllegal4res struct {
	Status Nfsstat4
}

func (m *CbIllegal4res) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Status
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
done:
	return
}

func (m *CbIllegal4res) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

const CbIllegal4resEncodedSizeBytes = 4

// Type definition "nfs_cb_opnum4".

type NfsCbOpnum4 int32

func (mParent *NfsCbOpnum4) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	var m NfsCbOpnum4
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
	*mParent = m
done:
	return
}

func (m NfsCbOpnum4) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const NfsCbOpnum4EncodedSizeBytes = 4

const OP_CB_GETATTR NfsCbOpnum4 = 3

const OP_CB_ILLEGAL NfsCbOpnum4 = 10044

const OP_CB_RECALL NfsCbOpnum4 = 4

var NfsCbOpnum4_name = map[NfsCbOpnum4]string{
	3:     "OP_CB_GETATTR",
	10044: "OP_CB_ILLEGAL",
	4:     "OP_CB_RECALL",
}

// Type definition "nfs_cb_argop4".

type NfsCbArgop4 interface {
	isNfsCbArgop4()
	GetArgop() NfsCbOpnum4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadNfsCbArgop4(r io.Reader) (m NfsCbArgop4, nTotal int64, err error) {
	var nField int64
	var discriminant NfsCbOpnum4
	{
		var m NfsCbOpnum4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 3:
		var mArm NfsCbArgop4_OP_CB_GETATTR
		{
			m := &mArm
			{
				m := &m.Opcbgetattr
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 4:
		var mArm NfsCbArgop4_OP_CB_RECALL
		{
			m := &mArm
			{
				m := &m.Opcbrecall
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 10044:
		var mArm NfsCbArgop4_OP_CB_ILLEGAL
		{
			m := &mArm
			_ = m
		}
		m = &mArm
	default:
		err = fmt.Errorf("discriminant nfs_cb_argop4.argop has unknown value %d", discriminant)
		goto done
	}
done:
	return
}

func readNfsCbArgop4Argop(r io.Reader) (m NfsCbOpnum4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeNfsCbArgop4Argop(w io.Writer, m NfsCbOpnum4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const nfsCbArgop4ArgopEncodedSizeBytes = 4

type NfsCbArgop4_OP_CB_GETATTR struct {
	Opcbgetattr CbGetattr4args
}

func (m *NfsCbArgop4_OP_CB_GETATTR) isNfsCbArgop4() {}

func (m *NfsCbArgop4_OP_CB_GETATTR) GetArgop() NfsCbOpnum4 {
	return 3
}

func (m *NfsCbArgop4_OP_CB_GETATTR) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsCbOpnum4 = 3
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opcbgetattr
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsCbArgop4_OP_CB_GETATTR) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Opcbgetattr
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsCbArgop4_OP_CB_RECALL struct {
	Opcbrecall CbRecall4args
}

func (m *NfsCbArgop4_OP_CB_RECALL) isNfsCbArgop4() {}

func (m *NfsCbArgop4_OP_CB_RECALL) GetArgop() NfsCbOpnum4 {
	return 4
}

func (m *NfsCbArgop4_OP_CB_RECALL) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsCbOpnum4 = 4
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opcbrecall
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsCbArgop4_OP_CB_RECALL) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := &m.Opcbrecall
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsCbArgop4_OP_CB_ILLEGAL struct{}

func (m *NfsCbArgop4_OP_CB_ILLEGAL) isNfsCbArgop4() {}

func (m *NfsCbArgop4_OP_CB_ILLEGAL) GetArgop() NfsCbOpnum4 {
	return 10044
}

func (m *NfsCbArgop4_OP_CB_ILLEGAL) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsCbOpnum4 = 10044
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsCbArgop4_OP_CB_ILLEGAL) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	return
}

// Type definition "nfs_cb_resop4".

type NfsCbResop4 interface {
	isNfsCbResop4()
	GetResop() NfsCbOpnum4
	io.WriterTo
	GetEncodedSizeBytes() int
}

func ReadNfsCbResop4(r io.Reader) (m NfsCbResop4, nTotal int64, err error) {
	var nField int64
	var discriminant NfsCbOpnum4
	{
		var m NfsCbOpnum4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		discriminant = m
	}
	switch discriminant {
	case 3:
		var mArm NfsCbResop4_OP_CB_GETATTR
		{
			m := &mArm
			{
				mSave := &m.Opcbgetattr
				var m CbGetattr4res
				m, nField, err = ReadCbGetattr4res(r)
				nTotal += nField
				if err != nil {
					goto done
				}
				*mSave = m
			}
		}
		m = &mArm
	case 4:
		var mArm NfsCbResop4_OP_CB_RECALL
		{
			m := &mArm
			{
				m := &m.Opcbrecall
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	case 10044:
		var mArm NfsCbResop4_OP_CB_ILLEGAL
		{
			m := &mArm
			{
				m := &m.Opcbillegal
				nField, err = m.ReadFrom(r)
				nTotal += nField
				if err != nil {
					goto done
				}
			}
		}
		m = &mArm
	default:
		err = fmt.Errorf("discriminant nfs_cb_resop4.resop has unknown value %d", discriminant)
		goto done
	}
done:
	return
}

func readNfsCbResop4Resop(r io.Reader) (m NfsCbOpnum4, nTotal int64, err error) {
	var nField int64
	*(*int32)(&m), nField, err = runtime.ReadInt(r)
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

func writeNfsCbResop4Resop(w io.Writer, m NfsCbOpnum4) (nTotal int64, err error) {
	var nField int64
	nField, err = runtime.WriteInt(w, int32(m))
	nTotal += nField
	if err != nil {
		goto done
	}
done:
	return
}

const nfsCbResop4ResopEncodedSizeBytes = 4

type NfsCbResop4_OP_CB_GETATTR struct {
	Opcbgetattr CbGetattr4res
}

func (m *NfsCbResop4_OP_CB_GETATTR) isNfsCbResop4() {}

func (m *NfsCbResop4_OP_CB_GETATTR) GetResop() NfsCbOpnum4 {
	return 3
}

func (m *NfsCbResop4_OP_CB_GETATTR) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsCbOpnum4 = 3
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Opcbgetattr
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsCbResop4_OP_CB_GETATTR) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Opcbgetattr
		nTotal += m.GetEncodedSizeBytes()
	}
	return
}

type NfsCbResop4_OP_CB_RECALL struct {
	Opcbrecall CbRecall4res
}

func (m *NfsCbResop4_OP_CB_RECALL) isNfsCbResop4() {}

func (m *NfsCbResop4_OP_CB_RECALL) GetResop() NfsCbOpnum4 {
	return 4
}

func (m *NfsCbResop4_OP_CB_RECALL) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsCbOpnum4 = 4
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opcbrecall
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsCbResop4_OP_CB_RECALL) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	return
}

type NfsCbResop4_OP_CB_ILLEGAL struct {
	Opcbillegal CbIllegal4res
}

func (m *NfsCbResop4_OP_CB_ILLEGAL) isNfsCbResop4() {}

func (m *NfsCbResop4_OP_CB_ILLEGAL) GetResop() NfsCbOpnum4 {
	return 10044
}

func (m *NfsCbResop4_OP_CB_ILLEGAL) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		var m NfsCbOpnum4 = 10044
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := &m.Opcbillegal
		nField, err = m.WriteTo(w)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
done:
	return
}

func (m *NfsCbResop4_OP_CB_ILLEGAL) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	nTotal += 4
	return
}

// Type definition "CB_COMPOUND4args".

type CbCompound4args struct {
	Tag           string
	Minorversion  uint32
	CallbackIdent uint32
	Argarray      []NfsCbArgop4
}

func (m *CbCompound4args) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Tag
		var m string
		m, nField, err = runtime.ReadUTF8String(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Minorversion
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.CallbackIdent
		var m uint32
		m, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Argarray
		var m []NfsCbArgop4
		var nElements uint32
		nElements, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if nElements > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds CB_COMPOUND4args.argarray's maximum of 4294967295 elements", nElements)
			goto done
		}
		for nElements > 0 {
			nElements--
			mParent := &m
			var m NfsCbArgop4
			m, nField, err = ReadNfsCbArgop4(r)
			nTotal += nField
			if err != nil {
				goto done
			}
			*mParent = append(*mParent, m)
		}
		*mSave = m
	}
done:
	return
}

func (m *CbCompound4args) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Tag
		nField, err = runtime.WriteUTF8String(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Minorversion
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.CallbackIdent
		nField, err = runtime.WriteUnsignedInt(w, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Argarray
		if uint(len(m)) > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds CB_COMPOUND4args.argarray's maximum of 4294967295 elements", len(m))
			goto done
		}
		nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
		nTotal += nField
		if err != nil {
			goto done
		}
		for _, m := range m {
			nField, err = m.WriteTo(w)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
done:
	return
}

func (m *CbCompound4args) GetEncodedSizeBytes() (nTotal int) {
	{
		m := m.Tag
		nTotal += (len(m) + 7) &^ 3
	}
	nTotal += 4
	nTotal += 4
	{
		m := m.Argarray
		nTotal += 4
		for _, m := range m {
			nTotal += m.GetEncodedSizeBytes()
		}
	}
	return
}

// Type definition "CB_COMPOUND4res".

type CbCompound4res struct {
	Status   Nfsstat4
	Tag      string
	Resarray []NfsCbResop4
}

func (m *CbCompound4res) ReadFrom(r io.Reader) (nTotal int64, err error) {
	var nField int64
	{
		mSave := &m.Status
		var m Nfsstat4
		*(*int32)(&m), nField, err = runtime.ReadInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Tag
		var m string
		m, nField, err = runtime.ReadUTF8String(r, 4294967295)
		nTotal += nField
		if err != nil {
			goto done
		}
		*mSave = m
	}
	{
		mSave := &m.Resarray
		var m []NfsCbResop4
		var nElements uint32
		nElements, nField, err = runtime.ReadUnsignedInt(r)
		nTotal += nField
		if err != nil {
			goto done
		}
		if nElements > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds CB_COMPOUND4res.resarray's maximum of 4294967295 elements", nElements)
			goto done
		}
		for nElements > 0 {
			nElements--
			mParent := &m
			var m NfsCbResop4
			m, nField, err = ReadNfsCbResop4(r)
			nTotal += nField
			if err != nil {
				goto done
			}
			*mParent = append(*mParent, m)
		}
		*mSave = m
	}
done:
	return
}

func (m *CbCompound4res) WriteTo(w io.Writer) (nTotal int64, err error) {
	var nField int64
	{
		m := m.Status
		nField, err = runtime.WriteInt(w, int32(m))
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Tag
		nField, err = runtime.WriteUTF8String(w, 4294967295, m)
		nTotal += nField
		if err != nil {
			goto done
		}
	}
	{
		m := m.Resarray
		if uint(len(m)) > 4294967295 {
			err = fmt.Errorf("size of %d elements exceeds CB_COMPOUND4res.resarray's maximum of 4294967295 elements", len(m))
			goto done
		}
		nField, err = runtime.WriteUnsignedInt(w, uint32(len(m)))
		nTotal += nField
		if err != nil {
			goto done
		}
		for _, m := range m {
			nField, err = m.WriteTo(w)
			nTotal += nField
			if err != nil {
				goto done
			}
		}
	}
done:
	return
}

func (m *CbCompound4res) GetEncodedSizeBytes() (nTotal int) {
	nTotal += 4
	{
		m := m.Tag
		nTotal += (len(m) + 7) &^ 3
	}
	{
		m := m.Resarray
		nTotal += 4
		for _, m := range m {
			nTotal += m.GetEncodedSizeBytes()
		}
	}
	return
}

const NFS4_CALLBACK_PROGRAM_NUMBER uint32 = 1073741824

type Nfs4Callback interface {
	NfsCbCbNull(context.Context) error
	NfsCbCbCompound(context.Context, *CbCompound4args) (*CbCompound4res, error)
}

func NewNfs4CallbackService(p Nfs4Callback) func(context.Context, uint32, uint32, io.ReadCloser, io.Writer) (*rpcv2.AcceptedReply, error) {
	return func(ctx context.Context, vers, proc uint32, r io.ReadCloser, w io.Writer) (*rpcv2.AcceptedReply, error) {
		var err error
		switch vers {
		case 1:
			switch proc {
			case 0:
				r.Close()
				r = nil
				err := p.NfsCbCbNull(ctx)
				if err != nil {
					return nil, err
				}
			case 1:
				var a0 CbCompound4args
				{
					m := &a0
					var nField, nTotal int64
					nField, err = m.ReadFrom(r)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
				r.Close()
				r = nil
				m, err := p.NfsCbCbCompound(ctx, &a0)
				if err != nil {
					return nil, err
				}
				{
					var nField, nTotal int64
					nField, err = m.WriteTo(w)
					nTotal += nField
					if err != nil {
						goto done
					}
				}
			default:
				r.Close()
				return &rpcv2.AcceptedReply{ReplyData: &rpcv2.AcceptedReplyReplyData_default{Stat: rpcv2.PROC_UNAVAIL}}, nil
			}
		default:
			r.Close()
			var replyData rpcv2.AcceptedReplyReplyData_PROG_MISMATCH
			replyData.MismatchInfo.Low = 1
			replyData.MismatchInfo.High = 1
			return &rpcv2.AcceptedReply{ReplyData: &replyData}, nil
		}
		return &rpcv2.AcceptedReply{ReplyData: &rpcv2.AcceptedReplyReplyData_SUCCESS{}}, nil
	done:
		if r != nil {
			r.Close()
		}
		return nil, err
	}
}
